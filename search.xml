<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>take tensorboard</title>
      <link href="/year/12/30/take-tensorboard/"/>
      <url>/year/12/30/take-tensorboard/</url>
      
        <content type="html"><![CDATA[<h5 id="Perface"><a href="#Perface" class="headerlink" title="Perface:"></a>Perface:</h5><ul><li><a href="https://blog.csdn.net/weixin_56728251/article/details/116322383">https://blog.csdn.net/weixin_56728251/article/details/116322383</a></li><li><a href="https://blog.csdn.net/shenfuli/article/details/108436423">https://blog.csdn.net/shenfuli/article/details/108436423</a></li><li><a href="https://blog.csdn.net/bigbennyguo/article/details/87956434">https://blog.csdn.net/bigbennyguo/article/details/87956434</a></li></ul><h5 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h5><p><strong>Tensorboard</strong>是tensorflow内置的一个可视化工具，它通过将tensorflow程序输出的日志文件的信息可视化使得tensorflow程序的理解、调试和优化更加简单高效。<br>Tensorboard的可视化依赖于tensorflow程序运行输出的日志文件，因而tensorboard和tensorflow程序在不同的进程中运行。<br>TensorBoard给我们提供了极其方便而强大的可视化环境。它可以帮助我们理解整个神经网络的学习过程、数据的分布、性能瓶颈等等。</p><p>可是对于 PyTorch 等其他神经网络训练框架并没有功能像 Tensorboard 一样全面的类似工具，一些已有的工具功能有限或使用起来比较困难 (tensorboard_logger, visdom等) 。TensorboardX 这个工具使得 TensorFlow 外的其他神经网络框架也可以使用到 Tensorboard 的便捷功能。github上已经有大神将tensorboard应用到pytorch中,<a href="https://github.com/lanpa/tensorboardX">仓库</a>在这里</p><p>说白了，tensorboard原本是在tensoflow框架上应用的，后来有大神在pytorch也开发出了这样的框架。Pytorch安装Tensorboard可以参考TensorboardX的<a href="https://github.com/lanpa/tensorboardX/blob/master/README.md">readme</a>文件.</p><h5 id="Use-Tensorboard"><a href="#Use-Tensorboard" class="headerlink" title="Use Tensorboard"></a>Use Tensorboard</h5><p>1.创建一个SummaryWiter示例</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> tensorboardX <span class="token keyword">import</span> SummaryWriter<span class="token comment" spellcheck="true"># Creates writer1 object.</span><span class="token comment" spellcheck="true"># The log will be saved in 'runs/exp'</span>writer1 <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">'runs/exp'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Creates writer2 object with auto generated file name</span><span class="token comment" spellcheck="true"># The log directory will be something like 'runs/Aug20-17-20-33'</span>writer2 <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Creates writer3 object with auto generated file name, the comment will be appended to the filename.</span><span class="token comment" spellcheck="true"># The log directory will be something like 'runs/Aug20-17-20-33-resnet'</span>writer3 <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span>comment<span class="token operator">=</span><span class="token string">'resnet'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上有三种初始化创建SummaryWriter的方法</p><ol><li>提供一个路径,使用该路径来保存日志</li><li>无参数，默认使用<strong>runs/日期时间</strong>路径保存日志</li><li>提供一个comment参数，将使用<strong>runs/日期时间-comment</strong>路径保存日志</li></ol><p>一般来讲，我们对于每次实验新建一个路径不同的 SummaryWriter，也叫一个 run，如 runs/exp1、runs/exp2。</p><p>接下来，我们就可以调用 SummaryWriter 实例的各种 add_something 方法向日志中写入不同类型的数据了。想要在浏览器中查看可视化这些数据，只要在命令行中开启 tensorboard 即可：</p><pre class="line-numbers language-python"><code class="language-python">tensorboard <span class="token operator">-</span><span class="token operator">-</span>logdir<span class="token operator">=</span><span class="token operator">&lt;</span>your_log_dir<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中的 <your_log_dir> 既可以是单个 run 的路径，如上面 writer1 生成的 runs/exp；也可以是多个 run 的父目录，如 runs/ 下面可能会有很多的子文件夹，每个文件夹都代表了一次实验，我们令 <code>--logdir=runs/</code> 就可以在 tensorboard 可视化界面中方便地横向比较 runs/ 下不同次实验所得数据的差异。</your_log_dir></p><h5 id="使用add方法记录数据"><a href="#使用add方法记录数据" class="headerlink" title="使用add方法记录数据"></a>使用add方法记录数据</h5><p>tensorboard针对不同的类型人为的区分多个标签，每一个标签页面代表不同的类型，下面详细介绍 SummaryWriter 实例的各种数据记录方法</p><h6 id="scalar"><a href="#scalar" class="headerlink" title="scalar"></a>scalar</h6><p>对标量数据进行汇总和记录，通常用来可视化训练过程中随着迭代次数准确率(val acc)、损失值(train/test loss)、学习率(learning rate)、每一层的权重和偏置的统计量(mean、std、max/min)等的变化曲线，使用 <code>add_scalar</code> 方法来记录数字常量。</p>]]></content>
      
      
      
        <tags>
            
            <tag> tensorboard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmdetection-of-fenghuo-sockets-projects</title>
      <link href="/year/12/23/mmdetection-of-fenghuo-sockets-projects/"/>
      <url>/year/12/23/mmdetection-of-fenghuo-sockets-projects/</url>
      
        <content type="html"><![CDATA[<p>​    之前做的图片处理可能是因为我还没有学习很多目标检测方面的东西以及工程能力太弱，不算一个小项目只是一个小任务我就做了好几天最后也没用上，其实还是感觉沟通不及时不知道最后要达到什么效果，直到最后才明白是为了后续组里无论是做检测还是分割任务时便于提高精度达到检测的更好的效果.</p><h4 id="Perface"><a href="#Perface" class="headerlink" title="Perface"></a>Perface</h4><blockquote><p><a href="https://zhuanlan.zhihu.com/p/256344471">https://zhuanlan.zhihu.com/p/256344471</a><br><a href="https://zhuanlan.zhihu.com/p/337375549">https://zhuanlan.zhihu.com/p/337375549</a><br><a href="https://zhuanlan.zhihu.com/p/431215846">https://zhuanlan.zhihu.com/p/431215846</a><br><a href="https://aistudio.baidu.com/paddle/forum/topic/show/990118">https://aistudio.baidu.com/paddle/forum/topic/show/990118</a></p></blockquote><p>​    首先了解一下<a href="http://cocodataset.org/">coco数据集的制作</a>，MS COCO的全称是Microsoft Common Objects in Context，起源于微软于2014年出资标注的Microsoft COCO数据集。COCO数据集是一个大型的、丰富的物体检测，分割和字幕数据集。这个数据集以scene understanding为目标，主要从复杂的日常场景中截取，图像中的目标通过精确的segmentation进行位置的标定。图像包括91类目标，328,000影像和2,500,000个label。数据集主要解决3个问题：目标检测，目标之间的上下文关系，目标的2维上的精确定位.</p><blockquote><p>COCO一共有5种不同任务分类，分别是目标检测、关键点检测、语义分割、场景分割和图像描述。COCO数据集的标注文件以JSON格式保存，官方的注释文件有仨 captions_type.json instances_type.json person_keypoints_type.json，其中的type是 train/val/test+year</p></blockquote><p>​    sockets检测任务我参照一些博客上：</p><blockquote><p><a href="https://aistudio.baidu.com/paddle/forum/topic/show/990118">VOC和COCO数据集制作</a></p></blockquote><p>写的转换后的json文件中annonation里面的<strong>‘bbox’</strong>确实转换的时候出现了很大的问题，第一次是全部是0，第二次我没有直接转换而是直接按照labelme rectangle标注格式的坐标计算推理出框的相关信息但是最后训练还是出现了大问题,写脚本转coco格式这条路目前在我这里是失败了，最重要做检测的数据annotation[‘bbox’]数据信息没有转成功真是致命的：</p><p><img src="https://s6.jpg.cm/2021/12/23/LbtVF2.png" alt="LbtVF2.png"></p><h4 id="mmdet-api的探讨"><a href="#mmdet-api的探讨" class="headerlink" title="mmdet.api的探讨"></a>mmdet.api的探讨</h4><blockquote><p>2021.12.20 晚 709</p></blockquote><p>连续搞了几天sockets数据集的处理都没整明白，好菜啊，</p><p>明确任务:做sockets图片插孔的目标检测和分类任务：</p><p>但是还是要探究一下<strong>mmdet.api</strong>里面 init_detector(),inference_detector(),show_result_detector()到底是个啥东东,先看<a href="https://mmdetection.readthedocs.io/en/latest/api.html">mmdetection</a>介绍:</p><blockquote></blockquote><p>但是我看了半天还是没太明白，只剩源码一条路了:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">import</span> relu<span class="token keyword">from</span> mmdet<span class="token punctuation">.</span>apis <span class="token keyword">import</span> init_detector<span class="token punctuation">,</span>inference_detector<span class="token punctuation">,</span>show_result_pyplot<span class="token keyword">import</span> mmcv<span class="token keyword">import</span> os<span class="token keyword">import</span> glob<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">import</span> ToTensorconfig_file <span class="token operator">=</span> <span class="token string">'/home/gyf/projects/mmdetection/configs/faster_rcnn/faster_rcnn_r50_fpn_1x_coco.py'</span>checkpoint_file <span class="token operator">=</span> <span class="token string">'/home/gyf/projects/mmdetection/checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'</span>model <span class="token operator">=</span> init_detector<span class="token punctuation">(</span>config_file<span class="token punctuation">,</span>checkpoint_file<span class="token punctuation">,</span>device<span class="token operator">=</span><span class="token string">"cuda:3"</span><span class="token punctuation">)</span>img <span class="token operator">=</span> <span class="token string">'/home/gyf/projects/mmdetection/demo/demo.jpg'</span>result <span class="token operator">=</span> inference_detector<span class="token punctuation">(</span>model<span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'\n\n'</span><span class="token punctuation">,</span>result<span class="token punctuation">,</span><span class="token string">'\n\n'</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察结果:</p><blockquote><p>gyf@ubuntu /mnt/data01/home/gyf/projects/mmdetection/gyf<br>% python test.py<br>运行后结果如下</p></blockquote><pre class="line-numbers language-python"><code class="language-python">load checkpoint <span class="token keyword">from</span> local path<span class="token punctuation">:</span> <span class="token operator">/</span>home<span class="token operator">/</span>gyf<span class="token operator">/</span>projects<span class="token operator">/</span>mmdetection<span class="token operator">/</span>checkpoints<span class="token operator">/</span>faster_rcnn_r50_fpn_1x_coco_20200130<span class="token number">-047c8118.</span>pth<span class="token operator">/</span>mnt<span class="token operator">/</span>data01<span class="token operator">/</span>home<span class="token operator">/</span>gyf<span class="token operator">/</span>projects<span class="token operator">/</span>mmdetection<span class="token operator">/</span>mmdet<span class="token operator">/</span>datasets<span class="token operator">/</span>utils<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">65</span><span class="token punctuation">:</span> UserWarning<span class="token punctuation">:</span> <span class="token string">"ImageToTensor"</span> pipeline <span class="token keyword">is</span> replaced by <span class="token string">"DefaultFormatBundle"</span> <span class="token keyword">for</span> batch inference<span class="token punctuation">.</span> It <span class="token keyword">is</span> recommended to manually replace it <span class="token keyword">in</span> the test data pipeline <span class="token keyword">in</span> your config file<span class="token punctuation">.</span>  warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'list'</span><span class="token operator">></span> <span class="token number">80</span> <span class="token punctuation">[</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3.75348572e+02</span><span class="token punctuation">,</span> <span class="token number">1.19171005e+02</span><span class="token punctuation">,</span> <span class="token number">3.81950867e+02</span><span class="token punctuation">,</span> <span class="token number">1.34460617e+02</span><span class="token punctuation">,</span>        <span class="token number">1.35454819e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5.32362000e+02</span><span class="token punctuation">,</span> <span class="token number">1.09554726e+02</span><span class="token punctuation">,</span> <span class="token number">5.40526550e+02</span><span class="token punctuation">,</span> <span class="token number">1.25222633e+02</span><span class="token punctuation">,</span>        <span class="token number">8.88788104e-02</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3.61124298e+02</span><span class="token punctuation">,</span> <span class="token number">1.09049202e+02</span><span class="token punctuation">,</span> <span class="token number">3.68625610e+02</span><span class="token punctuation">,</span> <span class="token number">1.22483063e+02</span><span class="token punctuation">,</span>        <span class="token number">7.20717609e-02</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>     array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6.09650024e+02</span><span class="token punctuation">,</span> <span class="token number">1.13805901e+02</span><span class="token punctuation">,</span> <span class="token number">6.34511658e+02</span><span class="token punctuation">,</span> <span class="token number">1.36951904e+02</span><span class="token punctuation">,</span>        <span class="token number">9.88766134e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4.81773712e+02</span><span class="token punctuation">,</span> <span class="token number">1.10480995e+02</span><span class="token punctuation">,</span> <span class="token number">5.22459717e+02</span><span class="token punctuation">,</span> <span class="token number">1.30407104e+02</span><span class="token punctuation">,</span>        <span class="token number">9.87157285e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1.01820683e+00</span><span class="token punctuation">,</span> <span class="token number">1.12144722e+02</span><span class="token punctuation">,</span> <span class="token number">6.04374275e+01</span><span class="token punctuation">,</span> <span class="token number">1.44173752e+02</span><span class="token punctuation">,</span>        <span class="token number">9.83206093e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2.94623749e+02</span><span class="token punctuation">,</span> <span class="token number">1.17035233e+02</span><span class="token punctuation">,</span> <span class="token number">3.78022675e+02</span><span class="token punctuation">,</span> <span class="token number">1.50550858e+02</span><span class="token punctuation">,</span>        <span class="token number">9.71326649e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3.96328979e+02</span><span class="token punctuation">,</span> <span class="token number">1.11203323e+02</span><span class="token punctuation">,</span> <span class="token number">4.32490540e+02</span><span class="token punctuation">,</span> <span class="token number">1.32729263e+02</span><span class="token punctuation">,</span>        <span class="token number">9.67802048e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5.90976318e+02</span><span class="token punctuation">,</span> <span class="token number">1.10802658e+02</span><span class="token punctuation">,</span> <span class="token number">6.15401917e+02</span><span class="token punctuation">,</span> <span class="token number">1.26493553e+02</span><span class="token punctuation">,</span>        <span class="token number">9.59414959e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2.67582001e+02</span><span class="token punctuation">,</span> <span class="token number">1.05686005e+02</span><span class="token punctuation">,</span> <span class="token number">3.28818756e+02</span><span class="token punctuation">,</span> <span class="token number">1.28226547e+02</span><span class="token punctuation">,</span>        <span class="token number">9.59253430e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1.66856735e+02</span><span class="token punctuation">,</span> <span class="token number">1.08006599e+02</span><span class="token punctuation">,</span> <span class="token number">2.19100693e+02</span><span class="token punctuation">,</span> <span class="token number">1.40194809e+02</span><span class="token punctuation">,</span>        <span class="token number">9.56841230e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1.89769592e+02</span><span class="token punctuation">,</span> <span class="token number">1.09801109e+02</span><span class="token punctuation">,</span> <span class="token number">3.00310822e+02</span><span class="token punctuation">,</span> <span class="token number">1.53781891e+02</span><span class="token punctuation">,</span>        <span class="token number">9.51012135e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4.29822510e+02</span><span class="token punctuation">,</span> <span class="token number">1.05655388e+02</span><span class="token punctuation">,</span> <span class="token number">4.82741547e+02</span><span class="token punctuation">,</span> <span class="token number">1.32376709e+02</span><span class="token punctuation">,</span>        <span class="token number">9.45850074e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5.55000916e+02</span><span class="token punctuation">,</span> <span class="token number">1.09784981e+02</span><span class="token punctuation">,</span> <span class="token number">5.92761780e+02</span><span class="token punctuation">,</span> <span class="token number">1.27808495e+02</span><span class="token punctuation">,</span>        <span class="token number">9.43992496e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5.96790390e+01</span><span class="token punctuation">,</span> <span class="token number">9.31828003e+01</span><span class="token punctuation">,</span> <span class="token number">8.34545517e+01</span><span class="token punctuation">,</span> <span class="token number">1.06242912e+02</span><span class="token punctuation">,</span>        <span class="token number">9.33143973e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">9.78446579e+01</span><span class="token punctuation">,</span> <span class="token number">8.96542969e+01</span><span class="token punctuation">,</span> <span class="token number">1.18172356e+02</span><span class="token punctuation">,</span> <span class="token number">1.01011108e+02</span><span class="token punctuation">,</span>        <span class="token number">8.66324425e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1.43899002e+02</span><span class="token punctuation">,</span> <span class="token number">9.61869888e+01</span><span class="token punctuation">,</span> <span class="token number">1.64599808e+02</span><span class="token punctuation">,</span> <span class="token number">1.04979256e+02</span><span class="token punctuation">,</span>        <span class="token number">8.26784551e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">8.55894241e+01</span><span class="token punctuation">,</span> <span class="token number">8.99445801e+01</span><span class="token punctuation">,</span> <span class="token number">9.88920746e+01</span><span class="token punctuation">,</span> <span class="token number">9.85285416e+01</span><span class="token punctuation">,</span>        <span class="token number">7.53481209e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">9.78282623e+01</span><span class="token punctuation">,</span> <span class="token number">9.07443695e+01</span><span class="token punctuation">,</span> <span class="token number">1.10298058e+02</span><span class="token punctuation">,</span> <span class="token number">9.97373276e+01</span><span class="token punctuation">,</span>        <span class="token number">7.16599941e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2.23579224e+02</span><span class="token punctuation">,</span> <span class="token number">9.85184631e+01</span><span class="token punctuation">,</span> <span class="token number">2.49845108e+02</span><span class="token punctuation">,</span> <span class="token number">1.07509857e+02</span><span class="token punctuation">,</span>        <span class="token number">6.00782335e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1.68928619e+02</span><span class="token punctuation">,</span> <span class="token number">9.59468994e+01</span><span class="token punctuation">,</span> <span class="token number">1.82843460e+02</span><span class="token punctuation">,</span> <span class="token number">1.05694962e+02</span><span class="token punctuation">,</span>        <span class="token number">5.91998994e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1.35021347e+02</span><span class="token punctuation">,</span> <span class="token number">9.08739395e+01</span><span class="token punctuation">,</span> <span class="token number">1.50607025e+02</span><span class="token punctuation">,</span> <span class="token number">1.02798874e+02</span><span class="token punctuation">,</span>        <span class="token number">5.54029822e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0.00000000e+00</span><span class="token punctuation">,</span> <span class="token number">1.11521950e+02</span><span class="token punctuation">,</span> <span class="token number">1.45326672e+01</span><span class="token punctuation">,</span> <span class="token number">1.25850288e+02</span><span class="token punctuation">,</span>        <span class="token number">5.43520629e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5.53896606e+02</span><span class="token punctuation">,</span> <span class="token number">1.16170540e+02</span><span class="token punctuation">,</span> <span class="token number">5.62602295e+02</span><span class="token punctuation">,</span> <span class="token number">1.26390923e+02</span><span class="token punctuation">,</span>        <span class="token number">4.76758420e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3.75809753e+02</span><span class="token punctuation">,</span> <span class="token number">1.19579056e+02</span><span class="token punctuation">,</span> <span class="token number">3.82376495e+02</span><span class="token punctuation">,</span> <span class="token number">1.32113892e+02</span><span class="token punctuation">,</span>        <span class="token number">4.61191446e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1.37924118e+02</span><span class="token punctuation">,</span> <span class="token number">9.37975311e+01</span><span class="token punctuation">,</span> <span class="token number">1.54497177e+02</span><span class="token punctuation">,</span> <span class="token number">1.04659683e+02</span><span class="token punctuation">,</span>        <span class="token number">4.00998682e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5.55009033e+02</span><span class="token punctuation">,</span> <span class="token number">1.10952698e+02</span><span class="token punctuation">,</span> <span class="token number">5.74925659e+02</span><span class="token punctuation">,</span> <span class="token number">1.26912033e+02</span><span class="token punctuation">,</span>        <span class="token number">3.43850523e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5.54043152e+02</span><span class="token punctuation">,</span> <span class="token number">1.00959076e+02</span><span class="token punctuation">,</span> <span class="token number">5.61297913e+02</span><span class="token punctuation">,</span> <span class="token number">1.10927711e+02</span><span class="token punctuation">,</span>        <span class="token number">2.87964433e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6.14741028e+02</span><span class="token punctuation">,</span> <span class="token number">1.01987068e+02</span><span class="token punctuation">,</span> <span class="token number">6.35481628e+02</span><span class="token punctuation">,</span> <span class="token number">1.12593704e+02</span><span class="token punctuation">,</span>        <span class="token number">2.61202037e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5.70760315e+02</span><span class="token punctuation">,</span> <span class="token number">1.09679398e+02</span><span class="token punctuation">,</span> <span class="token number">5.90286133e+02</span><span class="token punctuation">,</span> <span class="token number">1.27248878e+02</span><span class="token punctuation">,</span>        <span class="token number">2.58405358e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4.78545129e-01</span><span class="token punctuation">,</span> <span class="token number">1.11568169e+02</span><span class="token punctuation">,</span> <span class="token number">2.25040970e+01</span><span class="token punctuation">,</span> <span class="token number">1.42623535e+02</span><span class="token punctuation">,</span>        <span class="token number">2.56050855e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3.75093140e+02</span><span class="token punctuation">,</span> <span class="token number">1.11696442e+02</span><span class="token punctuation">,</span> <span class="token number">4.20536804e+02</span><span class="token punctuation">,</span> <span class="token number">1.33691055e+02</span><span class="token punctuation">,</span>        <span class="token number">2.55963802e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2.62747253e+02</span><span class="token punctuation">,</span> <span class="token number">1.07565620e+02</span><span class="token punctuation">,</span> <span class="token number">3.26765961e+02</span><span class="token punctuation">,</span> <span class="token number">1.43925293e+02</span><span class="token punctuation">,</span>        <span class="token number">2.09969312e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7.91312561e+01</span><span class="token punctuation">,</span> <span class="token number">9.03788757e+01</span><span class="token punctuation">,</span> <span class="token number">1.00247879e+02</span><span class="token punctuation">,</span> <span class="token number">1.01080879e+02</span><span class="token punctuation">,</span>        <span class="token number">2.03961536e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6.09313477e+02</span><span class="token punctuation">,</span> <span class="token number">1.13308517e+02</span><span class="token punctuation">,</span> <span class="token number">6.25961975e+02</span><span class="token punctuation">,</span> <span class="token number">1.25342506e+02</span><span class="token punctuation">,</span>        <span class="token number">1.97424650e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1.35304840e+02</span><span class="token punctuation">,</span> <span class="token number">9.23771439e+01</span><span class="token punctuation">,</span> <span class="token number">1.64080185e+02</span><span class="token punctuation">,</span> <span class="token number">1.04992455e+02</span><span class="token punctuation">,</span>        <span class="token number">1.49972320e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6.73540573e+01</span><span class="token punctuation">,</span> <span class="token number">8.85008087e+01</span><span class="token punctuation">,</span> <span class="token number">8.29853516e+01</span><span class="token punctuation">,</span> <span class="token number">9.73942108e+01</span><span class="token punctuation">,</span>        <span class="token number">1.48384705e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5.40852417e+02</span><span class="token punctuation">,</span> <span class="token number">1.13848946e+02</span><span class="token punctuation">,</span> <span class="token number">5.61855530e+02</span><span class="token punctuation">,</span> <span class="token number">1.26198776e+02</span><span class="token punctuation">,</span>        <span class="token number">1.47629067e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3.51735046e+02</span><span class="token punctuation">,</span> <span class="token number">1.09432648e+02</span><span class="token punctuation">,</span> <span class="token number">4.39310089e+02</span><span class="token punctuation">,</span> <span class="token number">1.34819733e+02</span><span class="token punctuation">,</span>        <span class="token number">1.41735345e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">9.63179169e+01</span><span class="token punctuation">,</span> <span class="token number">8.98780594e+01</span><span class="token punctuation">,</span> <span class="token number">1.53287766e+02</span><span class="token punctuation">,</span> <span class="token number">1.01776367e+02</span><span class="token punctuation">,</span>        <span class="token number">1.32708848e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4.54495049e+01</span><span class="token punctuation">,</span> <span class="token number">1.17444977e+02</span><span class="token punctuation">,</span> <span class="token number">6.18955803e+01</span><span class="token punctuation">,</span> <span class="token number">1.44275055e+02</span><span class="token punctuation">,</span>        <span class="token number">1.25890613e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6.06407532e+02</span><span class="token punctuation">,</span> <span class="token number">1.12215973e+02</span><span class="token punctuation">,</span> <span class="token number">6.18935669e+02</span><span class="token punctuation">,</span> <span class="token number">1.24957237e+02</span><span class="token punctuation">,</span>        <span class="token number">1.10722139e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1.02152626e+02</span><span class="token punctuation">,</span> <span class="token number">9.36143646e+01</span><span class="token punctuation">,</span> <span class="token number">1.41081863e+02</span><span class="token punctuation">,</span> <span class="token number">1.01598961e+02</span><span class="token punctuation">,</span>        <span class="token number">8.13647285e-02</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3.98364838e+02</span><span class="token punctuation">,</span> <span class="token number">1.12081459e+02</span><span class="token punctuation">,</span> <span class="token number">4.09389862e+02</span><span class="token punctuation">,</span> <span class="token number">1.32897766e+02</span><span class="token punctuation">,</span>        <span class="token number">7.64545277e-02</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">5.39245911e+02</span><span class="token punctuation">,</span> <span class="token number">1.12394836e+02</span><span class="token punctuation">,</span> <span class="token number">5.48756714e+02</span><span class="token punctuation">,</span> <span class="token number">1.21964462e+02</span><span class="token punctuation">,</span>        <span class="token number">7.32634813e-02</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">6.09156555e+02</span><span class="token punctuation">,</span> <span class="token number">1.04017464e+02</span><span class="token punctuation">,</span> <span class="token number">6.35472107e+02</span><span class="token punctuation">,</span> <span class="token number">1.26777168e+02</span><span class="token punctuation">,</span>        <span class="token number">6.47422373e-02</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3.75895119e+00</span><span class="token punctuation">,</span> <span class="token number">9.85745239e+01</span><span class="token punctuation">,</span> <span class="token number">7.45848236e+01</span><span class="token punctuation">,</span> <span class="token number">1.35154999e+02</span><span class="token punctuation">,</span>        <span class="token number">6.32170066e-02</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1.68166489e+02</span><span class="token punctuation">,</span> <span class="token number">9.14260483e+01</span><span class="token punctuation">,</span> <span class="token number">2.20303131e+02</span><span class="token punctuation">,</span> <span class="token number">1.07955681e+02</span><span class="token punctuation">,</span>        <span class="token number">5.16178235e-02</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7.09723892e+01</span><span class="token punctuation">,</span> <span class="token number">9.02684860e+01</span><span class="token punctuation">,</span> <span class="token number">1.05398132e+02</span><span class="token punctuation">,</span> <span class="token number">1.03825508e+02</span><span class="token punctuation">,</span>        <span class="token number">5.15384190e-02</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>         <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.8820009e+02</span><span class="token punctuation">,</span> <span class="token number">1.0994706e+02</span><span class="token punctuation">,</span> <span class="token number">3.0047134e+02</span><span class="token punctuation">,</span> <span class="token number">1.5633583e+02</span><span class="token punctuation">,</span>        <span class="token number">9.7509019e-02</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">4.2774911e+02</span><span class="token punctuation">,</span> <span class="token number">1.0511559e+02</span><span class="token punctuation">,</span> <span class="token number">4.8345544e+02</span><span class="token punctuation">,</span> <span class="token number">1.3294328e+02</span><span class="token punctuation">,</span>        <span class="token number">9.6881889e-02</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2.9450479e+02</span><span class="token punctuation">,</span> <span class="token number">1.1764229e+02</span><span class="token punctuation">,</span> <span class="token number">3.7863284e+02</span><span class="token punctuation">,</span> <span class="token number">1.5046356e+02</span><span class="token punctuation">,</span>        <span class="token number">7.4364796e-02</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>                      array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2.1920888e+02</span><span class="token punctuation">,</span> <span class="token number">1.7456264e+02</span><span class="token punctuation">,</span> <span class="token number">4.6010886e+02</span><span class="token punctuation">,</span> <span class="token number">3.7704666e+02</span><span class="token punctuation">,</span>        <span class="token number">9.7778010e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">3.7206638e+02</span><span class="token punctuation">,</span> <span class="token number">1.3631429e+02</span><span class="token punctuation">,</span> <span class="token number">4.3219525e+02</span><span class="token punctuation">,</span> <span class="token number">1.8717290e+02</span><span class="token punctuation">,</span>        <span class="token number">4.1699928e-01</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">9.13259964e+01</span><span class="token punctuation">,</span> <span class="token number">1.07155769e+02</span><span class="token punctuation">,</span> <span class="token number">1.06029366e+02</span><span class="token punctuation">,</span> <span class="token number">1.19777306e+02</span><span class="token punctuation">,</span>        <span class="token number">1.15152784e-01</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3.7265186e+02</span><span class="token punctuation">,</span> <span class="token number">1.3614308e+02</span><span class="token punctuation">,</span> <span class="token number">4.3205383e+02</span><span class="token punctuation">,</span> <span class="token number">1.8844647e+02</span><span class="token punctuation">,</span>        <span class="token number">7.7787602e-01</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2.1840410e+02</span><span class="token punctuation">,</span> <span class="token number">1.7513780e+02</span><span class="token punctuation">,</span> <span class="token number">4.6210764e+02</span><span class="token punctuation">,</span> <span class="token number">3.6554120e+02</span><span class="token punctuation">,</span>        <span class="token number">1.0123597e-01</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>      array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span>       array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3.75348572e+02</span> <span class="token number">1.19171005e+02</span> <span class="token number">3.81950867e+02</span> <span class="token number">1.34460617e+02</span>  <span class="token number">1.35454819e-01</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">5.32362000e+02</span> <span class="token number">1.09554726e+02</span> <span class="token number">5.40526550e+02</span> <span class="token number">1.25222633e+02</span>  <span class="token number">8.88788104e-02</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3.61124298e+02</span> <span class="token number">1.09049202e+02</span> <span class="token number">3.68625610e+02</span> <span class="token number">1.22483063e+02</span>  <span class="token number">7.20717609e-02</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到有result是一个list，总长度80，是由很多array数组组成，我猜测这些信息就是记录了目标检测后每个目标画上框之后的信息</p><p><u>感谢🦌同学</u>🐂</p><h5 id="源码追究一下-mmdet-apis-inference-detector"><a href="#源码追究一下-mmdet-apis-inference-detector" class="headerlink" title="源码追究一下 mmdet.apis.inference_detector()"></a>源码追究一下 <code>mmdet.apis.inference_detector()</code></h5><p>真的很复杂，inference_detector()定义在<code>mmdet/apis/inference.py</code>里面:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Copyright (c) OpenMMLab. All rights reserved.</span><span class="token keyword">import</span> warnings<span class="token keyword">import</span> mmcv<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token keyword">from</span> mmcv<span class="token punctuation">.</span>ops <span class="token keyword">import</span> RoIPool<span class="token keyword">from</span> mmcv<span class="token punctuation">.</span>parallel <span class="token keyword">import</span> collate<span class="token punctuation">,</span> scatter<span class="token keyword">from</span> mmcv<span class="token punctuation">.</span>runner <span class="token keyword">import</span> load_checkpoint<span class="token keyword">from</span> mmdet<span class="token punctuation">.</span>core <span class="token keyword">import</span> get_classes<span class="token keyword">from</span> mmdet<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> replace_ImageToTensor<span class="token keyword">from</span> mmdet<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>pipelines <span class="token keyword">import</span> Compose<span class="token keyword">from</span> mmdet<span class="token punctuation">.</span>models <span class="token keyword">import</span> build_detector<span class="token keyword">def</span> <span class="token function">init_detector</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> checkpoint<span class="token operator">=</span>None<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token string">'cuda:0'</span><span class="token punctuation">,</span> cfg_options<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Initialize a detector from config file.    Args:        config (str or :obj:`mmcv.Config`): Config file path or the config            object.        checkpoint (str, optional): Checkpoint path. If left as None, the model            will not load any weights.        cfg_options (dict): Options to override some settings in the used            config.    Returns:        nn.Module: The constructed detector.    """</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>config<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        config <span class="token operator">=</span> mmcv<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>config<span class="token punctuation">,</span> mmcv<span class="token punctuation">.</span>Config<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'config must be a filename or Config object, '</span>                        f<span class="token string">'but got {type(config)}'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> cfg_options <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>merge_from_dict<span class="token punctuation">(</span>cfg_options<span class="token punctuation">)</span>    config<span class="token punctuation">.</span>model<span class="token punctuation">.</span>pretrained <span class="token operator">=</span> None    config<span class="token punctuation">.</span>model<span class="token punctuation">.</span>train_cfg <span class="token operator">=</span> None    model <span class="token operator">=</span> build_detector<span class="token punctuation">(</span>config<span class="token punctuation">.</span>model<span class="token punctuation">,</span> test_cfg<span class="token operator">=</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'test_cfg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> checkpoint <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>        checkpoint <span class="token operator">=</span> load_checkpoint<span class="token punctuation">(</span>model<span class="token punctuation">,</span> checkpoint<span class="token punctuation">,</span> map_location<span class="token operator">=</span><span class="token string">'cpu'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'CLASSES'</span> <span class="token keyword">in</span> checkpoint<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'meta'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            model<span class="token punctuation">.</span>CLASSES <span class="token operator">=</span> checkpoint<span class="token punctuation">[</span><span class="token string">'meta'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'CLASSES'</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            warnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">'once'</span><span class="token punctuation">)</span>            warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">'Class names are not saved in the checkpoint\'s '</span>                          <span class="token string">'meta data, use COCO classes by default.'</span><span class="token punctuation">)</span>            model<span class="token punctuation">.</span>CLASSES <span class="token operator">=</span> get_classes<span class="token punctuation">(</span><span class="token string">'coco'</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>cfg <span class="token operator">=</span> config  <span class="token comment" spellcheck="true"># save the config in the model for convenience</span>    model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token keyword">class</span> <span class="token class-name">LoadImage</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Deprecated.    A simple pipeline to load image.    """</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Call function to load images into results.        Args:            results (dict): A result dict contains the file name                of the image to be read.        Returns:            dict: ``results`` will be returned containing loaded image.        """</span>        warnings<span class="token punctuation">.</span>simplefilter<span class="token punctuation">(</span><span class="token string">'once'</span><span class="token punctuation">)</span>        warnings<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">'`LoadImage` is deprecated and will be removed in '</span>                      <span class="token string">'future releases. You may use `LoadImageFromWebcam` '</span>                      <span class="token string">'from `mmdet.datasets.pipelines.` instead.'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>            results<span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span> <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span>            results<span class="token punctuation">[</span><span class="token string">'ori_filename'</span><span class="token punctuation">]</span> <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            results<span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span> <span class="token operator">=</span> None            results<span class="token punctuation">[</span><span class="token string">'ori_filename'</span><span class="token punctuation">]</span> <span class="token operator">=</span> None        img <span class="token operator">=</span> mmcv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        results<span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> img        results<span class="token punctuation">[</span><span class="token string">'img_fields'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span>        results<span class="token punctuation">[</span><span class="token string">'img_shape'</span><span class="token punctuation">]</span> <span class="token operator">=</span> img<span class="token punctuation">.</span>shape        results<span class="token punctuation">[</span><span class="token string">'ori_shape'</span><span class="token punctuation">]</span> <span class="token operator">=</span> img<span class="token punctuation">.</span>shape        <span class="token keyword">return</span> results<span class="token keyword">def</span> <span class="token function">inference_detector</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> imgs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Inference image(s) with the detector.    Args:        model (nn.Module): The loaded detector.        imgs (str/ndarray or list[str/ndarray] or tuple[str/ndarray]):           Either image files or loaded images.    Returns:        If imgs is a list or tuple, the same length list type results        will be returned, otherwise return the detection results directly.    """</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>imgs<span class="token punctuation">,</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        is_batch <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        imgs <span class="token operator">=</span> <span class="token punctuation">[</span>imgs<span class="token punctuation">]</span>        is_batch <span class="token operator">=</span> <span class="token boolean">False</span>    cfg <span class="token operator">=</span> model<span class="token punctuation">.</span>cfg    device <span class="token operator">=</span> next<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>device  <span class="token comment" spellcheck="true"># model device</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>imgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>        cfg <span class="token operator">=</span> cfg<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># set loading pipeline type</span>        cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">.</span>pipeline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'LoadImageFromWebcam'</span>    cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">.</span>pipeline <span class="token operator">=</span> replace_ImageToTensor<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">.</span>pipeline<span class="token punctuation">)</span>    test_pipeline <span class="token operator">=</span> Compose<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">.</span>pipeline<span class="token punctuation">)</span>    datas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> img <span class="token keyword">in</span> imgs<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># prepare data</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>img<span class="token punctuation">,</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># directly add img</span>            data <span class="token operator">=</span> dict<span class="token punctuation">(</span>img<span class="token operator">=</span>img<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># add information into dict</span>            data <span class="token operator">=</span> dict<span class="token punctuation">(</span>img_info<span class="token operator">=</span>dict<span class="token punctuation">(</span>filename<span class="token operator">=</span>img<span class="token punctuation">)</span><span class="token punctuation">,</span> img_prefix<span class="token operator">=</span>None<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># build the data pipeline</span>        data <span class="token operator">=</span> test_pipeline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        datas<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    data <span class="token operator">=</span> collate<span class="token punctuation">(</span>datas<span class="token punctuation">,</span> samples_per_gpu<span class="token operator">=</span>len<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># just get the actual data from DataContainer</span>    data<span class="token punctuation">[</span><span class="token string">'img_metas'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>img_metas<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> img_metas <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">'img_metas'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    data<span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>img<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> img <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> next<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_cuda<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># scatter to specified GPU</span>        data <span class="token operator">=</span> scatter<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">[</span>device<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> model<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>                m<span class="token punctuation">,</span> RoIPool            <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'CPU inference with RoIPool is not supported currently.'</span>    <span class="token comment" spellcheck="true"># forward the model</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        results <span class="token operator">=</span> model<span class="token punctuation">(</span>return_loss<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> rescale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token operator">**</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用model进行推理，我们通过                                                    init_detector来初始化定义一个model</span>    <span class="token keyword">if</span> <span class="token operator">not</span> is_batch<span class="token punctuation">:</span>        <span class="token keyword">return</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> results<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_inference_detector</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> imgs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Async inference image(s) with the detector.    Args:        model (nn.Module): The loaded detector.        img (str | ndarray): Either image files or loaded images.    Returns:        Awaitable detection results.    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>imgs<span class="token punctuation">,</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        imgs <span class="token operator">=</span> <span class="token punctuation">[</span>imgs<span class="token punctuation">]</span>    cfg <span class="token operator">=</span> model<span class="token punctuation">.</span>cfg    device <span class="token operator">=</span> next<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>device  <span class="token comment" spellcheck="true"># model device</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>imgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>        cfg <span class="token operator">=</span> cfg<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># set loading pipeline type</span>        cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">.</span>pipeline<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'LoadImageFromWebcam'</span>    cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">.</span>pipeline <span class="token operator">=</span> replace_ImageToTensor<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">.</span>pipeline<span class="token punctuation">)</span>    test_pipeline <span class="token operator">=</span> Compose<span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>data<span class="token punctuation">.</span>test<span class="token punctuation">.</span>pipeline<span class="token punctuation">)</span>    datas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> img <span class="token keyword">in</span> imgs<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># prepare data</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>img<span class="token punctuation">,</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># directly add img</span>            data <span class="token operator">=</span> dict<span class="token punctuation">(</span>img<span class="token operator">=</span>img<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># add information into dict</span>            data <span class="token operator">=</span> dict<span class="token punctuation">(</span>img_info<span class="token operator">=</span>dict<span class="token punctuation">(</span>filename<span class="token operator">=</span>img<span class="token punctuation">)</span><span class="token punctuation">,</span> img_prefix<span class="token operator">=</span>None<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># build the data pipeline</span>        data <span class="token operator">=</span> test_pipeline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        datas<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    data <span class="token operator">=</span> collate<span class="token punctuation">(</span>datas<span class="token punctuation">,</span> samples_per_gpu<span class="token operator">=</span>len<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># just get the actual data from DataContainer</span>    data<span class="token punctuation">[</span><span class="token string">'img_metas'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>img_metas<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> img_metas <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">'img_metas'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    data<span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>img<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> img <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> next<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>is_cuda<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># scatter to specified GPU</span>        data <span class="token operator">=</span> scatter<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">[</span>device<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> model<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>                m<span class="token punctuation">,</span> RoIPool            <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'CPU inference with RoIPool is not supported currently.'</span>    <span class="token comment" spellcheck="true"># We don't restore `torch.is_grad_enabled()` value during concurrent</span>    <span class="token comment" spellcheck="true"># inference since execution can overlap</span>    torch<span class="token punctuation">.</span>set_grad_enabled<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    results <span class="token operator">=</span> <span class="token keyword">await</span> model<span class="token punctuation">.</span>aforward_test<span class="token punctuation">(</span>rescale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token operator">**</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span class="token keyword">def</span> <span class="token function">show_result_pyplot</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span>                       img<span class="token punctuation">,</span>                       result<span class="token punctuation">,</span>                       score_thr<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>                       title<span class="token operator">=</span><span class="token string">'result'</span><span class="token punctuation">,</span>                       wait_time<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Visualize the detection results on the image.    Args:        model (nn.Module): The loaded detector.        img (str or np.ndarray): Image filename or loaded image.        result (tuple[list] or list): The detection result, can be either            (bbox, segm) or just bbox.        score_thr (float): The threshold to visualize the bboxes and masks.        title (str): Title of the pyplot figure.        wait_time (float): Value of waitKey param.                Default: 0.    """</span>    <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">'module'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> model<span class="token punctuation">.</span>module    model<span class="token punctuation">.</span>show_result<span class="token punctuation">(</span>        img<span class="token punctuation">,</span>        result<span class="token punctuation">,</span>        score_thr<span class="token operator">=</span>score_thr<span class="token punctuation">,</span>        show<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        wait_time<span class="token operator">=</span>wait_time<span class="token punctuation">,</span>        win_name<span class="token operator">=</span>title<span class="token punctuation">,</span>        bbox_color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">241</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        text_color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">241</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第<strong>146</strong>行是最关键的源码调用<code>result = model(return_loss=False,rescale=True,**data)</code>这行代码调用model进行推理预测返回一个结果。函数<code>inference_detector(model,img)</code>需要两个参数，model的定义是利用上面的<code>init_detector</code>接口，这个接口需要我们传入指定的config和checkpoint文件，config对应搭建的模型配置，maskrcnn输出的最后一层是<code>roi_heads</code>,我们需要溯源到这里看一看有关configs文件:<br>我们自己定义的config：<code>configs/fenghuo/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py</code>，这里的<code>_base_ = '../mask_rcnn/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_coco.py</code>,<br>继续溯源这个模块：<code>configs/mask_rcnn/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_coco.py</code>，这里的<code>_base_ = './mask_rcnn_r50_fpn_1x_coco.py'</code><br>溯源：<code>configs/mask_rcnn/mask_rcnn_r50_fpn_1x_coco.py</code>,这个文件有一点像package里面的<code>__init__.py</code>,是前面模块需要继承的基本类型:</p><pre class="line-numbers language-python"><code class="language-python">_base_ <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'../_base_/models/mask_rcnn_r50_fpn.py'</span><span class="token punctuation">,</span>    <span class="token string">'../_base_/datasets/coco_instance.py'</span><span class="token punctuation">,</span>    <span class="token string">'../_base_/schedules/schedule_1x.py'</span><span class="token punctuation">,</span> <span class="token string">'../_base_/default_runtime.py'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是模型config的继承基类文件,看一看关于<code>roi_heads</code>定义相关的部分，显然要去溯源<code>'../_base_/models/mask_rcnn_r50_fpn.py'</code>文件，找到位置：<code>configs/_base_/models/mask_rcnn_r50_fpn.py</code>找到<code>roi_heads</code>相关的定义</p><p><img src="https://s6.jpg.cm/2021/12/23/LbtBk4.png" alt="LbtBk4.png"></p><p>观察发现<code>roi_head</code>都是属于<code>type=‘StandardRoIHead’,由于MMDetection的注册机Registry机制,需要到</code>mmdet<code>去溯源 在mmdet/models/roi_heads</code>位置：<code>mmdet/models/roi_heads/standard_roi_head.py</code>这个文件<br>后来可以发现程序运行到这一部分时会跳到<code>simple_test()</code>这个函数部分:</p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">simple_test</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                    x<span class="token punctuation">,</span>                    proposal_list<span class="token punctuation">,</span>                    img_metas<span class="token punctuation">,</span>                    proposals<span class="token operator">=</span>None<span class="token punctuation">,</span>                    rescale<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Test without augmentation.        Args:            x (tuple[Tensor]): Features from upstream network. Each                has shape (batch_size, c, h, w).            proposal_list (list(Tensor)): Proposals from rpn head.                Each has shape (num_proposals, 5), last dimension                5 represent (x1, y1, x2, y2, score).            img_metas (list[dict]): Meta information of images.            rescale (bool): Whether to rescale the results to                the original image. Default: True.        Returns:            list[list[np.ndarray]] or list[tuple]: When no mask branch,            it is bbox results of each image and classes with type            `list[list[np.ndarray]]`. The outer list            corresponds to each image. The inner list            corresponds to each class. When the model has mask branch,            it contains bbox results and mask results.            The outer list corresponds to each image, and first element            of tuple is bbox results, second element is mask results.        """</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>with_bbox<span class="token punctuation">,</span> <span class="token string">'Bbox head must be implemented.'</span>        det_bboxes<span class="token punctuation">,</span> det_labels <span class="token operator">=</span> self<span class="token punctuation">.</span>simple_test_bboxes<span class="token punctuation">(</span>            x<span class="token punctuation">,</span> img_metas<span class="token punctuation">,</span> proposal_list<span class="token punctuation">,</span> self<span class="token punctuation">.</span>test_cfg<span class="token punctuation">,</span> rescale<span class="token operator">=</span>rescale<span class="token punctuation">)</span>        bbox_results <span class="token operator">=</span> <span class="token punctuation">[</span>            bbox2result<span class="token punctuation">(</span>det_bboxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> det_labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                        self<span class="token punctuation">.</span>bbox_head<span class="token punctuation">.</span>num_classes<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>det_bboxes<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>with_mask<span class="token punctuation">:</span>            <span class="token keyword">return</span> bbox_results        <span class="token keyword">else</span><span class="token punctuation">:</span>            segm_results <span class="token operator">=</span> self<span class="token punctuation">.</span>simple_test_mask<span class="token punctuation">(</span>                x<span class="token punctuation">,</span> img_metas<span class="token punctuation">,</span> det_bboxes<span class="token punctuation">,</span> det_labels<span class="token punctuation">,</span> rescale<span class="token operator">=</span>rescale<span class="token punctuation">)</span>            <span class="token keyword">return</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>bbox_results<span class="token punctuation">,</span> segm_results<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续观察可以发现调用里面的bbox2result()部分来解决问题。</p><p><code>forward_dummy</code>这个函数也是很有用的(<del>虽然我还不知道有啥用</del>),但推测是<code>mmdet/models/detectors/two_stage.py</code>这里,另外就是还定义了<code>_bbox_forward()</code>函数，值得研究.</p><p>也只是介绍了mask_rcnn的最后一层<code>roi_head</code>部分，其他的还是很复杂完全不懂，总体上来说的话有必要去看<code>mmdet/models/detectors/two_stage.py</code>这个定义，可以看看<code>TwoStageDetector</code>是如何调度的和运行的.</p><h5 id="dataloader-of-mmdetection"><a href="#dataloader-of-mmdetection" class="headerlink" title="dataloader of mmdetection"></a>dataloader of mmdetection</h5><p>蒋哥一直推荐不要每次做项目都是转换成coco/voc格式，这样比较麻烦的原因在于每次labelme标注的信息文件格式很有可能不一样，每次转化都要重写脚本是非常痛苦的(但是我觉得前几次还是有必要转格式积累经验的)，当然现阶段我也不会写dataloader转化，只能硬写转化脚本,<span class="github-emoji"><span>😠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f620.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>好气呀！</p><p>看了组里其他同学的博客明白MMDetection需要深入理解Rigistry机制的，需要参照之前溯源的过程去寻找，</p><p>我们自己定义的config：<code>configs/fenghuo/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py</code>，这里的<code>_base_ = '../mask_rcnn/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_coco.py</code>,<br>继续溯源这个模块：<code>configs/mask_rcnn/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_coco.py</code>，这里的<code>_base_ = './mask_rcnn_r50_fpn_1x_coco.py'</code><br>溯源：<code>configs/mask_rcnn/mask_rcnn_r50_fpn_1x_coco.py</code></p><pre class="line-numbers language-python"><code class="language-python">_base_ <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'../_base_/models/mask_rcnn_r50_fpn.py'</span><span class="token punctuation">,</span>    <span class="token string">'../_base_/datasets/coco_instance.py'</span><span class="token punctuation">,</span>    <span class="token string">'../_base_/schedules/schedule_1x.py'</span><span class="token punctuation">,</span> <span class="token string">'../_base_/default_runtime.py'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察到<code>../_base_/datasets/coco_instance.py'</code>的前几行代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># dataset settings</span>dataset_type <span class="token operator">=</span> <span class="token string">'CocoDataset'</span>data_root <span class="token operator">=</span> <span class="token string">'data/coco/'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>dataset_type = ‘CocoDataset’</strong>:就是mmdetection非常重要的Registry机制，那就需要<code>mmdet</code>这个文件夹里去寻找(<del>经过蒋哥提醒</del>),找到位置：<code>mmdet/datasets/coco.py</code>定义了<strong>CocoDataset</strong>类，所以关于CocoDataset的dataloader就找到了！</p><p>直接去了<code>coco.py</code>的前46行，(<del>太多了截取全部影响阅读</del>)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Copyright (c) OpenMMLab. All rights reserved.</span><span class="token keyword">import</span> itertools<span class="token keyword">import</span> logging<span class="token keyword">import</span> os<span class="token punctuation">.</span>path <span class="token keyword">as</span> osp<span class="token keyword">import</span> tempfile<span class="token keyword">import</span> warnings<span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict<span class="token keyword">import</span> mmcv<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> mmcv<span class="token punctuation">.</span>utils <span class="token keyword">import</span> print_log<span class="token keyword">from</span> terminaltables <span class="token keyword">import</span> AsciiTable<span class="token keyword">from</span> mmdet<span class="token punctuation">.</span>core <span class="token keyword">import</span> eval_recalls<span class="token keyword">from</span> <span class="token punctuation">.</span>api_wrappers <span class="token keyword">import</span> COCO<span class="token punctuation">,</span> COCOeval<span class="token keyword">from</span> <span class="token punctuation">.</span>builder <span class="token keyword">import</span> DATASETS<span class="token keyword">from</span> <span class="token punctuation">.</span>custom <span class="token keyword">import</span> CustomDataset@DATASETS<span class="token punctuation">.</span>register_module<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">CocoDataset</span><span class="token punctuation">(</span>CustomDataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    CLASSES <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">,</span> <span class="token string">'bicycle'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">,</span> <span class="token string">'motorcycle'</span><span class="token punctuation">,</span> <span class="token string">'airplane'</span><span class="token punctuation">,</span> <span class="token string">'bus'</span><span class="token punctuation">,</span>               <span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'truck'</span><span class="token punctuation">,</span> <span class="token string">'boat'</span><span class="token punctuation">,</span> <span class="token string">'traffic light'</span><span class="token punctuation">,</span> <span class="token string">'fire hydrant'</span><span class="token punctuation">,</span>               <span class="token string">'stop sign'</span><span class="token punctuation">,</span> <span class="token string">'parking meter'</span><span class="token punctuation">,</span> <span class="token string">'bench'</span><span class="token punctuation">,</span> <span class="token string">'bird'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span>               <span class="token string">'horse'</span><span class="token punctuation">,</span> <span class="token string">'sheep'</span><span class="token punctuation">,</span> <span class="token string">'cow'</span><span class="token punctuation">,</span> <span class="token string">'elephant'</span><span class="token punctuation">,</span> <span class="token string">'bear'</span><span class="token punctuation">,</span> <span class="token string">'zebra'</span><span class="token punctuation">,</span> <span class="token string">'giraffe'</span><span class="token punctuation">,</span>               <span class="token string">'backpack'</span><span class="token punctuation">,</span> <span class="token string">'umbrella'</span><span class="token punctuation">,</span> <span class="token string">'handbag'</span><span class="token punctuation">,</span> <span class="token string">'tie'</span><span class="token punctuation">,</span> <span class="token string">'suitcase'</span><span class="token punctuation">,</span> <span class="token string">'frisbee'</span><span class="token punctuation">,</span>               <span class="token string">'skis'</span><span class="token punctuation">,</span> <span class="token string">'snowboard'</span><span class="token punctuation">,</span> <span class="token string">'sports ball'</span><span class="token punctuation">,</span> <span class="token string">'kite'</span><span class="token punctuation">,</span> <span class="token string">'baseball bat'</span><span class="token punctuation">,</span>               <span class="token string">'baseball glove'</span><span class="token punctuation">,</span> <span class="token string">'skateboard'</span><span class="token punctuation">,</span> <span class="token string">'surfboard'</span><span class="token punctuation">,</span> <span class="token string">'tennis racket'</span><span class="token punctuation">,</span>               <span class="token string">'bottle'</span><span class="token punctuation">,</span> <span class="token string">'wine glass'</span><span class="token punctuation">,</span> <span class="token string">'cup'</span><span class="token punctuation">,</span> <span class="token string">'fork'</span><span class="token punctuation">,</span> <span class="token string">'knife'</span><span class="token punctuation">,</span> <span class="token string">'spoon'</span><span class="token punctuation">,</span> <span class="token string">'bowl'</span><span class="token punctuation">,</span>               <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'sandwich'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'broccoli'</span><span class="token punctuation">,</span> <span class="token string">'carrot'</span><span class="token punctuation">,</span>               <span class="token string">'hot dog'</span><span class="token punctuation">,</span> <span class="token string">'pizza'</span><span class="token punctuation">,</span> <span class="token string">'donut'</span><span class="token punctuation">,</span> <span class="token string">'cake'</span><span class="token punctuation">,</span> <span class="token string">'chair'</span><span class="token punctuation">,</span> <span class="token string">'couch'</span><span class="token punctuation">,</span>               <span class="token string">'potted plant'</span><span class="token punctuation">,</span> <span class="token string">'bed'</span><span class="token punctuation">,</span> <span class="token string">'dining table'</span><span class="token punctuation">,</span> <span class="token string">'toilet'</span><span class="token punctuation">,</span> <span class="token string">'tv'</span><span class="token punctuation">,</span> <span class="token string">'laptop'</span><span class="token punctuation">,</span>               <span class="token string">'mouse'</span><span class="token punctuation">,</span> <span class="token string">'remote'</span><span class="token punctuation">,</span> <span class="token string">'keyboard'</span><span class="token punctuation">,</span> <span class="token string">'cell phone'</span><span class="token punctuation">,</span> <span class="token string">'microwave'</span><span class="token punctuation">,</span>               <span class="token string">'oven'</span><span class="token punctuation">,</span> <span class="token string">'toaster'</span><span class="token punctuation">,</span> <span class="token string">'sink'</span><span class="token punctuation">,</span> <span class="token string">'refrigerator'</span><span class="token punctuation">,</span> <span class="token string">'book'</span><span class="token punctuation">,</span> <span class="token string">'clock'</span><span class="token punctuation">,</span>               <span class="token string">'vase'</span><span class="token punctuation">,</span> <span class="token string">'scissors'</span><span class="token punctuation">,</span> <span class="token string">'teddy bear'</span><span class="token punctuation">,</span> <span class="token string">'hair drier'</span><span class="token punctuation">,</span> <span class="token string">'toothbrush'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">load_annotations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ann_file<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Load annotation from COCO style annotation file.        Args:            ann_file (str): Path of annotation file.        Returns:            list[dict]: Annotation info from COCO api.        """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要看20行：<code>@DATASETS.register_module()</code>这个东西，深入的语法先不研究，后面有时间再说，我们只需要知道这句话就相当于注册了有关的<code>Registry</code>，从这个定义之后，我们就需要像前面一样声明<code>dataset_type = 'CocoDataset'</code>就可以将这个dataloader放到MMdet中</p><p>值得注意是自己写dataloader的话，类需要继承的是<code>from .custom import CustomDataset</code>中的<code>CustomDataset</code></p><h5 id="sockets插孔数据再处理-thinking"><a href="#sockets插孔数据再处理-thinking" class="headerlink" title="sockets插孔数据再处理:thinking:"></a>sockets插孔数据再处理<span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h5><h4 id="sockets检测"><a href="#sockets检测" class="headerlink" title="sockets检测"></a>sockets检测</h4><blockquote><p>2021.12.21晚 709</p></blockquote><p><strong>gyf@ubuntu ~/projects/mmdetection</strong></p><p><code>% python tools/train.py configs/fenghuo/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py</code></p><h5 id="2021-12-21-21-51-09-265-mmdet-INFO-Environment-info"><a href="#2021-12-21-21-51-09-265-mmdet-INFO-Environment-info" class="headerlink" title="2021-12-21 21:51:09,265 - mmdet - INFO - Environment info:"></a>2021-12-21 21:51:09,265 - mmdet - INFO - Environment info:</h5><p>sys.platform: linux<br>Python: 3.9.7 (default, Sep 16 2021, 13:09:58) [GCC 7.5.0]<br>CUDA available: True<br>GPU 0,1,2,3: GeForce RTX 2080 Ti<br>CUDA_HOME: /usr/local/cuda<br>NVCC: Build cuda_11.0_bu.TC445_37.28845127_0<br>GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0<br>PyTorch: 1.10.1<br>PyTorch compiling details: PyTorch built with:</p><ul><li>GCC 7.3</li><li>C++ Version: 201402</li><li>Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications</li><li>Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)</li><li>OpenMP 201511 (a.k.a. OpenMP 4.5)</li><li>LAPACK is enabled (usually provided by MKL)</li><li>NNPACK is enabled</li><li>CPU capability usage: AVX2</li><li>CUDA Runtime 11.3</li><li>NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37</li><li>CuDNN 8.2</li><li>Magma 2.5.2</li><li>Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON,</li></ul><p>TorchVision: 0.11.2<br>OpenCV: 4.5.4<br>MMCV: 1.4.0<br>MMCV Compiler: GCC 7.3<br>MMCV CUDA Compiler: 11.3</p><h5 id="MMDetection-2-18-0-6cf9aa1"><a href="#MMDetection-2-18-0-6cf9aa1" class="headerlink" title="MMDetection: 2.18.0+6cf9aa1"></a>MMDetection: 2.18.0+6cf9aa1</h5><p>2021-12-21 21:51:10,501 - mmdet - INFO - Distributed training: False<br>2021-12-21 21:51:11,750 - mmdet - INFO - Config:<br>model = dict(<br>    type=’MaskRCNN’,<br>    backbone=dict(<br>        type=’ResNet’,<br>        depth=50,<br>        num_stages=4,<br>        out_indices=(0, 1, 2, 3),<br>        frozen_stages=1,<br>        norm_cfg=dict(type=’BN’, requires_grad=False),<br>        norm_eval=True,<br>        style=’caffe’,<br>        init_cfg=dict(<br>            type=’Pretrained’,<br>            checkpoint=’open-mmlab://detectron2/resnet50_caffe’)),<br>    neck=dict(<br>        type=’FPN’,<br>        in_channels=[256, 512, 1024, 2048],<br>        out_channels=256,<br>        num_outs=5),<br>    rpn_head=dict(<br>        type=’RPNHead’,<br>        in_channels=256,<br>        feat_channels=256,<br>        anchor_generator=dict(<br>            type=’AnchorGenerator’,<br>            scales=[8],<br>            ratios=[0.5, 1.0, 2.0],<br>            strides=[4, 8, 16, 32, 64]),<br>        bbox_coder=dict(<br>            type=’DeltaXYWHBBoxCoder’,<br>            target_means=[0.0, 0.0, 0.0, 0.0],<br>            target_stds=[1.0, 1.0, 1.0, 1.0]),<br>        loss_cls=dict(<br>            type=’CrossEntropyLoss’, use_sigmoid=True, loss_weight=1.0),<br>        loss_bbox=dict(type=’L1Loss’, loss_weight=1.0)),<br>    roi_head=dict(<br>        type=’StandardRoIHead’,<br>        bbox_roi_extractor=dict(<br>            type=’SingleRoIExtractor’,<br>            roi_layer=dict(type=’RoIAlign’, output_size=7, sampling_ratio=0),<br>            out_channels=256,<br>            featmap_strides=[4, 8, 16, 32]),<br>        bbox_head=dict(<br>            type=’Shared2FCBBoxHead’,<br>            in_channels=256,<br>            fc_out_channels=1024,<br>            roi_feat_size=7,<br>            num_classes=8,<br>            bbox_coder=dict(<br>                type=’DeltaXYWHBBoxCoder’,<br>                target_means=[0.0, 0.0, 0.0, 0.0],<br>                target_stds=[0.1, 0.1, 0.2, 0.2]),<br>            reg_class_agnostic=False,<br>            loss_cls=dict(<br>                type=’CrossEntropyLoss’, use_sigmoid=False, loss_weight=1.0),<br>            loss_bbox=dict(type=’L1Loss’, loss_weight=1.0)),<br>        mask_roi_extractor=dict(<br>            type=’SingleRoIExtractor’,<br>            roi_layer=dict(type=’RoIAlign’, output_size=14, sampling_ratio=0),<br>            out_channels=256,<br>            featmap_strides=[4, 8, 16, 32]),<br>        mask_head=dict(<br>            type=’FCNMaskHead’,<br>            num_convs=4,<br>            in_channels=256,<br>            conv_out_channels=256,<br>            num_classes=8,<br>            loss_mask=dict(<br>                type=’CrossEntropyLoss’, use_mask=True, loss_weight=1.0))),<br>    train_cfg=dict(<br>        rpn=dict(<br>            assigner=dict(<br>                type=’MaxIoUAssigner’,<br>                pos_iou_thr=0.7,<br>                neg_iou_thr=0.3,<br>                min_pos_iou=0.3,<br>                match_low_quality=True,<br>                ignore_iof_thr=-1),<br>            sampler=dict(<br>                type=’RandomSampler’,<br>                num=256,<br>                pos_fraction=0.5,<br>                neg_pos_ub=-1,<br>                add_gt_as_proposals=False),<br>            allowed_border=-1,<br>            pos_weight=-1,<br>            debug=False),<br>        rpn_proposal=dict(<br>            nms_pre=2000,<br>            max_per_img=1000,<br>            nms=dict(type=’nms’, iou_threshold=0.7),<br>            min_bbox_size=0),<br>        rcnn=dict(<br>            assigner=dict(<br>                type=’MaxIoUAssigner’,<br>                pos_iou_thr=0.5,<br>                neg_iou_thr=0.5,<br>                min_pos_iou=0.5,<br>                match_low_quality=True,<br>                ignore_iof_thr=-1),<br>            sampler=dict(<br>                type=’RandomSampler’,<br>                num=512,<br>                pos_fraction=0.25,<br>                neg_pos_ub=-1,<br>                add_gt_as_proposals=True),<br>            mask_size=28,<br>            pos_weight=-1,<br>            debug=False)),<br>    test_cfg=dict(<br>        rpn=dict(<br>            nms_pre=1000,<br>            max_per_img=1000,<br>            nms=dict(type=’nms’, iou_threshold=0.7),<br>            min_bbox_size=0),<br>        rcnn=dict(<br>            score_thr=0.05,<br>            nms=dict(type=’nms’, iou_threshold=0.5),<br>            max_per_img=100,<br>            mask_thr_binary=0.5)))<br>dataset_type = ‘COCODataset’<br>data_root = ‘data/coco/‘<br>img_norm_cfg = dict(<br>    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)<br>train_pipeline = [<br>    dict(type=’LoadImageFromFile’),<br>    dict(<br>        type=’LoadAnnotations’,<br>        with_bbox=True,<br>        with_mask=True,<br>        poly2mask=False),<br>    dict(<br>        type=’Resize’,<br>        img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),<br>                   (1333, 768), (1333, 800)],<br>        multiscale_mode=’value’,<br>        keep_ratio=True),<br>    dict(type=’RandomFlip’, flip_ratio=0.5),<br>    dict(<br>        type=’Normalize’,<br>        mean=[103.53, 116.28, 123.675],<br>        std=[1.0, 1.0, 1.0],<br>        to_rgb=False),<br>    dict(type=’Pad’, size_divisor=32),<br>    dict(type=’DefaultFormatBundle’),<br>    dict(type=’Collect’, keys=[‘img’, ‘gt_bboxes’, ‘gt_labels’, ‘gt_masks’])<br>]<br>test_pipeline = [<br>    dict(type=’LoadImageFromFile’),<br>    dict(<br>        type=’MultiScaleFlipAug’,<br>        img_scale=(1333, 800),<br>        flip=False,<br>        transforms=[<br>            dict(type=’Resize’, keep_ratio=True),<br>            dict(type=’RandomFlip’),<br>            dict(<br>                type=’Normalize’,<br>                mean=[103.53, 116.28, 123.675],<br>                std=[1.0, 1.0, 1.0],<br>                to_rgb=False),<br>            dict(type=’Pad’, size_divisor=32),<br>            dict(type=’ImageToTensor’, keys=[‘img’]),<br>            dict(type=’Collect’, keys=[‘img’])<br>        ])<br>]<br>data = dict(<br>    samples_per_gpu=2,<br>    workers_per_gpu=2,<br>    train=dict(<br>        type=’CocoDataset’,<br>        ann_file=<br>        ‘/home/gyf/projects/mmdetection/data/sockets/train/annotation_coco.json’,<br>        img_prefix=’/home/gyf/projects/mmdetection/data/sockets/train/‘,<br>        pipeline=[<br>            dict(type=’LoadImageFromFile’),<br>            dict(<br>                type=’LoadAnnotations’,<br>                with_bbox=True,<br>                with_mask=True,<br>                poly2mask=False),<br>            dict(<br>                type=’Resize’,<br>                img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),<br>                           (1333, 768), (1333, 800)],<br>                multiscale_mode=’value’,<br>                keep_ratio=True),<br>            dict(type=’RandomFlip’, flip_ratio=0.5),<br>            dict(<br>                type=’Normalize’,<br>                mean=[103.53, 116.28, 123.675],<br>                std=[1.0, 1.0, 1.0],<br>                to_rgb=False),<br>            dict(type=’Pad’, size_divisor=32),<br>            dict(type=’DefaultFormatBundle’),<br>            dict(<br>                type=’Collect’,<br>                keys=[‘img’, ‘gt_bboxes’, ‘gt_labels’, ‘gt_masks’])<br>        ],<br>        classes=(‘out1’, ‘out2’, ‘out3’, ‘in1’, ‘in2’, ‘in3’, ‘2’, ‘’)),<br>    val=dict(<br>        type=’CocoDataset’,<br>        ann_file=<br>        ‘/home/gyf/projects/mmdetection/data/sockets/val/annotation_coco.json’,<br>        img_prefix=’/home/gyf/projects/mmdetection/data/sockets/val/‘,<br>        pipeline=[<br>            dict(type=’LoadImageFromFile’),<br>            dict(<br>                type=’MultiScaleFlipAug’,<br>                img_scale=(1333, 800),<br>                flip=False,<br>                transforms=[<br>                    dict(type=’Resize’, keep_ratio=True),<br>                    dict(type=’RandomFlip’),<br>                    dict(<br>                        type=’Normalize’,<br>                        mean=[103.53, 116.28, 123.675],<br>                        std=[1.0, 1.0, 1.0],<br>                        to_rgb=False),<br>                    dict(type=’Pad’, size_divisor=32),<br>                    dict(type=’ImageToTensor’, keys=[‘img’]),<br>                    dict(type=’Collect’, keys=[‘img’])<br>                ])<br>        ],<br>        classes=(‘out1’, ‘out2’, ‘out3’, ‘in1’, ‘in2’, ‘in3’, ‘2’, ‘’)),<br>    test=dict(<br>        type=’CocoDataset’,<br>        ann_file=<br>        ‘/home/gyf/projects/mmdetection/data/sockets/val/annotation_coco.json’,<br>        img_prefix=’/home/gyf/projects/mmdetection/data/sockets/val/‘,<br>        pipeline=[<br>            dict(type=’LoadImageFromFile’),<br>            dict(<br>                type=’MultiScaleFlipAug’,<br>                img_scale=(1333, 800),<br>                flip=False,<br>                transforms=[<br>                    dict(type=’Resize’, keep_ratio=True),<br>                    dict(type=’RandomFlip’),<br>                    dict(<br>                        type=’Normalize’,<br>                        mean=[103.53, 116.28, 123.675],<br>                        std=[1.0, 1.0, 1.0],<br>                        to_rgb=False),<br>                    dict(type=’Pad’, size_divisor=32),<br>                    dict(type=’ImageToTensor’, keys=[‘img’]),<br>                    dict(type=’Collect’, keys=[‘img’])<br>                ])<br>        ],<br>        classes=(‘out1’, ‘out2’, ‘out3’, ‘in1’, ‘in2’, ‘in3’, ‘2’, ‘’)))<br>evaluation = dict(metric=[‘bbox’, ‘segm’])<br>optimizer = dict(type=’SGD’, lr=0.02, momentum=0.9, weight_decay=0.0001)<br>optimizer_config = dict(grad_clip=None)<br>lr_config = dict(<br>    policy=’step’,<br>    warmup=’linear’,<br>    warmup_iters=500,<br>    warmup_ratio=0.001,<br>    step=[8, 11])<br>runner = dict(type=’EpochBasedRunner’, max_epochs=12)<br>checkpoint_config = dict(interval=1)<br>log_config = dict(interval=50, hooks=[dict(type=’TextLoggerHook’)])<br>custom_hooks = [dict(type=’NumClassCheckHook’)]<br>dist_params = dict(backend=’nccl’)<br>log_level = ‘INFO’<br>load_from = ‘/home/gyf/projects/mmdetection/checkpoints/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco_bbox_mAP-0.408__segm_mAP-0.37_20200504_163245-42aa3d00.pth’<br>resume_from = None<br>workflow = [(‘train’, 1)]<br>classes = (‘out1’, ‘out2’, ‘out3’, ‘in1’, ‘in2’, ‘in3’, ‘2’, ‘’)<br>work_dir = ‘./work_dirs/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets’<br>gpu_ids = range(0, 1)</p><p>2021-12-21 21:51:11,751 - mmdet - INFO - Set random seed to 1229834670, deterministic: False<br>2021-12-21 21:51:12,198 - mmdet - INFO - initialize ResNet with init_cfg {‘type’: ‘Pretrained’, ‘checkpoint’: ‘open-mmlab://detectron2/resnet50_caffe’}<br>2021-12-21 21:51:12,198 - mmcv - INFO - load model from: open-mmlab://detectron2/resnet50_caffe<br>2021-12-21 21:51:12,199 - mmcv - INFO - load checkpoint from openmmlab path: open-mmlab://detectron2/resnet50_caffe<br>2021-12-21 21:51:12,307 - mmcv - WARNING - The model and loaded state dict do not match exactly</p><p>unexpected key in source state_dict: conv1.bias</p><p>2021-12-21 21:51:12,340 - mmdet - INFO - initialize FPN with init_cfg {‘type’: ‘Xavier’, ‘layer’: ‘Conv2d’, ‘distribution’: ‘uniform’}<br>2021-12-21 21:51:12,383 - mmdet - INFO - initialize RPNHead with init_cfg {‘type’: ‘Normal’, ‘layer’: ‘Conv2d’, ‘std’: 0.01}<br>2021-12-21 21:51:12,391 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{‘type’: ‘Normal’, ‘std’: 0.01, ‘override’: {‘name’: ‘fc_cls’}}, {‘type’: ‘Normal’, ‘std’: 0.001, ‘override’: {‘name’: ‘fc_reg’}}, {‘type’: ‘Xavier’, ‘override’: [{‘name’: ‘shared_fcs’}, {‘name’: ‘cls_fcs’}, {‘name’: ‘reg_fcs’}]}]<br>loading annotations into memory…<br>Done (t=0.02s)<br>creating index…<br>index created!<br>loading annotations into memory…<br>Done (t=0.01s)<br>creating index…<br>index created!<br>2021-12-21 21:51:15,458 - mmdet - INFO - load checkpoint from local path: /home/gyf/projects/mmdetection/checkpoints/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco_bbox_mAP-0.408__segm_mAP-0.37_20200504_163245-42aa3d00.pth<br>2021-12-21 21:51:15,617 - mmdet - WARNING - The model and loaded state dict do not match exactly</p><p>size mismatch for roi_head.bbox_head.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([9, 1024]).<br>size mismatch for roi_head.bbox_head.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([9]).<br>size mismatch for roi_head.bbox_head.fc_reg.weight: copying a param with shape torch.Size([320, 1024]) from checkpoint, the shape in current model is torch.Size([32, 1024]).<br>size mismatch for roi_head.bbox_head.fc_reg.bias: copying a param with shape torch.Size([320]) from checkpoint, the shape in current model is torch.Size([32]).<br>size mismatch for roi_head.mask_head.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([8, 256, 1, 1]).<br>size mismatch for roi_head.mask_head.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([8]).<br>2021-12-21 21:51:15,623 - mmdet - INFO - Start running, host: gyf@ubuntu, work_dir: /mnt/data01/home/gyf/projects/mmdetection/work_dirs/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets<br>2021-12-21 21:51:15,623 - mmdet - INFO - Hooks will be executed in the following order:<br>before_run:<br>(VERY_HIGH   ) StepLrUpdaterHook<br>(NORMAL      ) CheckpointHook<br>(LOW         ) EvalHook<br>(VERY_LOW    ) TextLoggerHook</p><hr><p>before_train_epoch:<br>(VERY_HIGH   ) StepLrUpdaterHook<br>(NORMAL      ) NumClassCheckHook<br>(LOW         ) IterTimerHook<br>(LOW         ) EvalHook<br>(VERY_LOW    ) TextLoggerHook</p><p>before_train_iter:<br>(VERY_HIGH   ) StepLrUpdaterHook<br>(LOW         ) IterTimerHook<br>(LOW         ) EvalHook</p><hr><p>after_train_iter:<br>(ABOVE_NORMAL) OptimizerHook<br>(NORMAL      ) CheckpointHook<br>(LOW         ) IterTimerHook<br>(LOW         ) EvalHook<br>(VERY_LOW    ) TextLoggerHook</p><hr><p>after_train_epoch:<br>(NORMAL      ) CheckpointHook<br>(LOW         ) EvalHook<br>(VERY_LOW    ) TextLoggerHook</p><hr><p>before_val_epoch:<br>(NORMAL      ) NumClassCheckHook<br>(LOW         ) IterTimerHook<br>(VERY_LOW    ) TextLoggerHook</p><hr><p>before_val_iter:<br>(LOW         ) IterTimerHook</p><hr><p>after_val_iter:<br>(LOW         ) IterTimerHook</p><hr><p>after_val_epoch:<br>(VERY_LOW    ) TextLoggerHook</p><hr><p>after_run:<br>(VERY_LOW    ) TextLoggerHook</p><hr><p><strong>epoch：1</strong></p><pre class="line-numbers language-pyhon"><code class="language-pyhon">2021-12-21 21:51:15,623 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs2021-12-21 21:51:15,623 - mmdet - INFO - Checkpoints will be saved to /mnt/data01/home/gyf/projects/mmdetection/work_dirs/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets by HardDiskBackend.2021-12-21 21:51:30,877 - mmdet - INFO - Epoch [1][50/930]      lr: 1.978e-03, eta: 0:56:09, time: 0.303, data_time: 0.051, memory: 3050, loss_rpn_cls: 0.0593, loss_rpn_bbox: 0.0060, loss_cls: 0.4836, acc: 88.0762, loss_bbox: 0.0283, loss_mask: 0.5316, loss: 1.10882021-12-21 21:51:42,944 - mmdet - INFO - Epoch [1][100/930]     lr: 3.976e-03, eta: 0:50:09, time: 0.241, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0324, loss_rpn_bbox: 0.0057, loss_cls: 0.1005, acc: 98.5547, loss_bbox: 0.0447, loss_mask: 0.3602, loss: 0.54342021-12-21 21:51:54,878 - mmdet - INFO - Epoch [1][150/930]     lr: 5.974e-03, eta: 0:47:54, time: 0.239, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0336, loss_rpn_bbox: 0.0059, loss_cls: 0.0944, acc: 98.4277, loss_bbox: 0.0476, loss_mask: 0.3338, loss: 0.51542021-12-21 21:52:07,173 - mmdet - INFO - Epoch [1][200/930]     lr: 7.972e-03, eta: 0:46:59, time: 0.246, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0321, loss_rpn_bbox: 0.0064, loss_cls: 0.0856, acc: 98.5020, loss_bbox: 0.0430, loss_mask: 0.3231, loss: 0.49022021-12-21 21:52:19,585 - mmdet - INFO - Epoch [1][250/930]     lr: 9.970e-03, eta: 0:46:27, time: 0.248, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0250, loss_rpn_bbox: 0.0052, loss_cls: 0.1124, acc: 97.8770, loss_bbox: 0.0575, loss_mask: 0.3223, loss: 0.52242021-12-21 21:52:31,916 - mmdet - INFO - Epoch [1][300/930]     lr: 1.197e-02, eta: 0:45:58, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0263, loss_rpn_bbox: 0.0057, loss_cls: 0.1151, acc: 97.8320, loss_bbox: 0.0521, loss_mask: 0.2696, loss: 0.46872021-12-21 21:52:44,130 - mmdet - INFO - Epoch [1][350/930]     lr: 1.397e-02, eta: 0:45:30, time: 0.244, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0306, loss_rpn_bbox: 0.0071, loss_cls: 0.1030, acc: 98.2188, loss_bbox: 0.0496, loss_mask: 0.3332, loss: 0.52352021-12-21 21:52:56,471 - mmdet - INFO - Epoch [1][400/930]     lr: 1.596e-02, eta: 0:45:10, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0308, loss_rpn_bbox: 0.0069, loss_cls: 0.0996, acc: 98.3027, loss_bbox: 0.0423, loss_mask: 0.3790, loss: 0.55872021-12-21 21:53:09,135 - mmdet - INFO - Epoch [1][450/930]     lr: 1.796e-02, eta: 0:44:59, time: 0.254, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0285, loss_rpn_bbox: 0.0061, loss_cls: 0.1043, acc: 98.0840, loss_bbox: 0.0431, loss_mask: 0.3195, loss: 0.50142021-12-21 21:53:21,833 - mmdet - INFO - Epoch [1][500/930]     lr: 1.996e-02, eta: 0:44:48, time: 0.254, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0290, loss_rpn_bbox: 0.0080, loss_cls: 0.1086, acc: 97.9746, loss_bbox: 0.0502, loss_mask: 0.3295, loss: 0.52522021-12-21 21:53:34,545 - mmdet - INFO - Epoch [1][550/930]     lr: 2.000e-02, eta: 0:44:38, time: 0.254, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0294, loss_rpn_bbox: 0.0069, loss_cls: 0.1129, acc: 97.9414, loss_bbox: 0.0471, loss_mask: 0.3062, loss: 0.50252021-12-21 21:53:46,741 - mmdet - INFO - Epoch [1][600/930]     lr: 2.000e-02, eta: 0:44:18, time: 0.244, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0271, loss_rpn_bbox: 0.0074, loss_cls: 0.1000, acc: 98.1562, loss_bbox: 0.0464, loss_mask: 0.3042, loss: 0.48502021-12-21 21:53:59,443 - mmdet - INFO - Epoch [1][650/930]     lr: 2.000e-02, eta: 0:44:07, time: 0.254, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0268, loss_rpn_bbox: 0.0074, loss_cls: 0.1002, acc: 98.0684, loss_bbox: 0.0420, loss_mask: 0.2872, loss: 0.46362021-12-21 21:54:12,305 - mmdet - INFO - Epoch [1][700/930]     lr: 2.000e-02, eta: 0:43:58, time: 0.257, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0260, loss_rpn_bbox: 0.0057, loss_cls: 0.1047, acc: 97.9590, loss_bbox: 0.0429, loss_mask: 0.2588, loss: 0.43812021-12-21 21:54:24,763 - mmdet - INFO - Epoch [1][750/930]     lr: 2.000e-02, eta: 0:43:43, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0194, loss_rpn_bbox: 0.0061, loss_cls: 0.0993, acc: 97.9316, loss_bbox: 0.0438, loss_mask: 0.2568, loss: 0.42552021-12-21 21:54:37,189 - mmdet - INFO - Epoch [1][800/930]     lr: 2.000e-02, eta: 0:43:28, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0247, loss_rpn_bbox: 0.0069, loss_cls: 0.0980, acc: 98.0312, loss_bbox: 0.0462, loss_mask: 0.2838, loss: 0.45962021-12-21 21:54:49,453 - mmdet - INFO - Epoch [1][850/930]     lr: 2.000e-02, eta: 0:43:12, time: 0.245, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0281, loss_rpn_bbox: 0.0059, loss_cls: 0.1013, acc: 98.1250, loss_bbox: 0.0431, loss_mask: 0.2680, loss: 0.44632021-12-21 21:55:02,245 - mmdet - INFO - Epoch [1][900/930]     lr: 2.000e-02, eta: 0:43:02, time: 0.256, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0243, loss_rpn_bbox: 0.0065, loss_cls: 0.1063, acc: 98.0195, loss_bbox: 0.0462, loss_mask: 0.2775, loss: 0.46072021-12-21 21:55:09,711 - mmdet - INFO - Saving checkpoint at 1 epochs[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 764/764, 10.9 task/s, elapsed: 70s, ETA:     0s2021-12-21 21:56:22,062 - mmdet - INFO - Evaluating bbox...Loading and preparing results...DONE (t=0.01s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=0.69s).Accumulating evaluation results...DONE (t=0.26s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.011 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.017 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.013 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.150 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.013 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.013 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.177 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.177 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.177 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.150 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.213 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.1972021-12-21 21:56:23,045 - mmdet - INFO - Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.06s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=0.70s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.27s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.011 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.017 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.012 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.050 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.013 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.013 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.177 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.177 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.177 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.150 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.214 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.1972021-12-21 21:56:24,155 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 21:56:24,156 - mmdet - INFO - Epoch(val) [1][764]    bbox_mAP: 0.0110, bbox_mAP_50: 0.0170, bbox_mAP_75: 0.0130, bbox_mAP_s: 0.1500, bbox_mAP_m: 0.0130, bbox_mAP_l: 0.0130, bbox_mAP_copypaste: 0.011 0.017 0.013 0.150 0.013 0.013, segm_mAP: 0.0110, segm_mAP_50: 0.0170, segm_mAP_75: 0.0120, segm_mAP_s: 0.0500, segm_mAP_m: 0.0130, segm_mAP_l: 0.0130, segm_mAP_copypaste: 0.011 0.017 0.012 0.050 0.013 0.013/mnt/data01/home/gyf/projects/mmdetection/mmdet/core/mask/structures.py:1070: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  bitmap_mask = maskUtils.decode(rle).astype(np.bool)/home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/mmcv/runner/hooks/logger/text.py:112: DeprecationWarning: an integer is required (got type float).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.  mem_mb = torch.tensor([mem / (1024 * 1024)],<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Epoch 2:</strong></p><pre><code>2021-12-21 21:56:39,033 - mmdet - INFO - Epoch [2][50/930]      lr: 2.000e-02, eta: 0:41:46, time: 0.296, data_time: 0.052, memory: 3050, loss_rpn_cls: 0.0272, loss_rpn_bbox: 0.0066, loss_cls: 0.0903, acc: 98.1641, loss_bbox: 0.0372, loss_mask: 0.2521, loss: 0.41352021-12-21 21:56:51,349 - mmdet - INFO - Epoch [2][100/930]     lr: 2.000e-02, eta: 0:41:34, time: 0.246, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0257, loss_rpn_bbox: 0.0061, loss_cls: 0.0883, acc: 98.2012, loss_bbox: 0.0378, loss_mask: 0.2791, loss: 0.43692021-12-21 21:57:03,682 - mmdet - INFO - Epoch [2][150/930]     lr: 2.000e-02, eta: 0:41:22, time: 0.246, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0273, loss_rpn_bbox: 0.0063, loss_cls: 0.0983, acc: 98.0742, loss_bbox: 0.0396, loss_mask: 0.2770, loss: 0.44852021-12-21 21:57:16,379 - mmdet - INFO - Epoch [2][200/930]     lr: 2.000e-02, eta: 0:41:13, time: 0.254, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0150, loss_rpn_bbox: 0.0047, loss_cls: 0.1047, acc: 97.8418, loss_bbox: 0.0442, loss_mask: 0.2601, loss: 0.42872021-12-21 21:57:28,914 - mmdet - INFO - Epoch [2][250/930]     lr: 2.000e-02, eta: 0:41:02, time: 0.251, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0230, loss_rpn_bbox: 0.0060, loss_cls: 0.1007, acc: 97.8574, loss_bbox: 0.0425, loss_mask: 0.2352, loss: 0.40742021-12-21 21:57:41,438 - mmdet - INFO - Epoch [2][300/930]     lr: 2.000e-02, eta: 0:40:51, time: 0.250, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0236, loss_rpn_bbox: 0.0066, loss_cls: 0.0974, acc: 97.9766, loss_bbox: 0.0441, loss_mask: 0.2576, loss: 0.42932021-12-21 21:57:53,713 - mmdet - INFO - Epoch [2][350/930]     lr: 2.000e-02, eta: 0:40:38, time: 0.245, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0220, loss_rpn_bbox: 0.0067, loss_cls: 0.0966, acc: 97.9609, loss_bbox: 0.0380, loss_mask: 0.2470, loss: 0.41022021-12-21 21:58:06,207 - mmdet - INFO - Epoch [2][400/930]     lr: 2.000e-02, eta: 0:40:27, time: 0.250, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0248, loss_rpn_bbox: 0.0070, loss_cls: 0.0962, acc: 98.0918, loss_bbox: 0.0447, loss_mask: 0.2851, loss: 0.45782021-12-21 21:58:18,727 - mmdet - INFO - Epoch [2][450/930]     lr: 2.000e-02, eta: 0:40:16, time: 0.251, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0262, loss_rpn_bbox: 0.0078, loss_cls: 0.1020, acc: 97.9570, loss_bbox: 0.0420, loss_mask: 0.2593, loss: 0.43742021-12-21 21:58:31,463 - mmdet - INFO - Epoch [2][500/930]     lr: 2.000e-02, eta: 0:40:06, time: 0.255, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0200, loss_rpn_bbox: 0.0056, loss_cls: 0.1004, acc: 97.9414, loss_bbox: 0.0438, loss_mask: 0.2607, loss: 0.43052021-12-21 21:58:44,207 - mmdet - INFO - Epoch [2][550/930]     lr: 2.000e-02, eta: 0:39:57, time: 0.255, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0206, loss_rpn_bbox: 0.0061, loss_cls: 0.0948, acc: 97.9629, loss_bbox: 0.0432, loss_mask: 0.2799, loss: 0.44452021-12-21 21:58:56,856 - mmdet - INFO - Epoch [2][600/930]     lr: 2.000e-02, eta: 0:39:46, time: 0.253, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0226, loss_rpn_bbox: 0.0078, loss_cls: 0.1000, acc: 97.8359, loss_bbox: 0.0479, loss_mask: 0.2761, loss: 0.45442021-12-21 21:59:09,542 - mmdet - INFO - Epoch [2][650/930]     lr: 2.000e-02, eta: 0:39:35, time: 0.253, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0218, loss_rpn_bbox: 0.0067, loss_cls: 0.1068, acc: 97.7031, loss_bbox: 0.0465, loss_mask: 0.2699, loss: 0.45172021-12-21 21:59:22,348 - mmdet - INFO - Epoch [2][700/930]     lr: 2.000e-02, eta: 0:39:25, time: 0.256, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0189, loss_rpn_bbox: 0.0057, loss_cls: 0.1085, acc: 97.7012, loss_bbox: 0.0498, loss_mask: 0.2500, loss: 0.43292021-12-21 21:59:34,816 - mmdet - INFO - Epoch [2][750/930]     lr: 2.000e-02, eta: 0:39:13, time: 0.250, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0232, loss_rpn_bbox: 0.0063, loss_cls: 0.0955, acc: 97.9648, loss_bbox: 0.0437, loss_mask: 0.2768, loss: 0.44542021-12-21 21:59:47,408 - mmdet - INFO - Epoch [2][800/930]     lr: 2.000e-02, eta: 0:39:02, time: 0.252, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0229, loss_rpn_bbox: 0.0062, loss_cls: 0.0971, acc: 97.8750, loss_bbox: 0.0437, loss_mask: 0.2533, loss: 0.42322021-12-21 21:59:59,688 - mmdet - INFO - Epoch [2][850/930]     lr: 2.000e-02, eta: 0:38:49, time: 0.246, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0183, loss_rpn_bbox: 0.0052, loss_cls: 0.0937, acc: 97.9336, loss_bbox: 0.0432, loss_mask: 0.2523, loss: 0.41272021-12-21 22:00:12,573 - mmdet - INFO - Epoch [2][900/930]     lr: 2.000e-02, eta: 0:38:38, time: 0.258, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0199, loss_rpn_bbox: 0.0059, loss_cls: 0.0975, acc: 97.9297, loss_bbox: 0.0428, loss_mask: 0.2603, loss: 0.42642021-12-21 22:00:20,323 - mmdet - INFO - Saving checkpoint at 2 epochs[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 9.4 task/s, elapsed: 81s, ETA:     0s2021-12-21 22:01:43,823 - mmdet - INFO - Evaluating bbox...Loading and preparing results...DONE (t=0.11s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=0.86s).Accumulating evaluation results...DONE (t=0.34s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.012 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.019 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.013 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.150 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.016 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.012 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.201 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.201 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.201 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.150 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.258 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.1942021-12-21 22:01:45,162 - mmdet - INFO - Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.11s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=0.92s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.35s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.012 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.019 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.014 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.175 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.015 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.013 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.204 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.204 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.204 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.175 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.262 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.1922021-12-21 22:01:46,746 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:01:46,747 - mmdet - INFO - Epoch(val) [2][764]    bbox_mAP: 0.0120, bbox_mAP_50: 0.0190, bbox_mAP_75: 0.0130, bbox_mAP_s: 0.1500, bbox_mAP_m: 0.0160, bbox_mAP_l: 0.0120, bbox_mAP_copypaste: 0.012 0.019 0.013 0.150 0.016 0.012, segm_mAP: 0.0120, segm_mAP_50: 0.0190, segm_mAP_75: 0.0140, segm_mAP_s: 0.1750, segm_mAP_m: 0.0150, segm_mAP_l: 0.0130, segm_mAP_copypaste: 0.012 0.019 0.014 0.175 0.015 0.013/mnt/data01/home/gyf/projects/mmdetection/mmdet/core/mask/structures.py:1070: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  bitmap_mask = maskUtils.decode(rle).astype(np.bool)/home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/mmcv/runner/hooks/logger/text.py:112: DeprecationWarning: an integer is required (got type float).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.  mem_mb = torch.tensor([mem / (1024 * 1024)],</code></pre><p><strong>Epoch 3:</strong></p><pre><code>2021-12-21 22:02:01,913 - mmdet - INFO - Epoch [3][50/930]      lr: 2.000e-02, eta: 0:37:55, time: 0.302, data_time: 0.052, memory: 3050, loss_rpn_cls: 0.0186, loss_rpn_bbox: 0.0054, loss_cls: 0.1044, acc: 97.7559, loss_bbox: 0.0450, loss_mask: 0.2723, loss: 0.44582021-12-21 22:02:14,295 - mmdet - INFO - Epoch [3][100/930]     lr: 2.000e-02, eta: 0:37:43, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0204, loss_rpn_bbox: 0.0063, loss_cls: 0.0861, acc: 98.1270, loss_bbox: 0.0395, loss_mask: 0.2726, loss: 0.42502021-12-21 22:02:26,634 - mmdet - INFO - Epoch [3][150/930]     lr: 2.000e-02, eta: 0:37:31, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0221, loss_rpn_bbox: 0.0065, loss_cls: 0.1039, acc: 97.6504, loss_bbox: 0.0467, loss_mask: 0.2384, loss: 0.41772021-12-21 22:02:39,182 - mmdet - INFO - Epoch [3][200/930]     lr: 2.000e-02, eta: 0:37:20, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0207, loss_rpn_bbox: 0.0058, loss_cls: 0.0923, acc: 97.8906, loss_bbox: 0.0387, loss_mask: 0.2276, loss: 0.38522021-12-21 22:02:51,689 - mmdet - INFO - Epoch [3][250/930]     lr: 2.000e-02, eta: 0:37:08, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0196, loss_rpn_bbox: 0.0055, loss_cls: 0.0865, acc: 97.9414, loss_bbox: 0.0354, loss_mask: 0.2145, loss: 0.36152021-12-21 22:03:04,108 - mmdet - INFO - Epoch [3][300/930]     lr: 2.000e-02, eta: 0:36:57, time: 0.248, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0237, loss_rpn_bbox: 0.0052, loss_cls: 0.0947, acc: 97.9160, loss_bbox: 0.0409, loss_mask: 0.2321, loss: 0.39662021-12-21 22:03:16,446 - mmdet - INFO - Epoch [3][350/930]     lr: 2.000e-02, eta: 0:36:44, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0189, loss_rpn_bbox: 0.0056, loss_cls: 0.1081, acc: 97.5762, loss_bbox: 0.0484, loss_mask: 0.2318, loss: 0.41272021-12-21 22:03:28,923 - mmdet - INFO - Epoch [3][400/930]     lr: 2.000e-02, eta: 0:36:33, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0248, loss_rpn_bbox: 0.0056, loss_cls: 0.1074, acc: 97.6680, loss_bbox: 0.0509, loss_mask: 0.2603, loss: 0.44902021-12-21 22:03:41,569 - mmdet - INFO - Epoch [3][450/930]     lr: 2.000e-02, eta: 0:36:22, time: 0.253, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0211, loss_rpn_bbox: 0.0058, loss_cls: 0.0928, acc: 97.9746, loss_bbox: 0.0404, loss_mask: 0.2682, loss: 0.42832021-12-21 22:03:54,270 - mmdet - INFO - Epoch [3][500/930]     lr: 2.000e-02, eta: 0:36:11, time: 0.254, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0180, loss_rpn_bbox: 0.0053, loss_cls: 0.1024, acc: 97.9609, loss_bbox: 0.0469, loss_mask: 0.2769, loss: 0.44952021-12-21 22:04:07,070 - mmdet - INFO - Epoch [3][550/930]     lr: 2.000e-02, eta: 0:36:00, time: 0.256, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0230, loss_rpn_bbox: 0.0068, loss_cls: 0.1004, acc: 97.8984, loss_bbox: 0.0437, loss_mask: 0.2519, loss: 0.42592021-12-21 22:04:19,619 - mmdet - INFO - Epoch [3][600/930]     lr: 2.000e-02, eta: 0:35:48, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0226, loss_rpn_bbox: 0.0058, loss_cls: 0.1000, acc: 97.7598, loss_bbox: 0.0415, loss_mask: 0.2337, loss: 0.40362021-12-21 22:04:32,238 - mmdet - INFO - Epoch [3][650/930]     lr: 2.000e-02, eta: 0:35:37, time: 0.252, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0202, loss_rpn_bbox: 0.0061, loss_cls: 0.1085, acc: 97.5664, loss_bbox: 0.0453, loss_mask: 0.2252, loss: 0.40522021-12-21 22:04:45,017 - mmdet - INFO - Epoch [3][700/930]     lr: 2.000e-02, eta: 0:35:26, time: 0.256, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0219, loss_rpn_bbox: 0.0058, loss_cls: 0.1043, acc: 97.6836, loss_bbox: 0.0450, loss_mask: 0.2512, loss: 0.42832021-12-21 22:04:57,497 - mmdet - INFO - Epoch [3][750/930]     lr: 2.000e-02, eta: 0:35:14, time: 0.250, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0217, loss_rpn_bbox: 0.0069, loss_cls: 0.1021, acc: 97.8457, loss_bbox: 0.0493, loss_mask: 0.2673, loss: 0.44732021-12-21 22:05:10,218 - mmdet - INFO - Epoch [3][800/930]     lr: 2.000e-02, eta: 0:35:03, time: 0.254, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0188, loss_rpn_bbox: 0.0059, loss_cls: 0.0950, acc: 97.8027, loss_bbox: 0.0392, loss_mask: 0.2219, loss: 0.38082021-12-21 22:05:22,822 - mmdet - INFO - Epoch [3][850/930]     lr: 2.000e-02, eta: 0:34:51, time: 0.252, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0224, loss_rpn_bbox: 0.0066, loss_cls: 0.0955, acc: 97.7891, loss_bbox: 0.0423, loss_mask: 0.2192, loss: 0.38602021-12-21 22:05:35,648 - mmdet - INFO - Epoch [3][900/930]     lr: 2.000e-02, eta: 0:34:40, time: 0.257, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0281, loss_rpn_bbox: 0.0079, loss_cls: 0.0920, acc: 97.9434, loss_bbox: 0.0442, loss_mask: 0.2602, loss: 0.43242021-12-21 22:05:43,204 - mmdet - INFO - Saving checkpoint at 3 epochs[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 8.8 task/s, elapsed: 87s, ETA:     0s2021-12-21 22:07:12,110 - mmdet - INFO - Evaluating bbox...Loading and preparing results...DONE (t=0.12s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=0.78s).Accumulating evaluation results...DONE (t=0.37s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.016 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.027 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.018 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.200 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.021 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.019 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.252 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.252 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.252 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.200 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.310 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2382021-12-21 22:07:13,405 - mmdet - INFO - Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.12s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=0.92s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.37s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.017 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.027 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.019 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.304 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.020 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.021 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.255 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.255 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.255 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.304 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.321 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2262021-12-21 22:07:15,042 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:07:15,042 - mmdet - INFO - Epoch(val) [3][764]    bbox_mAP: 0.0160, bbox_mAP_50: 0.0270, bbox_mAP_75: 0.0180, bbox_mAP_s: 0.2000, bbox_mAP_m: 0.0210, bbox_mAP_l: 0.0190, bbox_mAP_copypaste: 0.016 0.027 0.018 0.200 0.021 0.019, segm_mAP: 0.0170, segm_mAP_50: 0.0270, segm_mAP_75: 0.0190, segm_mAP_s: 0.3040, segm_mAP_m: 0.0200, segm_mAP_l: 0.0210, segm_mAP_copypaste: 0.017 0.027 0.019 0.304 0.020 0.021/mnt/data01/home/gyf/projects/mmdetection/mmdet/core/mask/structures.py:1070: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  bitmap_mask = maskUtils.decode(rle).astype(np.bool)/home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/mmcv/runner/hooks/logger/text.py:112: DeprecationWarning: an integer is required (got type float).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.  mem_mb = torch.tensor([mem / (1024 * 1024)],</code></pre><p><strong>Epoch 4:</strong></p><pre><code>2021-12-21 22:07:29,912 - mmdet - INFO - Epoch [4][50/930]      lr: 2.000e-02, eta: 0:34:06, time: 0.295, data_time: 0.052, memory: 3050, loss_rpn_cls: 0.0219, loss_rpn_bbox: 0.0059, loss_cls: 0.0995, acc: 97.8066, loss_bbox: 0.0444, loss_mask: 0.2479, loss: 0.41962021-12-21 22:07:42,387 - mmdet - INFO - Epoch [4][100/930]     lr: 2.000e-02, eta: 0:33:54, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0207, loss_rpn_bbox: 0.0064, loss_cls: 0.1056, acc: 97.5508, loss_bbox: 0.0485, loss_mask: 0.2601, loss: 0.44132021-12-21 22:07:55,251 - mmdet - INFO - Epoch [4][150/930]     lr: 2.000e-02, eta: 0:33:43, time: 0.258, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0237, loss_rpn_bbox: 0.0062, loss_cls: 0.1223, acc: 97.2949, loss_bbox: 0.0547, loss_mask: 0.2307, loss: 0.43762021-12-21 22:08:07,899 - mmdet - INFO - Epoch [4][200/930]     lr: 2.000e-02, eta: 0:33:32, time: 0.253, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0178, loss_rpn_bbox: 0.0056, loss_cls: 0.1065, acc: 97.6113, loss_bbox: 0.0489, loss_mask: 0.2554, loss: 0.43422021-12-21 22:08:20,486 - mmdet - INFO - Epoch [4][250/930]     lr: 2.000e-02, eta: 0:33:20, time: 0.252, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0219, loss_rpn_bbox: 0.0059, loss_cls: 0.1035, acc: 97.5879, loss_bbox: 0.0446, loss_mask: 0.2369, loss: 0.41282021-12-21 22:08:32,865 - mmdet - INFO - Epoch [4][300/930]     lr: 2.000e-02, eta: 0:33:08, time: 0.248, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0170, loss_rpn_bbox: 0.0064, loss_cls: 0.0853, acc: 98.1484, loss_bbox: 0.0361, loss_mask: 0.2394, loss: 0.38422021-12-21 22:08:45,194 - mmdet - INFO - Epoch [4][350/930]     lr: 2.000e-02, eta: 0:32:56, time: 0.246, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0150, loss_rpn_bbox: 0.0055, loss_cls: 0.1072, acc: 97.4766, loss_bbox: 0.0466, loss_mask: 0.2238, loss: 0.39812021-12-21 22:08:57,715 - mmdet - INFO - Epoch [4][400/930]     lr: 2.000e-02, eta: 0:32:44, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0186, loss_rpn_bbox: 0.0059, loss_cls: 0.0992, acc: 97.7129, loss_bbox: 0.0450, loss_mask: 0.2251, loss: 0.39382021-12-21 22:09:10,325 - mmdet - INFO - Epoch [4][450/930]     lr: 2.000e-02, eta: 0:32:32, time: 0.253, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0191, loss_rpn_bbox: 0.0057, loss_cls: 0.0976, acc: 97.5684, loss_bbox: 0.0424, loss_mask: 0.2057, loss: 0.37052021-12-21 22:09:23,173 - mmdet - INFO - Epoch [4][500/930]     lr: 2.000e-02, eta: 0:32:21, time: 0.257, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0171, loss_rpn_bbox: 0.0052, loss_cls: 0.1065, acc: 97.6270, loss_bbox: 0.0464, loss_mask: 0.2253, loss: 0.40052021-12-21 22:09:35,986 - mmdet - INFO - Epoch [4][550/930]     lr: 2.000e-02, eta: 0:32:10, time: 0.256, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0180, loss_rpn_bbox: 0.0055, loss_cls: 0.0964, acc: 97.7637, loss_bbox: 0.0405, loss_mask: 0.2360, loss: 0.39642021-12-21 22:09:48,288 - mmdet - INFO - Epoch [4][600/930]     lr: 2.000e-02, eta: 0:31:58, time: 0.246, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0169, loss_rpn_bbox: 0.0061, loss_cls: 0.0825, acc: 97.9883, loss_bbox: 0.0356, loss_mask: 0.2219, loss: 0.36302021-12-21 22:10:00,893 - mmdet - INFO - Epoch [4][650/930]     lr: 2.000e-02, eta: 0:31:46, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0152, loss_rpn_bbox: 0.0055, loss_cls: 0.0949, acc: 97.8418, loss_bbox: 0.0399, loss_mask: 0.2404, loss: 0.39592021-12-21 22:10:13,555 - mmdet - INFO - Epoch [4][700/930]     lr: 2.000e-02, eta: 0:31:34, time: 0.253, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0132, loss_rpn_bbox: 0.0054, loss_cls: 0.1011, acc: 97.6289, loss_bbox: 0.0451, loss_mask: 0.2521, loss: 0.41682021-12-21 22:10:25,970 - mmdet - INFO - Epoch [4][750/930]     lr: 2.000e-02, eta: 0:31:22, time: 0.249, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0166, loss_rpn_bbox: 0.0056, loss_cls: 0.1006, acc: 97.7383, loss_bbox: 0.0450, loss_mask: 0.2427, loss: 0.41052021-12-21 22:10:38,441 - mmdet - INFO - Epoch [4][800/930]     lr: 2.000e-02, eta: 0:31:10, time: 0.249, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0166, loss_rpn_bbox: 0.0064, loss_cls: 0.0940, acc: 97.9082, loss_bbox: 0.0398, loss_mask: 0.2325, loss: 0.38932021-12-21 22:10:50,866 - mmdet - INFO - Epoch [4][850/930]     lr: 2.000e-02, eta: 0:30:58, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0187, loss_rpn_bbox: 0.0051, loss_cls: 0.0936, acc: 97.8340, loss_bbox: 0.0418, loss_mask: 0.2227, loss: 0.38182021-12-21 22:11:03,546 - mmdet - INFO - Epoch [4][900/930]     lr: 2.000e-02, eta: 0:30:46, time: 0.253, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0182, loss_rpn_bbox: 0.0060, loss_cls: 0.0890, acc: 97.9160, loss_bbox: 0.0399, loss_mask: 0.2405, loss: 0.39362021-12-21 22:11:11,150 - mmdet - INFO - Saving checkpoint at 4 epochs[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 8.6 task/s, elapsed: 89s, ETA:     0s2021-12-21 22:12:41,740 - mmdet - INFO - Evaluating bbox...Loading and preparing results...DONE (t=0.02s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=0.60s).Accumulating evaluation results...DONE (t=0.37s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.009 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.014 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.010 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.210 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.011 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.010 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.130 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.130 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.130 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.343 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.161 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.1302021-12-21 22:12:42,887 - mmdet - INFO - Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.10s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=0.76s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.37s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.009 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.014 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.010 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.235 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.011 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.010 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.132 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.132 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.132 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.368 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.163 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.1302021-12-21 22:12:44,367 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:12:44,368 - mmdet - INFO - Epoch(val) [4][764]    bbox_mAP: 0.0090, bbox_mAP_50: 0.0140, bbox_mAP_75: 0.0100, bbox_mAP_s: 0.2100, bbox_mAP_m: 0.0110, bbox_mAP_l: 0.0100, bbox_mAP_copypaste: 0.009 0.014 0.010 0.210 0.011 0.010, segm_mAP: 0.0090, segm_mAP_50: 0.0140, segm_mAP_75: 0.0100, segm_mAP_s: 0.2350, segm_mAP_m: 0.0110, segm_mAP_l: 0.0100, segm_mAP_copypaste: 0.009 0.014 0.010 0.235 0.011 0.010/mnt/data01/home/gyf/projects/mmdetection/mmdet/core/mask/structures.py:1070: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  bitmap_mask = maskUtils.decode(rle).astype(np.bool)/home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/mmcv/runner/hooks/logger/text.py:112: DeprecationWarning: an integer is required (got type float).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.  mem_mb = torch.tensor([mem / (1024 * 1024)],</code></pre><p><strong>Epoch:5</strong></p><pre><code>2021-12-21 22:12:59,256 - mmdet - INFO - Epoch [5][50/930]      lr: 2.000e-02, eta: 0:30:16, time: 0.296, data_time: 0.052, memory: 3050, loss_rpn_cls: 0.0191, loss_rpn_bbox: 0.0051, loss_cls: 0.0997, acc: 97.7422, loss_bbox: 0.0452, loss_mask: 0.2399, loss: 0.40902021-12-21 22:13:11,650 - mmdet - INFO - Epoch [5][100/930]     lr: 2.000e-02, eta: 0:30:04, time: 0.248, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0164, loss_rpn_bbox: 0.0057, loss_cls: 0.0967, acc: 97.7012, loss_bbox: 0.0424, loss_mask: 0.2309, loss: 0.39212021-12-21 22:13:23,842 - mmdet - INFO - Epoch [5][150/930]     lr: 2.000e-02, eta: 0:29:52, time: 0.244, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0144, loss_rpn_bbox: 0.0050, loss_cls: 0.0992, acc: 97.5312, loss_bbox: 0.0472, loss_mask: 0.2333, loss: 0.39912021-12-21 22:13:36,225 - mmdet - INFO - Epoch [5][200/930]     lr: 2.000e-02, eta: 0:29:40, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0183, loss_rpn_bbox: 0.0059, loss_cls: 0.0865, acc: 97.9922, loss_bbox: 0.0403, loss_mask: 0.2443, loss: 0.39532021-12-21 22:13:48,706 - mmdet - INFO - Epoch [5][250/930]     lr: 2.000e-02, eta: 0:29:28, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0185, loss_rpn_bbox: 0.0049, loss_cls: 0.1027, acc: 97.5312, loss_bbox: 0.0468, loss_mask: 0.2309, loss: 0.40382021-12-21 22:14:01,050 - mmdet - INFO - Epoch [5][300/930]     lr: 2.000e-02, eta: 0:29:15, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0196, loss_rpn_bbox: 0.0060, loss_cls: 0.1024, acc: 97.5898, loss_bbox: 0.0477, loss_mask: 0.2306, loss: 0.40632021-12-21 22:14:13,427 - mmdet - INFO - Epoch [5][350/930]     lr: 2.000e-02, eta: 0:29:03, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0252, loss_rpn_bbox: 0.0060, loss_cls: 0.0962, acc: 97.8164, loss_bbox: 0.0426, loss_mask: 0.2425, loss: 0.41272021-12-21 22:14:25,975 - mmdet - INFO - Epoch [5][400/930]     lr: 2.000e-02, eta: 0:28:51, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0195, loss_rpn_bbox: 0.0056, loss_cls: 0.0958, acc: 97.7402, loss_bbox: 0.0417, loss_mask: 0.2165, loss: 0.37912021-12-21 22:14:38,588 - mmdet - INFO - Epoch [5][450/930]     lr: 2.000e-02, eta: 0:28:40, time: 0.253, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0205, loss_rpn_bbox: 0.0056, loss_cls: 0.0856, acc: 98.0000, loss_bbox: 0.0375, loss_mask: 0.2246, loss: 0.37382021-12-21 22:14:51,315 - mmdet - INFO - Epoch [5][500/930]     lr: 2.000e-02, eta: 0:28:28, time: 0.254, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0171, loss_rpn_bbox: 0.0055, loss_cls: 0.1020, acc: 97.4434, loss_bbox: 0.0452, loss_mask: 0.2212, loss: 0.39102021-12-21 22:15:04,086 - mmdet - INFO - Epoch [5][550/930]     lr: 2.000e-02, eta: 0:28:16, time: 0.256, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0148, loss_rpn_bbox: 0.0048, loss_cls: 0.0919, acc: 97.7285, loss_bbox: 0.0394, loss_mask: 0.2166, loss: 0.36742021-12-21 22:15:16,677 - mmdet - INFO - Epoch [5][600/930]     lr: 2.000e-02, eta: 0:28:05, time: 0.252, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0147, loss_rpn_bbox: 0.0055, loss_cls: 0.1034, acc: 97.4531, loss_bbox: 0.0476, loss_mask: 0.2292, loss: 0.40042021-12-21 22:15:29,072 - mmdet - INFO - Epoch [5][650/930]     lr: 2.000e-02, eta: 0:27:52, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0323, loss_rpn_bbox: 0.0074, loss_cls: 0.0825, acc: 98.0957, loss_bbox: 0.0370, loss_mask: 0.2301, loss: 0.38932021-12-21 22:15:41,725 - mmdet - INFO - Epoch [5][700/930]     lr: 2.000e-02, eta: 0:27:41, time: 0.253, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0182, loss_rpn_bbox: 0.0059, loss_cls: 0.0942, acc: 97.8145, loss_bbox: 0.0419, loss_mask: 0.2305, loss: 0.39062021-12-21 22:15:54,314 - mmdet - INFO - Epoch [5][750/930]     lr: 2.000e-02, eta: 0:27:29, time: 0.252, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0152, loss_rpn_bbox: 0.0053, loss_cls: 0.1061, acc: 97.5020, loss_bbox: 0.0461, loss_mask: 0.2203, loss: 0.39302021-12-21 22:16:07,084 - mmdet - INFO - Epoch [5][800/930]     lr: 2.000e-02, eta: 0:27:17, time: 0.255, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0148, loss_rpn_bbox: 0.0046, loss_cls: 0.1110, acc: 97.2949, loss_bbox: 0.0472, loss_mask: 0.2044, loss: 0.38202021-12-21 22:16:19,554 - mmdet - INFO - Epoch [5][850/930]     lr: 2.000e-02, eta: 0:27:05, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0184, loss_rpn_bbox: 0.0056, loss_cls: 0.0883, acc: 97.8887, loss_bbox: 0.0375, loss_mask: 0.2192, loss: 0.36902021-12-21 22:16:32,420 - mmdet - INFO - Epoch [5][900/930]     lr: 2.000e-02, eta: 0:26:53, time: 0.257, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0165, loss_rpn_bbox: 0.0050, loss_cls: 0.0910, acc: 97.7402, loss_bbox: 0.0391, loss_mask: 0.2234, loss: 0.37512021-12-21 22:16:40,002 - mmdet - INFO - Saving checkpoint at 5 epochs[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 7.0 task/s, elapsed: 109s, ETA:     0s2021-12-21 22:18:31,847 - mmdet - INFO - Evaluating bbox...Loading and preparing results...DONE (t=0.02s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=1.16s).Accumulating evaluation results...DONE (t=0.54s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.024 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.038 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.030 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.300 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.029 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.021 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.340 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.340 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.340 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.300 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.412 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2482021-12-21 22:18:33,623 - mmdet - INFO - Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.19s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=1.40s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.57s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.025 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.038 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.030 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.150 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.030 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.024 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.344 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.344 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.344 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.300 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.419 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2472021-12-21 22:18:35,971 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:18:35,972 - mmdet - INFO - Epoch(val) [5][764]    bbox_mAP: 0.0240, bbox_mAP_50: 0.0380, bbox_mAP_75: 0.0300, bbox_mAP_s: 0.3000, bbox_mAP_m: 0.0290, bbox_mAP_l: 0.0210, bbox_mAP_copypaste: 0.024 0.038 0.030 0.300 0.029 0.021, segm_mAP: 0.0250, segm_mAP_50: 0.0380, segm_mAP_75: 0.0300, segm_mAP_s: 0.1500, segm_mAP_m: 0.0300, segm_mAP_l: 0.0240, segm_mAP_copypaste: 0.025 0.038 0.030 0.150 0.030 0.024/mnt/data01/home/gyf/projects/mmdetection/mmdet/core/mask/structures.py:1070: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  bitmap_mask = maskUtils.decode(rle).astype(np.bool)/home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/mmcv/runner/hooks/logger/text.py:112: DeprecationWarning: an integer is required (got type float).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.  mem_mb = torch.tensor([mem / (1024 * 1024)],</code></pre><p><strong>Epoch:6</strong></p><pre><code>2021-12-21 22:18:50,938 - mmdet - INFO - Epoch [6][50/930]      lr: 2.000e-02, eta: 0:26:27, time: 0.297, data_time: 0.052, memory: 3050, loss_rpn_cls: 0.0178, loss_rpn_bbox: 0.0054, loss_cls: 0.1046, acc: 97.5000, loss_bbox: 0.0465, loss_mask: 0.2345, loss: 0.40882021-12-21 22:19:03,455 - mmdet - INFO - Epoch [6][100/930]     lr: 2.000e-02, eta: 0:26:15, time: 0.250, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0148, loss_rpn_bbox: 0.0056, loss_cls: 0.1022, acc: 97.3965, loss_bbox: 0.0459, loss_mask: 0.2005, loss: 0.36902021-12-21 22:19:15,698 - mmdet - INFO - Epoch [6][150/930]     lr: 2.000e-02, eta: 0:26:03, time: 0.245, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0158, loss_rpn_bbox: 0.0057, loss_cls: 0.1035, acc: 97.5293, loss_bbox: 0.0461, loss_mask: 0.2172, loss: 0.38832021-12-21 22:19:28,317 - mmdet - INFO - Epoch [6][200/930]     lr: 2.000e-02, eta: 0:25:51, time: 0.252, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0150, loss_rpn_bbox: 0.0048, loss_cls: 0.1070, acc: 97.3379, loss_bbox: 0.0469, loss_mask: 0.2191, loss: 0.39272021-12-21 22:19:40,845 - mmdet - INFO - Epoch [6][250/930]     lr: 2.000e-02, eta: 0:25:39, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0171, loss_rpn_bbox: 0.0060, loss_cls: 0.1022, acc: 97.5742, loss_bbox: 0.0461, loss_mask: 0.2306, loss: 0.40212021-12-21 22:19:53,236 - mmdet - INFO - Epoch [6][300/930]     lr: 2.000e-02, eta: 0:25:27, time: 0.248, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0138, loss_rpn_bbox: 0.0058, loss_cls: 0.1038, acc: 97.3652, loss_bbox: 0.0478, loss_mask: 0.2204, loss: 0.39162021-12-21 22:20:05,691 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:20:05,691 - mmdet - INFO - Epoch [6][350/930]     lr: 2.000e-02, eta: 0:25:14, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0131, loss_rpn_bbox: 0.0051, loss_cls: 0.1020, acc: 97.5039, loss_bbox: 0.0435, loss_mask: 0.2195, loss: 0.38322021-12-21 22:20:18,199 - mmdet - INFO - Epoch [6][400/930]     lr: 2.000e-02, eta: 0:25:02, time: 0.250, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0154, loss_rpn_bbox: 0.0054, loss_cls: 0.1036, acc: 97.5762, loss_bbox: 0.0446, loss_mask: 0.2225, loss: 0.39142021-12-21 22:20:30,960 - mmdet - INFO - Epoch [6][450/930]     lr: 2.000e-02, eta: 0:24:51, time: 0.256, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0144, loss_rpn_bbox: 0.0055, loss_cls: 0.1124, acc: 97.2754, loss_bbox: 0.0479, loss_mask: 0.2055, loss: 0.38572021-12-21 22:20:43,766 - mmdet - INFO - Epoch [6][500/930]     lr: 2.000e-02, eta: 0:24:39, time: 0.256, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0148, loss_rpn_bbox: 0.0054, loss_cls: 0.1029, acc: 97.3730, loss_bbox: 0.0492, loss_mask: 0.2205, loss: 0.39282021-12-21 22:20:56,749 - mmdet - INFO - Epoch [6][550/930]     lr: 2.000e-02, eta: 0:24:27, time: 0.260, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0124, loss_rpn_bbox: 0.0046, loss_cls: 0.0929, acc: 97.6836, loss_bbox: 0.0393, loss_mask: 0.1980, loss: 0.34722021-12-21 22:21:09,394 - mmdet - INFO - Epoch [6][600/930]     lr: 2.000e-02, eta: 0:24:15, time: 0.253, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0213, loss_rpn_bbox: 0.0058, loss_cls: 0.0870, acc: 97.9023, loss_bbox: 0.0394, loss_mask: 0.2481, loss: 0.40162021-12-21 22:21:22,201 - mmdet - INFO - Epoch [6][650/930]     lr: 2.000e-02, eta: 0:24:04, time: 0.255, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0195, loss_rpn_bbox: 0.0059, loss_cls: 0.0910, acc: 97.8125, loss_bbox: 0.0392, loss_mask: 0.2169, loss: 0.37242021-12-21 22:21:35,154 - mmdet - INFO - Epoch [6][700/930]     lr: 2.000e-02, eta: 0:23:52, time: 0.259, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0177, loss_rpn_bbox: 0.0054, loss_cls: 0.0969, acc: 97.6523, loss_bbox: 0.0422, loss_mask: 0.2331, loss: 0.39532021-12-21 22:21:47,639 - mmdet - INFO - Epoch [6][750/930]     lr: 2.000e-02, eta: 0:23:40, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0160, loss_rpn_bbox: 0.0051, loss_cls: 0.0972, acc: 97.6855, loss_bbox: 0.0432, loss_mask: 0.2231, loss: 0.38452021-12-21 22:22:00,345 - mmdet - INFO - Epoch [6][800/930]     lr: 2.000e-02, eta: 0:23:28, time: 0.254, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0175, loss_rpn_bbox: 0.0054, loss_cls: 0.0903, acc: 97.8496, loss_bbox: 0.0404, loss_mask: 0.2247, loss: 0.37842021-12-21 22:22:12,650 - mmdet - INFO - Epoch [6][850/930]     lr: 2.000e-02, eta: 0:23:16, time: 0.246, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0190, loss_rpn_bbox: 0.0052, loss_cls: 0.1004, acc: 97.7363, loss_bbox: 0.0446, loss_mask: 0.2377, loss: 0.40692021-12-21 22:22:25,443 - mmdet - INFO - Epoch [6][900/930]     lr: 2.000e-02, eta: 0:23:04, time: 0.256, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0171, loss_rpn_bbox: 0.0066, loss_cls: 0.1083, acc: 97.2910, loss_bbox: 0.0480, loss_mask: 0.2230, loss: 0.40312021-12-21 22:22:33,073 - mmdet - INFO - Saving checkpoint at 6 epochs[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 6.7 task/s, elapsed: 114s, ETA:     0s2021-12-21 22:24:29,284 - mmdet - INFO - Evaluating bbox...Loading and preparing results...DONE (t=0.02s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=0.92s).Accumulating evaluation results...DONE (t=0.50s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.019 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.029 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.022 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.304 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.024 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.017 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.285 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.285 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.285 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.304 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.335 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2732021-12-21 22:24:30,872 - mmdet - INFO - Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.17s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=1.11s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.52s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.018 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.029 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.021 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.237 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.023 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.026 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.282 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.282 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.282 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.354 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.335 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2682021-12-21 22:24:32,890 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:24:32,890 - mmdet - INFO - Epoch(val) [6][764]    bbox_mAP: 0.0190, bbox_mAP_50: 0.0290, bbox_mAP_75: 0.0220, bbox_mAP_s: 0.3040, bbox_mAP_m: 0.0240, bbox_mAP_l: 0.0170, bbox_mAP_copypaste: 0.019 0.029 0.022 0.304 0.024 0.017, segm_mAP: 0.0180, segm_mAP_50: 0.0290, segm_mAP_75: 0.0210, segm_mAP_s: 0.2370, segm_mAP_m: 0.0230, segm_mAP_l: 0.0260, segm_mAP_copypaste: 0.018 0.029 0.021 0.237 0.023 0.026/mnt/data01/home/gyf/projects/mmdetection/mmdet/core/mask/structures.py:1070: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  bitmap_mask = maskUtils.decode(rle).astype(np.bool)/home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/mmcv/runner/hooks/logger/text.py:112: DeprecationWarning: an integer is required (got type float).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.  mem_mb = torch.tensor([mem / (1024 * 1024)],</code></pre><p><strong>Epoch:7</strong></p><pre><code>2021-12-21 22:24:47,860 - mmdet - INFO - Epoch [7][50/930]      lr: 2.000e-02, eta: 0:22:39, time: 0.298, data_time: 0.052, memory: 3050, loss_rpn_cls: 0.0132, loss_rpn_bbox: 0.0048, loss_cls: 0.0987, acc: 97.4902, loss_bbox: 0.0436, loss_mask: 0.1922, loss: 0.35252021-12-21 22:25:00,237 - mmdet - INFO - Epoch [7][100/930]     lr: 2.000e-02, eta: 0:22:27, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0168, loss_rpn_bbox: 0.0047, loss_cls: 0.1023, acc: 97.5000, loss_bbox: 0.0438, loss_mask: 0.1922, loss: 0.35972021-12-21 22:25:12,577 - mmdet - INFO - Epoch [7][150/930]     lr: 2.000e-02, eta: 0:22:15, time: 0.247, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0161, loss_rpn_bbox: 0.0059, loss_cls: 0.1027, acc: 97.3711, loss_bbox: 0.0461, loss_mask: 0.2093, loss: 0.38022021-12-21 22:25:25,143 - mmdet - INFO - Epoch [7][200/930]     lr: 2.000e-02, eta: 0:22:03, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0154, loss_rpn_bbox: 0.0055, loss_cls: 0.0967, acc: 97.5684, loss_bbox: 0.0439, loss_mask: 0.2139, loss: 0.37552021-12-21 22:25:37,946 - mmdet - INFO - Epoch [7][250/930]     lr: 2.000e-02, eta: 0:21:51, time: 0.256, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0185, loss_rpn_bbox: 0.0056, loss_cls: 0.0965, acc: 97.6582, loss_bbox: 0.0438, loss_mask: 0.2308, loss: 0.39522021-12-21 22:25:50,514 - mmdet - INFO - Epoch [7][300/930]     lr: 2.000e-02, eta: 0:21:39, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0155, loss_rpn_bbox: 0.0049, loss_cls: 0.0956, acc: 97.6973, loss_bbox: 0.0410, loss_mask: 0.2051, loss: 0.36202021-12-21 22:26:02,964 - mmdet - INFO - Epoch [7][350/930]     lr: 2.000e-02, eta: 0:21:27, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0135, loss_rpn_bbox: 0.0045, loss_cls: 0.1103, acc: 97.3008, loss_bbox: 0.0486, loss_mask: 0.2142, loss: 0.39112021-12-21 22:26:15,469 - mmdet - INFO - Epoch [7][400/930]     lr: 2.000e-02, eta: 0:21:14, time: 0.250, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0161, loss_rpn_bbox: 0.0047, loss_cls: 0.0951, acc: 97.5859, loss_bbox: 0.0372, loss_mask: 0.1893, loss: 0.34242021-12-21 22:26:27,994 - mmdet - INFO - Epoch [7][450/930]     lr: 2.000e-02, eta: 0:21:02, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0165, loss_rpn_bbox: 0.0055, loss_cls: 0.0944, acc: 97.6973, loss_bbox: 0.0428, loss_mask: 0.2330, loss: 0.39222021-12-21 22:26:40,694 - mmdet - INFO - Epoch [7][500/930]     lr: 2.000e-02, eta: 0:20:50, time: 0.254, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0161, loss_rpn_bbox: 0.0053, loss_cls: 0.1006, acc: 97.6211, loss_bbox: 0.0455, loss_mask: 0.2200, loss: 0.38742021-12-21 22:26:53,652 - mmdet - INFO - Epoch [7][550/930]     lr: 2.000e-02, eta: 0:20:39, time: 0.259, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0139, loss_rpn_bbox: 0.0049, loss_cls: 0.1103, acc: 97.2812, loss_bbox: 0.0500, loss_mask: 0.2271, loss: 0.40622021-12-21 22:27:06,094 - mmdet - INFO - Epoch [7][600/930]     lr: 2.000e-02, eta: 0:20:26, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0208, loss_rpn_bbox: 0.0063, loss_cls: 0.0957, acc: 97.6699, loss_bbox: 0.0418, loss_mask: 0.2276, loss: 0.39222021-12-21 22:27:18,668 - mmdet - INFO - Epoch [7][650/930]     lr: 2.000e-02, eta: 0:20:14, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0135, loss_rpn_bbox: 0.0044, loss_cls: 0.1073, acc: 97.1836, loss_bbox: 0.0506, loss_mask: 0.2022, loss: 0.37792021-12-21 22:27:31,451 - mmdet - INFO - Epoch [7][700/930]     lr: 2.000e-02, eta: 0:20:02, time: 0.256, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0118, loss_rpn_bbox: 0.0051, loss_cls: 0.1092, acc: 97.3652, loss_bbox: 0.0532, loss_mask: 0.2371, loss: 0.41652021-12-21 22:27:44,188 - mmdet - INFO - Epoch [7][750/930]     lr: 2.000e-02, eta: 0:19:50, time: 0.255, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0148, loss_rpn_bbox: 0.0054, loss_cls: 0.1016, acc: 97.6230, loss_bbox: 0.0465, loss_mask: 0.2316, loss: 0.39982021-12-21 22:27:57,153 - mmdet - INFO - Epoch [7][800/930]     lr: 2.000e-02, eta: 0:19:38, time: 0.259, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0135, loss_rpn_bbox: 0.0053, loss_cls: 0.1181, acc: 97.0820, loss_bbox: 0.0499, loss_mask: 0.2011, loss: 0.38792021-12-21 22:28:09,665 - mmdet - INFO - Epoch [7][850/930]     lr: 2.000e-02, eta: 0:19:26, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0173, loss_rpn_bbox: 0.0054, loss_cls: 0.1087, acc: 97.3691, loss_bbox: 0.0463, loss_mask: 0.2208, loss: 0.39852021-12-21 22:28:22,625 - mmdet - INFO - Epoch [7][900/930]     lr: 2.000e-02, eta: 0:19:14, time: 0.259, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0161, loss_rpn_bbox: 0.0058, loss_cls: 0.0965, acc: 97.6387, loss_bbox: 0.0439, loss_mask: 0.2280, loss: 0.39032021-12-21 22:28:30,260 - mmdet - INFO - Saving checkpoint at 7 epochs[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 8.5 task/s, elapsed: 90s, ETA:     0s2021-12-21 22:30:02,842 - mmdet - INFO - Evaluating bbox...Loading and preparing results...DONE (t=0.01s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=0.89s).Accumulating evaluation results...DONE (t=0.39s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.027 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.039 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.031 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.225 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.032 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.023 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.363 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.363 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.363 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.375 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.435 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2702021-12-21 22:30:04,167 - mmdet - INFO - Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.12s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=0.97s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.40s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.027 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.038 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.030 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.087 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.032 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.023 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.364 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.364 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.364 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.375 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.438 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2692021-12-21 22:30:05,919 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:30:05,919 - mmdet - INFO - Epoch(val) [7][764]    bbox_mAP: 0.0270, bbox_mAP_50: 0.0390, bbox_mAP_75: 0.0310, bbox_mAP_s: 0.2250, bbox_mAP_m: 0.0320, bbox_mAP_l: 0.0230, bbox_mAP_copypaste: 0.027 0.039 0.031 0.225 0.032 0.023, segm_mAP: 0.0270, segm_mAP_50: 0.0380, segm_mAP_75: 0.0300, segm_mAP_s: 0.0870, segm_mAP_m: 0.0320, segm_mAP_l: 0.0230, segm_mAP_copypaste: 0.027 0.038 0.030 0.087 0.032 0.023/mnt/data01/home/gyf/projects/mmdetection/mmdet/core/mask/structures.py:1070: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  bitmap_mask = maskUtils.decode(rle).astype(np.bool)/home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/mmcv/runner/hooks/logger/text.py:112: DeprecationWarning: an integer is required (got type float).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.  mem_mb = torch.tensor([mem / (1024 * 1024)],</code></pre><p><strong>Epoch:8</strong></p><pre><code>2021-12-21 22:30:20,980 - mmdet - INFO - Epoch [8][50/930]      lr: 2.000e-02, eta: 0:18:51, time: 0.299, data_time: 0.053, memory: 3050, loss_rpn_cls: 0.0149, loss_rpn_bbox: 0.0053, loss_cls: 0.1021, acc: 97.3457, loss_bbox: 0.0456, loss_mask: 0.2128, loss: 0.38072021-12-21 22:30:33,420 - mmdet - INFO - Epoch [8][100/930]     lr: 2.000e-02, eta: 0:18:39, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0049, loss_cls: 0.1059, acc: 97.4062, loss_bbox: 0.0445, loss_mask: 0.2078, loss: 0.37712021-12-21 22:30:45,825 - mmdet - INFO - Epoch [8][150/930]     lr: 2.000e-02, eta: 0:18:27, time: 0.248, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0050, loss_cls: 0.1086, acc: 97.1602, loss_bbox: 0.0465, loss_mask: 0.1993, loss: 0.37342021-12-21 22:30:58,505 - mmdet - INFO - Epoch [8][200/930]     lr: 2.000e-02, eta: 0:18:15, time: 0.253, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0141, loss_rpn_bbox: 0.0044, loss_cls: 0.1020, acc: 97.5938, loss_bbox: 0.0430, loss_mask: 0.2114, loss: 0.37502021-12-21 22:31:11,166 - mmdet - INFO - Epoch [8][250/930]     lr: 2.000e-02, eta: 0:18:03, time: 0.254, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0137, loss_rpn_bbox: 0.0051, loss_cls: 0.0938, acc: 97.5723, loss_bbox: 0.0396, loss_mask: 0.2014, loss: 0.35352021-12-21 22:31:23,590 - mmdet - INFO - Epoch [8][300/930]     lr: 2.000e-02, eta: 0:17:50, time: 0.248, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0191, loss_rpn_bbox: 0.0052, loss_cls: 0.0983, acc: 97.6641, loss_bbox: 0.0435, loss_mask: 0.2367, loss: 0.40282021-12-21 22:31:35,945 - mmdet - INFO - Epoch [8][350/930]     lr: 2.000e-02, eta: 0:17:38, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0154, loss_rpn_bbox: 0.0056, loss_cls: 0.0983, acc: 97.5098, loss_bbox: 0.0455, loss_mask: 0.2168, loss: 0.38172021-12-21 22:31:48,742 - mmdet - INFO - Epoch [8][400/930]     lr: 2.000e-02, eta: 0:17:26, time: 0.256, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0136, loss_rpn_bbox: 0.0049, loss_cls: 0.0988, acc: 97.6621, loss_bbox: 0.0427, loss_mask: 0.2272, loss: 0.38722021-12-21 22:32:01,347 - mmdet - INFO - Epoch [8][450/930]     lr: 2.000e-02, eta: 0:17:14, time: 0.252, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0167, loss_rpn_bbox: 0.0052, loss_cls: 0.1032, acc: 97.4922, loss_bbox: 0.0453, loss_mask: 0.2312, loss: 0.40172021-12-21 22:32:14,070 - mmdet - INFO - Epoch [8][500/930]     lr: 2.000e-02, eta: 0:17:02, time: 0.254, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0184, loss_rpn_bbox: 0.0049, loss_cls: 0.1044, acc: 97.5000, loss_bbox: 0.0508, loss_mask: 0.2461, loss: 0.42462021-12-21 22:32:27,022 - mmdet - INFO - Epoch [8][550/930]     lr: 2.000e-02, eta: 0:16:50, time: 0.259, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0159, loss_rpn_bbox: 0.0043, loss_cls: 0.1045, acc: 97.3262, loss_bbox: 0.0462, loss_mask: 0.1941, loss: 0.36502021-12-21 22:32:39,525 - mmdet - INFO - Epoch [8][600/930]     lr: 2.000e-02, eta: 0:16:38, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0160, loss_rpn_bbox: 0.0050, loss_cls: 0.1025, acc: 97.5410, loss_bbox: 0.0443, loss_mask: 0.2055, loss: 0.37322021-12-21 22:32:52,152 - mmdet - INFO - Epoch [8][650/930]     lr: 2.000e-02, eta: 0:16:26, time: 0.252, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0211, loss_rpn_bbox: 0.0059, loss_cls: 0.0970, acc: 97.6543, loss_bbox: 0.0429, loss_mask: 0.2143, loss: 0.38132021-12-21 22:33:05,200 - mmdet - INFO - Epoch [8][700/930]     lr: 2.000e-02, eta: 0:16:14, time: 0.261, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0137, loss_rpn_bbox: 0.0056, loss_cls: 0.0976, acc: 97.5801, loss_bbox: 0.0459, loss_mask: 0.2218, loss: 0.38472021-12-21 22:33:17,732 - mmdet - INFO - Epoch [8][750/930]     lr: 2.000e-02, eta: 0:16:01, time: 0.251, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0142, loss_rpn_bbox: 0.0052, loss_cls: 0.0913, acc: 97.7148, loss_bbox: 0.0369, loss_mask: 0.1966, loss: 0.34422021-12-21 22:33:30,221 - mmdet - INFO - Epoch [8][800/930]     lr: 2.000e-02, eta: 0:15:49, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0129, loss_rpn_bbox: 0.0051, loss_cls: 0.0923, acc: 97.6328, loss_bbox: 0.0396, loss_mask: 0.2022, loss: 0.35212021-12-21 22:33:42,702 - mmdet - INFO - Epoch [8][850/930]     lr: 2.000e-02, eta: 0:15:37, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0190, loss_rpn_bbox: 0.0061, loss_cls: 0.0884, acc: 97.8340, loss_bbox: 0.0392, loss_mask: 0.2294, loss: 0.38212021-12-21 22:33:55,612 - mmdet - INFO - Epoch [8][900/930]     lr: 2.000e-02, eta: 0:15:25, time: 0.258, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0150, loss_rpn_bbox: 0.0057, loss_cls: 0.0916, acc: 97.5996, loss_bbox: 0.0394, loss_mask: 0.2000, loss: 0.35172021-12-21 22:34:03,423 - mmdet - INFO - Saving checkpoint at 8 epochs[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 8.1 task/s, elapsed: 94s, ETA:     0s2021-12-21 22:35:39,499 - mmdet - INFO - Evaluating bbox...Loading and preparing results...DONE (t=0.11s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=0.80s).Accumulating evaluation results...DONE (t=0.42s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.025 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.040 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.030 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.237 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.031 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.017 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.344 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.344 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.344 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.375 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.407 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2682021-12-21 22:35:40,870 - mmdet - INFO - Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.12s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=0.98s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.42s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.028 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.040 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.032 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.237 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.033 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.020 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.366 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.366 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.366 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.375 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.437 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2742021-12-21 22:35:42,635 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:35:42,635 - mmdet - INFO - Epoch(val) [8][764]    bbox_mAP: 0.0250, bbox_mAP_50: 0.0400, bbox_mAP_75: 0.0300, bbox_mAP_s: 0.2370, bbox_mAP_m: 0.0310, bbox_mAP_l: 0.0170, bbox_mAP_copypaste: 0.025 0.040 0.030 0.237 0.031 0.017, segm_mAP: 0.0280, segm_mAP_50: 0.0400, segm_mAP_75: 0.0320, segm_mAP_s: 0.2370, segm_mAP_m: 0.0330, segm_mAP_l: 0.0200, segm_mAP_copypaste: 0.028 0.040 0.032 0.237 0.033 0.020/mnt/data01/home/gyf/projects/mmdetection/mmdet/core/mask/structures.py:1070: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  bitmap_mask = maskUtils.decode(rle).astype(np.bool)/home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/mmcv/runner/hooks/logger/text.py:112: DeprecationWarning: an integer is required (got type float).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.  mem_mb = torch.tensor([mem / (1024 * 1024)],</code></pre><p><strong>Epoch:9</strong></p><pre><code>2021-12-21 22:35:57,522 - mmdet - INFO - Epoch [9][50/930]      lr: 2.000e-03, eta: 0:15:03, time: 0.296, data_time: 0.052, memory: 3050, loss_rpn_cls: 0.0110, loss_rpn_bbox: 0.0041, loss_cls: 0.0940, acc: 97.5781, loss_bbox: 0.0395, loss_mask: 0.2024, loss: 0.35092021-12-21 22:36:10,052 - mmdet - INFO - Epoch [9][100/930]     lr: 2.000e-03, eta: 0:14:51, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0112, loss_rpn_bbox: 0.0045, loss_cls: 0.0944, acc: 97.4043, loss_bbox: 0.0372, loss_mask: 0.1804, loss: 0.32762021-12-21 22:36:22,360 - mmdet - INFO - Epoch [9][150/930]     lr: 2.000e-03, eta: 0:14:38, time: 0.246, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0122, loss_rpn_bbox: 0.0049, loss_cls: 0.1019, acc: 97.2656, loss_bbox: 0.0443, loss_mask: 0.1931, loss: 0.35652021-12-21 22:36:35,031 - mmdet - INFO - Epoch [9][200/930]     lr: 2.000e-03, eta: 0:14:26, time: 0.253, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0036, loss_cls: 0.1023, acc: 97.1973, loss_bbox: 0.0423, loss_mask: 0.1790, loss: 0.33652021-12-21 22:36:47,660 - mmdet - INFO - Epoch [9][250/930]     lr: 2.000e-03, eta: 0:14:14, time: 0.253, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0099, loss_rpn_bbox: 0.0034, loss_cls: 0.1083, acc: 97.0371, loss_bbox: 0.0428, loss_mask: 0.1858, loss: 0.35012021-12-21 22:37:00,234 - mmdet - INFO - Epoch [9][300/930]     lr: 2.000e-03, eta: 0:14:02, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0104, loss_rpn_bbox: 0.0041, loss_cls: 0.1063, acc: 97.1562, loss_bbox: 0.0428, loss_mask: 0.1814, loss: 0.34492021-12-21 22:37:12,716 - mmdet - INFO - Epoch [9][350/930]     lr: 2.000e-03, eta: 0:13:50, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0100, loss_rpn_bbox: 0.0038, loss_cls: 0.1042, acc: 97.1699, loss_bbox: 0.0424, loss_mask: 0.1854, loss: 0.34582021-12-21 22:37:25,292 - mmdet - INFO - Epoch [9][400/930]     lr: 2.000e-03, eta: 0:13:37, time: 0.251, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0124, loss_rpn_bbox: 0.0038, loss_cls: 0.1036, acc: 97.1895, loss_bbox: 0.0423, loss_mask: 0.1971, loss: 0.35922021-12-21 22:37:37,947 - mmdet - INFO - Epoch [9][450/930]     lr: 2.000e-03, eta: 0:13:25, time: 0.254, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0123, loss_rpn_bbox: 0.0039, loss_cls: 0.0996, acc: 97.1641, loss_bbox: 0.0381, loss_mask: 0.1716, loss: 0.32572021-12-21 22:37:50,760 - mmdet - INFO - Epoch [9][500/930]     lr: 2.000e-03, eta: 0:13:13, time: 0.256, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0097, loss_rpn_bbox: 0.0036, loss_cls: 0.1028, acc: 97.1270, loss_bbox: 0.0434, loss_mask: 0.1839, loss: 0.34342021-12-21 22:38:03,627 - mmdet - INFO - Epoch [9][550/930]     lr: 2.000e-03, eta: 0:13:01, time: 0.257, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0114, loss_rpn_bbox: 0.0043, loss_cls: 0.1081, acc: 97.1582, loss_bbox: 0.0454, loss_mask: 0.2013, loss: 0.37042021-12-21 22:38:16,229 - mmdet - INFO - Epoch [9][600/930]     lr: 2.000e-03, eta: 0:12:49, time: 0.252, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0095, loss_rpn_bbox: 0.0042, loss_cls: 0.1063, acc: 97.0156, loss_bbox: 0.0430, loss_mask: 0.1809, loss: 0.34382021-12-21 22:38:29,096 - mmdet - INFO - Epoch [9][650/930]     lr: 2.000e-03, eta: 0:12:37, time: 0.257, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0095, loss_rpn_bbox: 0.0041, loss_cls: 0.1046, acc: 97.1211, loss_bbox: 0.0427, loss_mask: 0.1833, loss: 0.34422021-12-21 22:38:42,033 - mmdet - INFO - Epoch [9][700/930]     lr: 2.000e-03, eta: 0:12:24, time: 0.259, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0108, loss_rpn_bbox: 0.0038, loss_cls: 0.0982, acc: 97.1562, loss_bbox: 0.0386, loss_mask: 0.1743, loss: 0.32572021-12-21 22:38:54,590 - mmdet - INFO - Epoch [9][750/930]     lr: 2.000e-03, eta: 0:12:12, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0109, loss_rpn_bbox: 0.0037, loss_cls: 0.0991, acc: 97.3496, loss_bbox: 0.0420, loss_mask: 0.2050, loss: 0.36072021-12-21 22:39:07,131 - mmdet - INFO - Epoch [9][800/930]     lr: 2.000e-03, eta: 0:12:00, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0106, loss_rpn_bbox: 0.0037, loss_cls: 0.0944, acc: 97.4316, loss_bbox: 0.0374, loss_mask: 0.1850, loss: 0.33112021-12-21 22:39:19,558 - mmdet - INFO - Epoch [9][850/930]     lr: 2.000e-03, eta: 0:11:48, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0103, loss_rpn_bbox: 0.0038, loss_cls: 0.1005, acc: 97.2676, loss_bbox: 0.0445, loss_mask: 0.1911, loss: 0.35012021-12-21 22:39:32,365 - mmdet - INFO - Epoch [9][900/930]     lr: 2.000e-03, eta: 0:11:35, time: 0.256, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0133, loss_rpn_bbox: 0.0044, loss_cls: 0.0947, acc: 97.3730, loss_bbox: 0.0408, loss_mask: 0.2005, loss: 0.35362021-12-21 22:39:39,984 - mmdet - INFO - Saving checkpoint at 9 epochs[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 8.6 task/s, elapsed: 89s, ETA:     0s2021-12-21 22:41:10,973 - mmdet - INFO - Evaluating bbox...Loading and preparing results...DONE (t=0.13s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=0.81s).Accumulating evaluation results...DONE (t=0.41s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.027 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.040 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.031 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.240 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.032 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.022 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.375 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.375 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.375 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.451 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2912021-12-21 22:41:12,357 - mmdet - INFO - Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.11s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=0.92s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.44s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.027 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.039 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.032 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.030 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.031 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.022 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.377 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.377 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.377 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.454 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2872021-12-21 22:41:14,077 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:41:14,077 - mmdet - INFO - Epoch(val) [9][764]    bbox_mAP: 0.0270, bbox_mAP_50: 0.0400, bbox_mAP_75: 0.0310, bbox_mAP_s: 0.2400, bbox_mAP_m: 0.0320, bbox_mAP_l: 0.0220, bbox_mAP_copypaste: 0.027 0.040 0.031 0.240 0.032 0.022, segm_mAP: 0.0270, segm_mAP_50: 0.0390, segm_mAP_75: 0.0320, segm_mAP_s: 0.0300, segm_mAP_m: 0.0310, segm_mAP_l: 0.0220, segm_mAP_copypaste: 0.027 0.039 0.032 0.030 0.031 0.022/mnt/data01/home/gyf/projects/mmdetection/mmdet/core/mask/structures.py:1070: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  bitmap_mask = maskUtils.decode(rle).astype(np.bool)/home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/mmcv/runner/hooks/logger/text.py:112: DeprecationWarning: an integer is required (got type float).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.  mem_mb = torch.tensor([mem / (1024 * 1024)],</code></pre><p><strong>Epoch:10</strong></p><pre><code>2021-12-21 22:41:29,152 - mmdet - INFO - Epoch [10][50/930]     lr: 2.000e-03, eta: 0:11:14, time: 0.300, data_time: 0.053, memory: 3050, loss_rpn_cls: 0.0075, loss_rpn_bbox: 0.0030, loss_cls: 0.0960, acc: 97.2598, loss_bbox: 0.0366, loss_mask: 0.1699, loss: 0.31302021-12-21 22:41:41,578 - mmdet - INFO - Epoch [10][100/930]    lr: 2.000e-03, eta: 0:11:02, time: 0.248, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0105, loss_rpn_bbox: 0.0038, loss_cls: 0.1017, acc: 97.1523, loss_bbox: 0.0430, loss_mask: 0.1848, loss: 0.34382021-12-21 22:41:54,089 - mmdet - INFO - Epoch [10][150/930]    lr: 2.000e-03, eta: 0:10:50, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0078, loss_rpn_bbox: 0.0036, loss_cls: 0.1023, acc: 97.1797, loss_bbox: 0.0415, loss_mask: 0.1804, loss: 0.33562021-12-21 22:42:06,712 - mmdet - INFO - Epoch [10][200/930]    lr: 2.000e-03, eta: 0:10:37, time: 0.252, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0098, loss_rpn_bbox: 0.0033, loss_cls: 0.1024, acc: 97.0781, loss_bbox: 0.0405, loss_mask: 0.1844, loss: 0.34042021-12-21 22:42:19,179 - mmdet - INFO - Epoch [10][250/930]    lr: 2.000e-03, eta: 0:10:25, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0086, loss_rpn_bbox: 0.0037, loss_cls: 0.0980, acc: 97.2031, loss_bbox: 0.0381, loss_mask: 0.1739, loss: 0.32232021-12-21 22:42:31,738 - mmdet - INFO - Epoch [10][300/930]    lr: 2.000e-03, eta: 0:10:13, time: 0.251, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0092, loss_rpn_bbox: 0.0031, loss_cls: 0.0971, acc: 97.3457, loss_bbox: 0.0364, loss_mask: 0.1638, loss: 0.30962021-12-21 22:42:44,209 - mmdet - INFO - Epoch [10][350/930]    lr: 2.000e-03, eta: 0:10:01, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0029, loss_cls: 0.0985, acc: 97.1777, loss_bbox: 0.0406, loss_mask: 0.1747, loss: 0.32492021-12-21 22:42:56,786 - mmdet - INFO - Epoch [10][400/930]    lr: 2.000e-03, eta: 0:09:48, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0098, loss_rpn_bbox: 0.0035, loss_cls: 0.0984, acc: 97.2188, loss_bbox: 0.0427, loss_mask: 0.1837, loss: 0.33812021-12-21 22:43:09,539 - mmdet - INFO - Epoch [10][450/930]    lr: 2.000e-03, eta: 0:09:36, time: 0.255, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0080, loss_rpn_bbox: 0.0028, loss_cls: 0.1045, acc: 97.0723, loss_bbox: 0.0432, loss_mask: 0.1843, loss: 0.34282021-12-21 22:43:22,275 - mmdet - INFO - Epoch [10][500/930]    lr: 2.000e-03, eta: 0:09:24, time: 0.255, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0089, loss_rpn_bbox: 0.0035, loss_cls: 0.1032, acc: 97.1406, loss_bbox: 0.0420, loss_mask: 0.1768, loss: 0.33442021-12-21 22:43:35,294 - mmdet - INFO - Epoch [10][550/930]    lr: 2.000e-03, eta: 0:09:12, time: 0.261, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0099, loss_rpn_bbox: 0.0033, loss_cls: 0.0964, acc: 97.3281, loss_bbox: 0.0342, loss_mask: 0.1658, loss: 0.30962021-12-21 22:43:47,783 - mmdet - INFO - Epoch [10][600/930]    lr: 2.000e-03, eta: 0:09:00, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0104, loss_rpn_bbox: 0.0031, loss_cls: 0.0975, acc: 97.2461, loss_bbox: 0.0424, loss_mask: 0.1929, loss: 0.34632021-12-21 22:44:00,380 - mmdet - INFO - Epoch [10][650/930]    lr: 2.000e-03, eta: 0:08:47, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0079, loss_rpn_bbox: 0.0038, loss_cls: 0.0927, acc: 97.3418, loss_bbox: 0.0327, loss_mask: 0.1578, loss: 0.29492021-12-21 22:44:13,144 - mmdet - INFO - Epoch [10][700/930]    lr: 2.000e-03, eta: 0:08:35, time: 0.255, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0116, loss_rpn_bbox: 0.0036, loss_cls: 0.0974, acc: 97.3184, loss_bbox: 0.0369, loss_mask: 0.1717, loss: 0.32122021-12-21 22:44:25,743 - mmdet - INFO - Epoch [10][750/930]    lr: 2.000e-03, eta: 0:08:23, time: 0.252, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0117, loss_rpn_bbox: 0.0037, loss_cls: 0.0926, acc: 97.3027, loss_bbox: 0.0367, loss_mask: 0.1694, loss: 0.31422021-12-21 22:44:38,273 - mmdet - INFO - Epoch [10][800/930]    lr: 2.000e-03, eta: 0:08:10, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0098, loss_rpn_bbox: 0.0037, loss_cls: 0.1000, acc: 97.1914, loss_bbox: 0.0355, loss_mask: 0.1715, loss: 0.32052021-12-21 22:44:50,699 - mmdet - INFO - Epoch [10][850/930]    lr: 2.000e-03, eta: 0:07:58, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0122, loss_rpn_bbox: 0.0038, loss_cls: 0.0987, acc: 97.2422, loss_bbox: 0.0386, loss_mask: 0.1738, loss: 0.32712021-12-21 22:45:03,582 - mmdet - INFO - Epoch [10][900/930]    lr: 2.000e-03, eta: 0:07:46, time: 0.258, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0108, loss_rpn_bbox: 0.0039, loss_cls: 0.0902, acc: 97.4922, loss_bbox: 0.0346, loss_mask: 0.1881, loss: 0.32772021-12-21 22:45:11,144 - mmdet - INFO - Saving checkpoint at 10 epochs[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 8.7 task/s, elapsed: 88s, ETA:     0s2021-12-21 22:46:41,036 - mmdet - INFO - Evaluating bbox...Loading and preparing results...DONE (t=0.01s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=1.03s).Accumulating evaluation results...DONE (t=0.41s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.028 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.040 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.032 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.375 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.026 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.388 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.388 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.388 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.375 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.467 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2922021-12-21 22:46:42,629 - mmdet - INFO - Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.12s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=1.16s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.41s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.029 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.040 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.032 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.215 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.029 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.396 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.396 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.396 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.375 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.479 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2902021-12-21 22:46:44,436 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:46:44,437 - mmdet - INFO - Epoch(val) [10][764]   bbox_mAP: 0.0280, bbox_mAP_50: 0.0400, bbox_mAP_75: 0.0320, bbox_mAP_s: 0.3750, bbox_mAP_m: 0.0340, bbox_mAP_l: 0.0260, bbox_mAP_copypaste: 0.028 0.040 0.032 0.375 0.034 0.026, segm_mAP: 0.0290, segm_mAP_50: 0.0400, segm_mAP_75: 0.0320, segm_mAP_s: 0.2150, segm_mAP_m: 0.0340, segm_mAP_l: 0.0290, segm_mAP_copypaste: 0.029 0.040 0.032 0.215 0.034 0.029/mnt/data01/home/gyf/projects/mmdetection/mmdet/core/mask/structures.py:1070: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  bitmap_mask = maskUtils.decode(rle).astype(np.bool)/home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/mmcv/runner/hooks/logger/text.py:112: DeprecationWarning: an integer is required (got type float).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.  mem_mb = torch.tensor([mem / (1024 * 1024)],</code></pre><p><strong>Epoch:11</strong></p><pre><code>2021-12-21 22:46:59,408 - mmdet - INFO - Epoch [11][50/930]     lr: 2.000e-03, eta: 0:07:25, time: 0.298, data_time: 0.052, memory: 3050, loss_rpn_cls: 0.0089, loss_rpn_bbox: 0.0034, loss_cls: 0.0933, acc: 97.3789, loss_bbox: 0.0343, loss_mask: 0.1670, loss: 0.30692021-12-21 22:47:11,794 - mmdet - INFO - Epoch [11][100/930]    lr: 2.000e-03, eta: 0:07:13, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0111, loss_rpn_bbox: 0.0031, loss_cls: 0.0959, acc: 97.3809, loss_bbox: 0.0396, loss_mask: 0.1914, loss: 0.34102021-12-21 22:47:24,298 - mmdet - INFO - Epoch [11][150/930]    lr: 2.000e-03, eta: 0:07:01, time: 0.250, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0093, loss_rpn_bbox: 0.0035, loss_cls: 0.0974, acc: 97.1621, loss_bbox: 0.0396, loss_mask: 0.1836, loss: 0.33352021-12-21 22:47:37,263 - mmdet - INFO - Epoch [11][200/930]    lr: 2.000e-03, eta: 0:06:48, time: 0.259, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0078, loss_rpn_bbox: 0.0036, loss_cls: 0.0989, acc: 97.1270, loss_bbox: 0.0365, loss_mask: 0.1588, loss: 0.30562021-12-21 22:47:49,826 - mmdet - INFO - Epoch [11][250/930]    lr: 2.000e-03, eta: 0:06:36, time: 0.251, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0082, loss_rpn_bbox: 0.0032, loss_cls: 0.0950, acc: 97.2344, loss_bbox: 0.0390, loss_mask: 0.1812, loss: 0.32662021-12-21 22:48:02,369 - mmdet - INFO - Epoch [11][300/930]    lr: 2.000e-03, eta: 0:06:24, time: 0.251, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0088, loss_rpn_bbox: 0.0035, loss_cls: 0.0988, acc: 97.1758, loss_bbox: 0.0386, loss_mask: 0.1627, loss: 0.31242021-12-21 22:48:14,901 - mmdet - INFO - Epoch [11][350/930]    lr: 2.000e-03, eta: 0:06:12, time: 0.251, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0089, loss_rpn_bbox: 0.0034, loss_cls: 0.1009, acc: 97.1836, loss_bbox: 0.0401, loss_mask: 0.1852, loss: 0.33862021-12-21 22:48:27,535 - mmdet - INFO - Epoch [11][400/930]    lr: 2.000e-03, eta: 0:05:59, time: 0.253, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0038, loss_cls: 0.0946, acc: 97.3086, loss_bbox: 0.0403, loss_mask: 0.1866, loss: 0.33592021-12-21 22:48:40,439 - mmdet - INFO - Epoch [11][450/930]    lr: 2.000e-03, eta: 0:05:47, time: 0.258, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0113, loss_rpn_bbox: 0.0035, loss_cls: 0.0928, acc: 97.2500, loss_bbox: 0.0379, loss_mask: 0.1665, loss: 0.31212021-12-21 22:48:53,302 - mmdet - INFO - Epoch [11][500/930]    lr: 2.000e-03, eta: 0:05:35, time: 0.257, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0081, loss_rpn_bbox: 0.0029, loss_cls: 0.0917, acc: 97.2832, loss_bbox: 0.0348, loss_mask: 0.1564, loss: 0.29392021-12-21 22:49:06,198 - mmdet - INFO - Epoch [11][550/930]    lr: 2.000e-03, eta: 0:05:23, time: 0.258, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0108, loss_rpn_bbox: 0.0032, loss_cls: 0.0909, acc: 97.4531, loss_bbox: 0.0354, loss_mask: 0.1742, loss: 0.31452021-12-21 22:49:18,938 - mmdet - INFO - Epoch [11][600/930]    lr: 2.000e-03, eta: 0:05:10, time: 0.255, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0103, loss_rpn_bbox: 0.0033, loss_cls: 0.0920, acc: 97.3613, loss_bbox: 0.0343, loss_mask: 0.1648, loss: 0.30472021-12-21 22:49:31,515 - mmdet - INFO - Epoch [11][650/930]    lr: 2.000e-03, eta: 0:04:58, time: 0.251, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0099, loss_rpn_bbox: 0.0034, loss_cls: 0.0949, acc: 97.3184, loss_bbox: 0.0361, loss_mask: 0.1822, loss: 0.32642021-12-21 22:49:44,211 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:49:44,211 - mmdet - INFO - Epoch [11][700/930]    lr: 2.000e-03, eta: 0:04:46, time: 0.254, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0080, loss_rpn_bbox: 0.0032, loss_cls: 0.0963, acc: 97.1973, loss_bbox: 0.0364, loss_mask: 0.1638, loss: 0.30772021-12-21 22:49:56,887 - mmdet - INFO - Epoch [11][750/930]    lr: 2.000e-03, eta: 0:04:33, time: 0.254, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0094, loss_rpn_bbox: 0.0036, loss_cls: 0.0973, acc: 97.2891, loss_bbox: 0.0380, loss_mask: 0.1839, loss: 0.33222021-12-21 22:50:09,618 - mmdet - INFO - Epoch [11][800/930]    lr: 2.000e-03, eta: 0:04:21, time: 0.255, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0095, loss_rpn_bbox: 0.0027, loss_cls: 0.0944, acc: 97.2871, loss_bbox: 0.0328, loss_mask: 0.1534, loss: 0.29292021-12-21 22:50:22,074 - mmdet - INFO - Epoch [11][850/930]    lr: 2.000e-03, eta: 0:04:09, time: 0.249, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0081, loss_rpn_bbox: 0.0032, loss_cls: 0.0865, acc: 97.5176, loss_bbox: 0.0299, loss_mask: 0.1504, loss: 0.27812021-12-21 22:50:35,180 - mmdet - INFO - Epoch [11][900/930]    lr: 2.000e-03, eta: 0:03:57, time: 0.262, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0074, loss_rpn_bbox: 0.0034, loss_cls: 0.0934, acc: 97.2832, loss_bbox: 0.0353, loss_mask: 0.1628, loss: 0.30222021-12-21 22:50:42,718 - mmdet - INFO - Saving checkpoint at 11 epochs[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 8.9 task/s, elapsed: 86s, ETA:     0s2021-12-21 22:52:10,927 - mmdet - INFO - Evaluating bbox...Loading and preparing results...DONE (t=0.12s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=0.79s).Accumulating evaluation results...DONE (t=0.39s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.028 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.040 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.032 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.375 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.033 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.027 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.392 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.392 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.392 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.375 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.466 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.3062021-12-21 22:52:12,261 - mmdet - INFO - Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.15s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=0.93s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.40s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.028 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.040 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.096 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.032 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.026 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.386 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.386 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.386 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.461 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.2992021-12-21 22:52:13,960 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:52:13,960 - mmdet - INFO - Epoch(val) [11][764]   bbox_mAP: 0.0280, bbox_mAP_50: 0.0400, bbox_mAP_75: 0.0320, bbox_mAP_s: 0.3750, bbox_mAP_m: 0.0330, bbox_mAP_l: 0.0270, bbox_mAP_copypaste: 0.028 0.040 0.032 0.375 0.033 0.027, segm_mAP: 0.0280, segm_mAP_50: 0.0400, segm_mAP_75: 0.0340, segm_mAP_s: 0.0960, segm_mAP_m: 0.0320, segm_mAP_l: 0.0260, segm_mAP_copypaste: 0.028 0.040 0.034 0.096 0.032 0.026/mnt/data01/home/gyf/projects/mmdetection/mmdet/core/mask/structures.py:1070: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  bitmap_mask = maskUtils.decode(rle).astype(np.bool)/home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/mmcv/runner/hooks/logger/text.py:112: DeprecationWarning: an integer is required (got type float).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.  mem_mb = torch.tensor([mem / (1024 * 1024)],</code></pre><p><strong>Epoch 12:</strong></p><pre><code>2021-12-21 22:52:29,174 - mmdet - INFO - Epoch [12][50/930]     lr: 2.000e-04, eta: 0:03:36, time: 0.302, data_time: 0.053, memory: 3050, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0029, loss_cls: 0.0989, acc: 97.1406, loss_bbox: 0.0379, loss_mask: 0.1692, loss: 0.31662021-12-21 22:52:41,662 - mmdet - INFO - Epoch [12][100/930]    lr: 2.000e-04, eta: 0:03:24, time: 0.250, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0107, loss_rpn_bbox: 0.0033, loss_cls: 0.0990, acc: 97.1719, loss_bbox: 0.0346, loss_mask: 0.1512, loss: 0.29882021-12-21 22:52:53,884 - mmdet - INFO - Epoch [12][150/930]    lr: 2.000e-04, eta: 0:03:12, time: 0.245, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0110, loss_rpn_bbox: 0.0032, loss_cls: 0.0933, acc: 97.4023, loss_bbox: 0.0318, loss_mask: 0.1617, loss: 0.30102021-12-21 22:53:06,489 - mmdet - INFO - Epoch [12][200/930]    lr: 2.000e-04, eta: 0:02:59, time: 0.252, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0078, loss_rpn_bbox: 0.0031, loss_cls: 0.0940, acc: 97.2930, loss_bbox: 0.0370, loss_mask: 0.1674, loss: 0.30942021-12-21 22:53:19,043 - mmdet - INFO - Epoch [12][250/930]    lr: 2.000e-04, eta: 0:02:47, time: 0.251, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0087, loss_rpn_bbox: 0.0031, loss_cls: 0.0910, acc: 97.3789, loss_bbox: 0.0323, loss_mask: 0.1516, loss: 0.28662021-12-21 22:53:31,721 - mmdet - INFO - Epoch [12][300/930]    lr: 2.000e-04, eta: 0:02:35, time: 0.254, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0063, loss_rpn_bbox: 0.0025, loss_cls: 0.0947, acc: 97.1328, loss_bbox: 0.0337, loss_mask: 0.1471, loss: 0.28422021-12-21 22:53:44,582 - mmdet - INFO - Epoch [12][350/930]    lr: 2.000e-04, eta: 0:02:23, time: 0.257, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0076, loss_rpn_bbox: 0.0030, loss_cls: 0.0960, acc: 97.2754, loss_bbox: 0.0382, loss_mask: 0.1741, loss: 0.31892021-12-21 22:53:57,471 - mmdet - INFO - Epoch [12][400/930]    lr: 2.000e-04, eta: 0:02:10, time: 0.258, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0073, loss_rpn_bbox: 0.0026, loss_cls: 0.0936, acc: 97.2344, loss_bbox: 0.0371, loss_mask: 0.1654, loss: 0.30612021-12-21 22:54:10,132 - mmdet - INFO - Epoch [12][450/930]    lr: 2.000e-04, eta: 0:01:58, time: 0.253, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0068, loss_rpn_bbox: 0.0029, loss_cls: 0.0916, acc: 97.3145, loss_bbox: 0.0337, loss_mask: 0.1552, loss: 0.29012021-12-21 22:54:22,944 - mmdet - INFO - Epoch [12][500/930]    lr: 2.000e-04, eta: 0:01:46, time: 0.256, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0082, loss_rpn_bbox: 0.0030, loss_cls: 0.0963, acc: 97.2285, loss_bbox: 0.0353, loss_mask: 0.1573, loss: 0.30032021-12-21 22:54:36,039 - mmdet - INFO - Epoch [12][550/930]    lr: 2.000e-04, eta: 0:01:33, time: 0.262, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0033, loss_cls: 0.0970, acc: 97.1484, loss_bbox: 0.0365, loss_mask: 0.1605, loss: 0.30572021-12-21 22:54:48,906 - mmdet - INFO - Epoch [12][600/930]    lr: 2.000e-04, eta: 0:01:21, time: 0.258, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0089, loss_rpn_bbox: 0.0029, loss_cls: 0.0917, acc: 97.2832, loss_bbox: 0.0325, loss_mask: 0.1583, loss: 0.29432021-12-21 22:55:01,618 - mmdet - INFO - Epoch [12][650/930]    lr: 2.000e-04, eta: 0:01:09, time: 0.254, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0088, loss_rpn_bbox: 0.0028, loss_cls: 0.0936, acc: 97.2559, loss_bbox: 0.0377, loss_mask: 0.1702, loss: 0.31322021-12-21 22:55:14,380 - mmdet - INFO - Epoch [12][700/930]    lr: 2.000e-04, eta: 0:00:56, time: 0.255, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0078, loss_rpn_bbox: 0.0029, loss_cls: 0.0920, acc: 97.3027, loss_bbox: 0.0343, loss_mask: 0.1618, loss: 0.29892021-12-21 22:55:26,737 - mmdet - INFO - Epoch [12][750/930]    lr: 2.000e-04, eta: 0:00:44, time: 0.247, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0101, loss_rpn_bbox: 0.0035, loss_cls: 0.0991, acc: 97.2461, loss_bbox: 0.0384, loss_mask: 0.1784, loss: 0.32952021-12-21 22:55:39,582 - mmdet - INFO - Epoch [12][800/930]    lr: 2.000e-04, eta: 0:00:32, time: 0.257, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0098, loss_rpn_bbox: 0.0029, loss_cls: 0.0934, acc: 97.3809, loss_bbox: 0.0344, loss_mask: 0.1634, loss: 0.30402021-12-21 22:55:51,856 - mmdet - INFO - Epoch [12][850/930]    lr: 2.000e-04, eta: 0:00:19, time: 0.246, data_time: 0.009, memory: 3050, loss_rpn_cls: 0.0090, loss_rpn_bbox: 0.0030, loss_cls: 0.0897, acc: 97.3887, loss_bbox: 0.0317, loss_mask: 0.1532, loss: 0.28652021-12-21 22:56:04,717 - mmdet - INFO - Epoch [12][900/930]    lr: 2.000e-04, eta: 0:00:07, time: 0.257, data_time: 0.008, memory: 3050, loss_rpn_cls: 0.0092, loss_rpn_bbox: 0.0027, loss_cls: 0.0912, acc: 97.3066, loss_bbox: 0.0355, loss_mask: 0.1518, loss: 0.29042021-12-21 22:56:12,185 - mmdet - INFO - Saving checkpoint at 12 epochs[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 8.9 task/s, elapsed: 86s, ETA:     0s2021-12-21 22:57:40,254 - mmdet - INFO - Evaluating bbox...Loading and preparing results...DONE (t=0.13s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=0.92s).Accumulating evaluation results...DONE (t=0.40s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.029 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.041 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.028 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.471 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.3042021-12-21 22:57:41,738 - mmdet - INFO - Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.17s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=1.08s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.42s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.029 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.040 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.237 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.028 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.375 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.471 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.3022021-12-21 22:57:43,654 - mmdet - INFO - Exp name: mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py2021-12-21 22:57:43,654 - mmdet - INFO - Epoch(val) [12][764]   bbox_mAP: 0.0290, bbox_mAP_50: 0.0410, bbox_mAP_75: 0.0340, bbox_mAP_s: 0.4000, bbox_mAP_m: 0.0340, bbox_mAP_l: 0.0280, bbox_mAP_copypaste: 0.029 0.041 0.034 0.400 0.034 0.028, segm_mAP: 0.0290, segm_mAP_50: 0.0400, segm_mAP_75: 0.0340, segm_mAP_s: 0.2370, segm_mAP_m: 0.0340, segm_mAP_l: 0.0280, segm_mAP_copypaste: 0.029 0.040 0.034 0.237 0.034 0.028</code></pre><h4 id="sockets-bbox-测试"><a href="#sockets-bbox-测试" class="headerlink" title="sockets bbox 测试"></a>sockets bbox 测试</h4><blockquote><p>2021.12.21晚 706</p></blockquote><p><strong>gyf@ubuntu ~/projects/mmdetection</strong></p><p><code>% python tools/test.py configs/fenghuo/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py          work_dirs/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets/latest.pth --eval bbox</code></p><pre><code>loading annotations into memory...Done (t=0.01s)creating index...index created!load checkpoint from local path: work_dirs/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets/latest.pth[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 8.9 task/s, elapsed: 86s, ETA:     0sEvaluating bbox...Loading and preparing results...DONE (t=0.01s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=0.84s).Accumulating evaluation results...DONE (t=0.38s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.029 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.041 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.028 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.471 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.304OrderedDict([('bbox_mAP', 0.029), ('bbox_mAP_50', 0.041), ('bbox_mAP_75', 0.034), ('bbox_mAP_s', 0.4), ('bbox_mAP_m', 0.034), ('bbox_mAP_l', 0.028), ('bbox_mAP_copypaste', '0.029 0.041 0.034 0.400 0.034 0.028')])</code></pre><h4 id="sockets-bbox-segm-test"><a href="#sockets-bbox-segm-test" class="headerlink" title="sockets bbox segm test"></a>sockets bbox segm test</h4><p><strong>gyf@ubuntu ~/projects/mmdetection</strong><br><code> % python tools/test.py configs/fenghuo/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets.py work_dirs/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets/latest.pth --eval bbox segm</code> </p><p>(在上述路径下执行命令)</p><pre><code>loading annotations into memory...Done (t=0.01s)creating index...index created!load checkpoint from local path: work_dirs/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_sockets/latest.pth[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 764/764, 8.9 task/s, elapsed: 86s, ETA:     0sEvaluating bbox...Loading and preparing results...DONE (t=0.01s)creating index...index created!Running per image evaluation...Evaluate annotation type *bbox*DONE (t=0.87s).Accumulating evaluation results...DONE (t=0.39s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.029 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.041 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.028 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.400 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.471 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.304Evaluating segm.../mnt/data01/home/gyf/projects/mmdetection/mmdet/datasets/coco.py:450: UserWarning: The key "bbox" is deleted for more accurate mask AP of small/medium/large instances since v2.12.0. This does not change the overall mAP calculation.  warnings.warn(Loading and preparing results...DONE (t=0.10s)creating index...index created!Running per image evaluation...Evaluate annotation type *segm*DONE (t=0.95s).Accumulating evaluation results.../home/gyf/envs/miniconda3/envs/mmlab/lib/python3.9/site-packages/pycocotools/cocoeval.py:378: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations  tp_sum = np.cumsum(tps, axis=1).astype(dtype=np.float)DONE (t=0.42s). Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.029 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.040 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.237 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.034 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.028 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.394 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.375 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.471 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.302OrderedDict([('bbox_mAP', 0.029), ('bbox_mAP_50', 0.041), ('bbox_mAP_75', 0.034), ('bbox_mAP_s', 0.4), ('bbox_mAP_m', 0.034), ('bbox_mAP_l', 0.028), ('bbox_mAP_copypaste', '0.029 0.041 0.034 0.400 0.034 0.028'), ('segm_mAP', 0.029), ('segm_mAP_50', 0.04), ('segm_mAP_75', 0.034), ('segm_mAP_s', 0.237), ('segm_mAP_m', 0.034), ('segm_mAP_l', 0.028), ('segm_mAP_copypaste', '0.029 0.040 0.034 0.237 0.034 0.028')])</code></pre>]]></content>
      
      
      <categories>
          
          <category> projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mmdetection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SA Study</title>
      <link href="/year/12/16/SA-Study/"/>
      <url>/year/12/16/SA-Study/</url>
      
        <content type="html"><![CDATA[<h4 id="Perface"><a href="#Perface" class="headerlink" title="Perface"></a>Perface</h4><p>Sentiment Analysis是nlp领域一个高阶的task之一，这个任务目标是让计算机理解人类的情感世界，而在机器学习的认知智能阶段(三个阶段：计算智能，感知智能，认知智能)。</p><p>​    而情感分析任务也算是个分类任务，给模型输入一句话，让它判断这句话的情感是积极的还是消极的还是中性的，当然这只是SA任务其中比较简单的处理目标，而更加高阶的任务是<strong>细粒度的情感分析</strong>：希望模型不仅能识别出情感的好坏，而且还希望模型能识别出是由于什么原因导致这种情感发生。举个例子,”这家餐厅的地理位置不错，可惜菜不怎么好吃”，我们就需要识别出，在地理位置这个aspect上情感是积极的，而在菜的味道这个aspect上情感是消极的。</p><p>​    涉及到分类的任务的算法，会有LVM，Logistic，D-Tree等经典模型，而对于文本分类来说最重要的是讲一句话映射到向量空间同时不失去语义特征。文本的向量化涉及到<strong>Word Embedding</strong>技术和DL技术。<strong>Word Embedding</strong>指的是把文本转换成计算机能处理的向量，而其中难点的是：将文本向量化时如何保持句子原有的语义。早期word embedding使用的是Bag of Words，TF-IDF等，这些算法有个共同的特点：就是没有考虑语序以及上下文关系。而后来出现了更为先进<strong>Word2Vector ，Glove</strong>等考虑上下文关系的，19年NLP领域大放异彩的<strong>BERT</strong>就是在文本向量化上做出了很大的突破。<strong>深度学习</strong>模型可以将特征工程自动化，模型自动寻找特征，毕竟人工特征是个费脑费时的过程。在NLP当中的运用也司空见惯了,<strong>RNN</strong>(LSTM,GRU)，<strong>CNN</strong>，<strong>Transformer</strong>等各路神仙也在各显神通。深度学习模型凭借其强大的表示能力，在很多任务中都吊打人工特征。</p><p>下面利用transformer对下游nlp任务进行<strong>fine tune</strong>。Per-training模型的范式就是在大数据集上让模型学习到通用的语言知识，在此基础上对目标任务进行小规模的微调达到知识迁移，算力共享和专项高精等多赢的目标，<strong>Huggingface Transformers</strong>整合了类Bert模型的接口提供Pre-training库，所以我们进行微调来达到自己的目标。</p>]]></content>
      
      
      <categories>
          
          <category> nlp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sentiment Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>notes of huggingface transformer</title>
      <link href="/year/11/25/notes-of-huggingface-transformer/"/>
      <url>/year/11/25/notes-of-huggingface-transformer/</url>
      
        <content type="html"><![CDATA[<h4 id="Perface"><a href="#Perface" class="headerlink" title="Perface"></a>Perface</h4><p>HuggingFace-Transformers手册是开源公司HuggingFace开发的涵盖很多模型的框架。</p><p>Transformers(前身是称为pytorch Transformers和pytorch pretrained bert)为自然语言理解(NLU)和自然语言生成(NLG)提供了最先进的通用架构(bert,GPT-2,RoBERTTa,XLM,DistileBert,XLNet,CTRL…..),其中超过32个100多种语言的预训练模型并同时支持Tensorflow 2.0和Pytorch两大深度学习框架.</p><p>The library was designed with two strong goals in mind:</p><ul><li><p>Be as easy and fast to use as possible:</p><blockquote><ul><li>We strongly limited the number of user-facing abstractions to learn, in fact, there are almost no abstractions, just three standard classes required to use each model: <a href="https://huggingface.co/transformers/main_classes/configuration.html">configuration</a>, <a href="https://huggingface.co/transformers/main_classes/model.html">models</a> and <a href="https://huggingface.co/transformers/main_classes/tokenizer.html">tokenizer</a>.</li><li>All of these classes can be initialized in a simple and unified way from pretrained instances by using a common <code>from_pretrained()</code> instantiation method which will take care of downloading (if needed), caching and loading the related class instance and associated data (configurations’ hyper-parameters, tokenizers’ vocabulary, and models’ weights) from a pretrained checkpoint provided on <a href="https://huggingface.co/models">Hugging Face Hub</a> or your own saved checkpoint.</li><li>On top of those three base classes, the library provides two APIs: <a href="https://huggingface.co/transformers/main_classes/pipelines.html#transformers.pipeline"><code>pipeline()</code></a> for quickly using a model (plus its associated tokenizer and configuration) on a given task and <a href="https://huggingface.co/transformers/main_classes/trainer.html#transformers.Trainer"><code>Trainer()</code></a>/<a href="https://huggingface.co/transformers/main_classes/trainer.html#transformers.TFTrainer"><code>TFTrainer()</code></a> to quickly train or fine-tune a given model.</li><li>As a consequence, this library is NOT a modular toolbox of building blocks for neural nets. If you want to extend/build-upon the library, just use regular Python/PyTorch/TensorFlow/Keras modules and inherit from the base classes of the library to reuse functionalities like model loading/saving.</li></ul></blockquote></li><li><p>Provide state-of-the-art models with performances as close as possible to the original models:</p><blockquote><ul><li>We provide at least one example for each architecture which reproduces a result provided by the official authors of said architecture.</li><li>The code is usually as close to the original code base as possible which means some PyTorch code may be not as <em>pytorchic</em> as it could be as a result of being converted TensorFlow code and vice versa.</li></ul></blockquote></li></ul><p>这是<a href="https://huggingface.co/transformers/philosophy.html%E5%AE%98%E7%BD%91%E7%BB%99%E5%87%BA%E7%9A%84%E8%A7%A3%E9%87%8A%EF%BC%9A">https://huggingface.co/transformers/philosophy.html官网给出的解释：</a></p><ul><li>架构<ul><li>使用每个模型都需要三个标准类:<strong>configuration</strong>,<strong>models</strong>,<strong>tokenizer</strong>.model用于指定使用的模型,例如model为bert，那么相应的网络结构是bert的网络结构；configuration是模型具体的架构配置，例如可以配置多头的数量等等,这里配置需要注意的地方就是，如果自定义配置不改变核心网络结构的则仍旧可以使用预训练模型权重，如果配置涉及到核心结构的修改，例如前馈网络的隐层神经元的个数，则无法使用预训练模型权重，这个时候transformers会默认你要重新自己预训练一个模型从而随机初始化整个模型的权重，这是是一种半灵活性的设计.</li><li>所有这些类都可以使用通用的from_pretrained()实例化方法，以简单统一的方式从受过训练的实例中初始化，该方法将负责下载（如果需要），缓存和加载相关的类实例以及相关的数据(config的的超参数，tokenizer生成器的词汇表和模型的权重)在 <a href="https://link.zhihu.com/?target=https://huggingface.co/models">Hugging Face Hub</a> 上提供的预先训练的检查点或您自己保存的检查点</li><li>在这三个基本类的基础上，该库提供了两个API：<ul><li><a href="https://link.zhihu.com/?target=https://huggingface.co/transformers/main_classes/pipelines.html%23transformers.pipeline">pipeline()</a>用于在给定任务上快速使用模型（及其关联的tokenizer和configuration）和 </li><li>Trainer或者<a href="https://link.zhihu.com/?target=https://huggingface.co/transformers/main_classes/trainer.html%23transformers.TFTrainer">TF</a>trainer 快速训练或微调给定模型</li></ul></li></ul></li></ul><p>因此<strong>Transformers</strong>不是神经网络构建模块化的模块工具箱。如果要扩展/构建库，只需使用常规的Python / PyTorch / TensorFlow / Keras模块并从库的基类继承即可重用模型加载/保存之类的功能。</p><p>现有的预训练模型整体上都属于下面的五个类别：</p><h5 id="Decoders-or-autoregressive-models"><a href="#Decoders-or-autoregressive-models" class="headerlink" title="Decoders or autoregressive models"></a>Decoders or autoregressive models</h5><p>自回归模型在经典语言建模任务上进行了预训练：猜测下一个已读完所有先前token的token。它们对应于transformer模型的解码器部分，并且在整个句子的顶部使用了一个掩码，以便注意头只能看到文本中的之前内容，而不能看到其后的内容。尽管可以对这些模型进行微调并在许多任务上取得出色的结果，但其最自然的应用是文本生成。此类模型的典型例子是GPT</p><h5 id="Encoders-or-autoencoding-models"><a href="#Encoders-or-autoencoding-models" class="headerlink" title="Encoders or autoencoding models"></a>Encoders or autoencoding models</h5><p>通过以某种方式破坏输入token并尝试重建原始句子来对自编码模型进行预训练。从某种意义上说，它们与transformer中的的编码器相对应，因为它们无需任何掩码即可访问完整的输入。这些模型通常建立整个句子的双向表示。可以对它们进行微调并在许多任务（例如文本生成）上取得出色的结果，但是它们最自然的应用是文本分类或token分类（比如词性标注）。此类模型的典型例子是BERT</p><p>自动回归模型和自动编码模型之间的唯一区别在于模型的预训练方式。因此，相同的体系结构既可以用于自动回归模型，也可以用于自动编码模型.</p><h5 id="Sequence-to-Sequence-models"><a href="#Sequence-to-Sequence-models" class="headerlink" title="Sequence-to-Sequence models"></a>Sequence-to-Sequence models</h5><p>序列到序列模型将transformers的编码器和解码器同时用于翻译任务或通过将其他任务转换为序列到序列问题来训练得到的。可以将它们微调来适应许多任务（这里应该是说把sequence to sequence的预训练模型的encoder或者decoder单独抽取出来，然后用法就和上面两种模型的用法一致），但最自然的应用是翻译，摘要和问题解答。T5是一个典型的例子.</p><h5 id="Multimodal-models"><a href="#Multimodal-models" class="headerlink" title="Multimodal models"></a>Multimodal models</h5><p>多模态模型将文本输入与其他类型的输入（例如图像）混合在一起，并且更特定于给定任务.</p><p><img src="https://s2.loli.net/2021/12/23/zu7FbaZfjXMVUyG.png" alt="image-20211125193439861.png"></p><p>这种模型没有提供任何预训练权重只是定义了模型的结构.</p><h5 id="Retrieval-based-models"><a href="#Retrieval-based-models" class="headerlink" title="Retrieval-based models"></a>Retrieval-based models</h5><p><img src="https://s2.loli.net/2021/12/23/aqH4X5ikoGsVjDp.png" alt="image-20211125193530708.png"></p><h4 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h4><p>  The most basic object in the 🤗 Transformers library is the <code>pipeline()</code> function. It connects a model with its necessary preprocessing and postprocessing steps, allowing us to directly input any text and get an intelligible answer:</p><p>  There are three main steps involved when you pass some text to a pipeline:</p><ol><li>The text is preprocessed into a format the model can understand.</li><li>The preprocessed inputs are passde to the model .</li><li>The predictions of the model are post-processed,so you can make sense of them.</li></ol><p>Some of the currently <strong>available pipelines</strong> are:</p><ul><li>feature-extraction(get the vector representation of a text)</li><li>file-mask</li><li>ner(named entity recogniton)</li><li>question-answering</li><li>sentiment-analysis</li><li>summarization</li><li>text-generation</li><li>translation</li><li>zero-shot-classification</li></ul><h4 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h4><h5 id="Transformer-history"><a href="#Transformer-history" class="headerlink" title="Transformer history"></a>Transformer history</h5><p><img src="https://s6.jpg.cm/2021/12/23/Lbta92.png" alt="Lbta92.png"></p><p>The <a href="https://arxiv.org/abs/1706.03762">Transformer architecture</a> was introduced in June 2017. The focus of the original research was on translation tasks. This was followed by the introduction of several influential models, including:</p><ul><li><strong>June 2018</strong>: <a href="https://cdn.openai.com/research-covers/language-unsupervised/language_understanding_paper.pdf">GPT</a>, the first pretrained Transformer model, used for fine-tuning on various NLP tasks and obtained state-of-the-art results</li><li><strong>October 2018</strong>: <a href="https://arxiv.org/abs/1810.04805">BERT</a>, another large pretrained model, this one designed to produce better summaries of sentences (more on this in the next chapter!)</li><li><strong>February 2019</strong>: <a href="https://cdn.openai.com/better-language-models/language_models_are_unsupervised_multitask_learners.pdf">GPT-2</a>, an improved (and bigger) version of GPT that was not immediately publicly released due to ethical concerns</li><li><strong>October 2019</strong>: <a href="https://arxiv.org/abs/1910.01108">DistilBERT</a>, a distilled version of BERT that is 60% faster, 40% lighter in memory, and still retains 97% of BERT’s performance</li><li><strong>October 2019</strong>: <a href="https://arxiv.org/abs/1910.13461">BART</a> and <a href="https://arxiv.org/abs/1910.10683">T5</a>, two large pretrained models using the same architecture as the original Transformer model (the first to do so)</li><li><strong>May 2020</strong>, <a href="https://arxiv.org/abs/2005.14165">GPT-3</a>, an even bigger version of GPT-2 that is able to perform well on a variety of tasks without the need for fine-tuning (called <em>zero-shot learning</em>)</li></ul><p>This list is far from comprehensive, and is just meant to highlight a few of the different kinds of Transformer models. Broadly, they can be grouped into three categories:</p><ul><li>GPT-like (also called <em>auto-regressive</em> Transformer models)</li><li>BERT-like (also called <em>auto-encoding</em> Transformer models)</li><li>BART/T5-like (also called <em>sequence-to-sequence</em> Transformer models)</li></ul><p>We will dive into these families in more depth later on.</p><h5 id="Transformers-are-language-models"><a href="#Transformers-are-language-models" class="headerlink" title="Transformers are language models"></a>Transformers are language models</h5><p>All the Transformer models mentioned above (GPT, BERT, BART, T5, etc.) have been trained as <em>language models</em>. This means they have been trained on large amounts of raw text in a self-supervised fashion. <strong>Self-supervised</strong> learning is a type of training in which the objective is automatically computed from the inputs of the model. That means that humans are not needed to label the data!</p><p>所有上述提到的模型都已经被训练成了对应的语言模型。这也就是说这些模型以自我监督的方式接受了大量原始文本的训练。自监督学习是一种训练类型，目标是根据模型的输入自动计算的。也就是说不需要人类手动标记数据。</p><hr><p>This type of model develops a statistical understanding of the language it has been trained on, but it’s not very useful for specific practical tasks. Because of this, the general pretrained model then goes through a process called <em><strong>transfer learning</strong></em>. During this process, the model is fine-tuned in a supervised way — that is, using human-annotated labels — on a given task</p><p>这种类型的模型对其所训练的语言有统计理解但对于特定的实际任务不是很有用。因此通用的预训练模型都会经历一个称为<strong>迁移学习</strong>的过程。在这个过程中，模型在给定的任务上以有监督的方式进行微调——即使用人工标注的数据标签。</p><hr><p>An example of a task is predicting the next word in a sentence having read the <em>n</em> previous words. This is called *<strong>causal language modeling</strong> because the output depends on the past and present inputs, but not the future ones.  </p><p>任务的一个实例就是预测已经阅读的前n个单词的句子的下一个单词。这也被称为<strong>因果语言建模</strong>，因为输出取决于过去和现在的输入而不是未来的输入。</p><p><img src="https://s6.jpg.cm/2021/12/23/LbtxQH.png" alt="LbtxQH.png"></p><p>Another example is <em>masked language modeling</em>, in which the model predicts a masked word in the sentence.</p><p>另一个例子是掩码语言建模，其中模型预测句子的掩码词。</p><h5 id="Transformer-are-big-models"><a href="#Transformer-are-big-models" class="headerlink" title="Transformer are big models"></a>Transformer are big models</h5><p>Apart from a few outliers (like DistilBERT), the general strategy to achieve better performance is by increasing the models’ sizes as well as the amount of data they are pretrained on.</p><p>除了一些特殊(如 DistilBERT)外，实现更好性能的一般策略是增加模型的大小以及预训练的数据量。</p><p><img src="https://s6.jpg.cm/2021/12/23/LbtDYL.png" alt="LbtDYL.png"></p><p>Unfortunately, training a model, especially a large one, requires a large amount of data. This becomes very costly in terms of time and compute resources. It even translates to environmental impact, as can be seen in the following graph.</p><p><img src="https://s6.jpg.cm/2021/12/23/LbtZRU.png" alt="LbtZRU.png"></p><h5 id="Transfer-Learning"><a href="#Transfer-Learning" class="headerlink" title="Transfer Learning"></a>Transfer Learning</h5><p><em>Pretraining</em> is the act of training a model from scratch: the weights are randomly initialized, and the training starts without any prior knowledge.</p><p>预训练是从头开始训练模型的行为：权重随机初始化,训练在没有任何先验知识的情况下开始.</p><p><img src="https://s6.jpg.cm/2021/12/23/LbNGuO.png" alt="LbNGuO.png"></p><p>This pretraining is usually done on very large amounts of data. Therefore, it requires a very large corpus of data, and training can take up to several weeks.</p><p><em>Fine-tuning</em>, on the other hand, is the training done <strong>after</strong> a model has been pretrained. To perform fine-tuning, you first acquire a pretrained language model, then perform additional training with a dataset specific to your task.</p><p>微调是在模型预训练后进行的训练。要进行微调，首先需要获得一个预训练的语言模型然后使用特定于任务的数据集进行额外的训练。</p><ul><li>The pretrained model was already trained on a dataset that has some similarities with the fine-tuning dataset. The fine-tuning process is thus able to take advantage of knowledge acquired by the initial model during pretraining (for instance, with NLP problems, the pretrained model will have some kind of statistical understanding of the language you are using for your task).</li><li>Since the pretrained model was already trained on lots of data, the fine-tuning requires way less data to get decent results.</li><li>For the same reason, the amount of time and resources needed to get good results are much lower</li></ul><p>For example, one could leverage a pretrained model trained on the English language and then fine-tune it on an arXiv corpus, resulting in a science/research-based model. The fine-tuning will only require a limited amount of data: the knowledge the pretrained model has acquired is “transferred,” hence the term <em>transfer learning</em>.</p><p><img src="https://s6.jpg.cm/2021/12/23/LbNIBw.png" alt="LbNIBw.png"></p><p>Fine-tuning a model therefore has lower time, data, financial, and environmental costs. It is also quicker and easier to iterate over different fine-tuning schemes, as the training is less constraining than a full pretraining.</p><p>微调模型具有更低的时间,数据,经济和环境成本。迭代不同的微调方案也更快更容易，因为训练比完全预训练的约束更少。</p><p>This process will also achieve better results than training from scratch (unless you have lots of data), which is why you should always try to leverage a pretrained model — one as close as possible to the task you have at hand — and fine-tune it.</p><h5 id="General-Transformer-Architecture"><a href="#General-Transformer-Architecture" class="headerlink" title="General Transformer Architecture"></a>General Transformer Architecture</h5><p><img src="https://s6.jpg.cm/2021/12/23/LbNLO8.png" alt="LbNLO8.png"></p><p>The transformer is based on the attention mechanism.</p><p><img src="https://s6.jpg.cm/2021/12/23/LbNR8i.png" alt="LbNR8i.png"></p><p>The combination of the two parts is known as an encoder-decoder or a sequence-to-sequence transformer.</p><p>The model is primarily composed of two blocks:</p><ul><li><strong>Encoder (left)</strong>: The encoder receives an input and builds a representation of it (its features). This means that the model is optimized to acquire understanding from the input.</li></ul><p>编码器接受输入并构建它的表示(其特征)，这意味着模型经过优化以从输入中获取理解。</p><ul><li><strong>Decoder (right)</strong>: The decoder uses the encoder’s representation (features) along with other inputs to generate a target sequence. This means that the model is optimized for generating outputs.</li></ul><p>解码器使用编码器的表示(特征)和其他输入生成目标序列，这意味着模型针对生成输出进行优化。</p><p>Each of these parts can be used independently, depending on the task:</p><ul><li><p><strong>Encoder-only models</strong>: Good for tasks that require understanding of the input, such as <strong>sentence classification and named entity recognition.</strong></p><p>适用于<strong>需要理解输入的任务，例如句子分类和命名实体识别。</strong></p></li><li><p><strong>Decoder-only models</strong>: Good for generative tasks such as <strong>text generation</strong>.</p><p>适用于<strong>生成任务，例如文本生成</strong></p></li><li><p><strong>Encoder-decoder models</strong> or <strong>sequence-to-sequence models</strong>: Good for generative tasks that require an input, such as <strong>translation or summarization</strong>.</p><p>适用于<strong>需要输入的生成任务，例如翻译或者摘要。</strong> </p></li></ul><h5 id="Atention-layers"><a href="#Atention-layers" class="headerlink" title="Atention layers"></a>Atention layers</h5><p>A key feature of Transformer models is that they are built with special layers called <em>attention layers</em>. In fact, the title of the paper introducing the Transformer architecture was <a href="https://arxiv.org/abs/1706.03762">“Attention Is All You Need”</a>! We will explore the details of attention layers later in the course; for now, all you need to know is that this layer will tell the model to pay specific attention to certain words in the sentence you passed it (and more or less ignore the others) when dealing with the representation of each word.</p><p>Transformer模型的关键点就是他们由称为注意力层的特殊层构建而成。事实上，提出Transformer架构的论文是”Attention is all your need”。后面会详细探究Attenton layer的细节。</p><p>To put this into context, consider the task of translating text from English to French. Given the input “You like this course”, a translation model will need to also attend to the adjacent word “You” to get the proper translation for the word “like”, because in French the verb “like” is conjugated differently depending on the subject. The rest of the sentence, however, is not useful for the translation of that word. In the same vein, when translating “this” the model will also need to pay attention to the word “course”, because “this” translates differently depending on whether the associated noun is masculine or feminine. Again, the other words in the sentence will not matter for the translation of “this”. With more complex sentences (and more complex grammar rules), the model would need to pay special attention to words that might appear farther away in the sentence to properly translate each word.</p><h5 id="The-original-architecture"><a href="#The-original-architecture" class="headerlink" title="The original architecture"></a>The original architecture</h5><p>The Transformer architecture was originally designed for translation. During training, the encoder receives inputs (sentences) in a certain language, while the decoder receives the same sentences in the desired target language</p><p>Transformer架构最初是为了翻译而设计的,在训练期间，编码器接受某种语言的输入句子，而解码器接受所需目标语言的相同句子。</p><ul><li><p>In the encoder, the attention layers can use all the words in a sentence (since, as we just saw, the translation of a given word can be dependent on what is after as well as before it in the sentence).</p><p>在编码器中，注意力层可以使用句子中的所有单词(给定单词的翻译可以依赖于句子中它之后和之前的内容)</p></li><li><p>The decoder, however, works sequentially and can only pay attention to the words in the sentence that it has already translated (so, only the words before the word currently being generated). For example, when we have predicted the first three words of the translated target, we give them to the decoder which then uses all the inputs of the encoder to try to predict the fourth word.</p><p>解码器是按照顺序工作，只能关注已经翻译的句子中单词。比如，当我们预测翻译目标中的前三个单词时，我们将他们提供给解码器然后解码器使用编码器的所有输入尝试预测第四个单词。</p></li></ul><p>Note that the the first attention layer in a decoder block pays attention to all (past) inputs to the decoder, but the second attention layer uses the output of the encoder. It can thus access the whole input sentence to best predict the current word. This is very useful as different languages can have grammatical rules that put the words in different orders, or some context provided later in the sentence may be helpful to determine the best translation of a given word.</p><p>注意，解码器的第一个注意层关注解码器所有过去的输入，但第二个注意层使用编码器的输出。因此，它可以访问整个输入句子以最好的预测当前的单词，这是很有用的因为不同的语言有不同的语法规则，把单词放在不同的顺序或者句子后面提供的上下文可能有助于确定一个给定单词的最佳翻译。</p><p>The <em>attention mask</em> can also be used in the encoder/decoder to prevent the model from paying attention to some special words — for instance, the special padding word used to make all the inputs the same length when batching together sentences.</p><p><strong>attention mask</strong>也可以运用在编码/解码中，防止模型注意到某些特殊的单词</p><h5 id="Architecture-amp-amp-Checkpoints"><a href="#Architecture-amp-amp-Checkpoints" class="headerlink" title="Architecture &amp;&amp; Checkpoints"></a>Architecture &amp;&amp; Checkpoints</h5><p>As we dive into Transformer models in this course, you’ll see mentions of <em>architectures</em> and <em>checkpoints</em> as well as <em>models</em>. These terms all have slightly different meanings:</p><ul><li><strong>Architecture</strong>: This is the skeleton of the model — the definition of each layer and each operation that happens within the model.</li><li><strong>Checkpoints</strong>: These are the weights that will be loaded in a given architecture.</li><li><strong>Model</strong>: This is an umbrella term that isn’t as precise as “architecture” or “checkpoint”: it can mean both. This course will specify <em>architecture</em> or <em>checkpoint</em> when it matters to reduce ambiguity.</li></ul><p>For example, BERT is an architecture while <code>bert-base-cased</code>, a set of weights trained by the Google team for the first release of BERT, is a checkpoint. However, one can say “the BERT model” and “the <code>bert-base-cased</code> model.”</p><h4 id="Encoder-models"><a href="#Encoder-models" class="headerlink" title="Encoder models"></a>Encoder models</h4><p>Encoder models use only the encoder of a Transformer model. At each stage, the attention layers can access all the words in the initial sentence. These models are often characterized as having “bi-directional” attention, and are often called <em>auto-encoding models</em>.</p><p>Encoder model只使用the transformer model的encoder部分。在每个阶段，attention layers都可以访问初始句子的所有词。这些模型同v行被描述为具有”bi-directional”，通常被称为自编码模型。</p><p>The pretraining of these models usually revolves around somehow corrupting a given sentence (for instance, by masking random words in it) and tasking the model with finding or reconstructing the initial sentence.</p><p>这些模型的预训练通常围绕某种方式破坏给定的句子(例如，通过屏蔽其中的随机词)，并让模型查找或重构初始句子。</p><p>Encoder models are best suited for tasks requiring an understanding of the full sentence, such as sentence classification, named entity recognition (and more generally word classification), and extractive question answering.</p><p>编码器模型最适合需要理解完整句子的任务，例如sentence classification,ner(命名实体识别)(以及更加一般的单词分类)和eqa提取式回答.</p><h5 id="Representatives-of-this-family-of-models-include"><a href="#Representatives-of-this-family-of-models-include" class="headerlink" title="Representatives of this family of models include:"></a>Representatives of this family of models include:</h5><ul><li><a href="https://huggingface.co/transformers/model_doc/albert.html">ALBERT</a></li><li><a href="https://huggingface.co/transformers/model_doc/bert.html">BERT</a></li><li><a href="https://huggingface.co/transformers/model_doc/distilbert.html">DistilBERT</a></li><li><a href="https://huggingface.co/transformers/model_doc/electra.html">ELECTRA</a></li><li><a href="https://huggingface.co/transformers/model_doc/roberta.html">RoBERTa</a></li></ul><h4 id="Decoder-models"><a href="#Decoder-models" class="headerlink" title="Decoder models"></a>Decoder models</h4><p>Decoder models use only the decoder of a Transformer model. At each stage, for a given word the attention layers can only access the words positioned before it in the sentence. These models are often called <em>auto-regressive models</em>.</p><p>解码器模型仅使用Transformer模型的解码器。在每个阶段，对于给定的单词，注意力层只能访问位于句子之前的单词。这些模型通常被称为自回归模型。</p><p>The pretraining of decoder models usually revolves around predicting the next word in the sentence.</p><p>解码器模型的预训练通常围绕预测句子中的下一个单词。</p><p>These models are best suited for tasks involving text generation.</p><p>这些模型最适合设计文本生成的任务.</p><h5 id="Representatives-of-this-family-of-models-include-1"><a href="#Representatives-of-this-family-of-models-include-1" class="headerlink" title="Representatives of this family of models include:"></a>Representatives of this family of models include:</h5><ul><li><a href="https://huggingface.co/transformers/model_doc/ctrl.html">CTRL</a></li><li><a href="https://huggingface.co/transformers/model_doc/gpt.html">GPT</a></li><li><a href="https://huggingface.co/transformers/model_doc/gpt2.html">GPT-2</a></li><li><a href="https://huggingface.co/transformers/model_doc/transformerxl.html">Transformer XL</a></li></ul><h4 id="Seq-to-Seq-models"><a href="#Seq-to-Seq-models" class="headerlink" title="Seq-to-Seq models"></a>Seq-to-Seq models</h4><p>Encoder-decoder models (also called <em>sequence-to-sequence models</em>) use both parts of the Transformer architecture. At each stage, the attention layers of the encoder can access all the words in the initial sentence, whereas the attention layers of the decoder can only access the words positioned before a given word in the input.</p><p>encoder-decoder models(也称为SeqtoSeq models)使用Transformer体系结构的所有部分。在每个阶段，编码器的注意力机制可以访问初始句子的每个单词,而解码器的注意力层只能访问输入中某个单词前面的单词。</p><p>The pretraining of these models can be done using the objectives of encoder or decoder models, but usually involves something a bit more complex. For instance, <a href="https://huggingface.co/t5-base">T5</a> is pretrained by replacing random spans of text (that can contain several words) with a single mask special word, and the objective is then to predict the text that this mask word replaces.</p><p>这些模型的预训练可以使用编码器/解码器模型的目标来完成,但通常涉及一些更复杂的东西。例如，T5是通过一个掩码特殊词取代随机文本跨度(可以包含多个单词)进行预训练的，然后目标是预测这个掩码词取代的文本。</p><p>Sequence-to-sequence models are best suited for tasks revolving around generating new sentences depending on a given input, such as summarization, translation, or generative question answering.</p><p>Seq-to-Seq模型最适合根据给定的输入生成新句子的任务，比如摘要，翻译或者生成式问题回答。</p><h5 id="Representatives-of-this-family-of-models-include-2"><a href="#Representatives-of-this-family-of-models-include-2" class="headerlink" title="Representatives of this family of models include:"></a>Representatives of this family of models include:</h5><ul><li><a href="https://huggingface.co/transformers/model_doc/bart.html">BART</a></li><li><a href="https://huggingface.co/transformers/model_doc/mbart.html">mBART</a></li><li><a href="https://huggingface.co/transformers/model_doc/marian.html">Marian</a></li><li><a href="https://huggingface.co/transformers/model_doc/t5.html">T5</a></li></ul><h4 id="Bias-and-limitations"><a href="#Bias-and-limitations" class="headerlink" title="Bias and limitations"></a>Bias and limitations</h4><p>If your intent is to use a pretrained model or a fine-tuned version in production, please be aware that, while these models are powerful tools, they come with limitations. The biggest of these is that, to enable pretraining on large amounts of data, researchers often scrape all the content they can find, taking the best as well as the worst of what is available on the internet.</p><p>如果打算在production中使用一个预先训练的模型或者经过微调的版本，请注意，尽管这些模型是最强大的工具但是他们也有局限性。其中最大的问题是是为了能够对大量的数据进行训练，研究人员经常搜集他们能够找到的所有内容，并且从互联网上可获得的信息中挑选出最好的和最差的。</p><p>Example：<strong>pipeli    ne:fill-mask model:bert-base-uncased</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipelineunmasker <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"fill-mask"</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">"bert-base-uncased"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> unmasker<span class="token punctuation">(</span><span class="token string">"This man works as a [MASK]."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">[</span><span class="token string">"token_str"</span><span class="token punctuation">]</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> result<span class="token punctuation">]</span><span class="token punctuation">)</span>result <span class="token operator">=</span> unmasker<span class="token punctuation">(</span><span class="token string">"This woman works as a [MASK]."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">[</span><span class="token string">"token_str"</span><span class="token punctuation">]</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> result<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">Some weights of the model checkpoint at bert<span class="token operator">-</span>base<span class="token operator">-</span>uncased were <span class="token operator">not</span> used when initializing BertForMaskedLM<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'cls.seq_relationship.bias'</span><span class="token punctuation">,</span> <span class="token string">'cls.seq_relationship.weight'</span><span class="token punctuation">]</span><span class="token operator">-</span> This IS expected <span class="token keyword">if</span> you are initializing BertForMaskedLM <span class="token keyword">from</span> the checkpoint of a model trained on another task <span class="token operator">or</span> <span class="token keyword">with</span> another architecture <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> initializing a BertForSequenceClassification model <span class="token keyword">from</span> a BertForPreTraining model<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">-</span> This IS NOT expected <span class="token keyword">if</span> you are initializing BertForMaskedLM <span class="token keyword">from</span> the checkpoint of a model that you expect to be exactly identical <span class="token punctuation">(</span>initializing a BertForSequenceClassification model <span class="token keyword">from</span> a BertForSequenceClassification model<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token string">'carpenter'</span><span class="token punctuation">,</span> <span class="token string">'lawyer'</span><span class="token punctuation">,</span> <span class="token string">'farmer'</span><span class="token punctuation">,</span> <span class="token string">'businessman'</span><span class="token punctuation">,</span> <span class="token string">'doctor'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'nurse'</span><span class="token punctuation">,</span> <span class="token string">'maid'</span><span class="token punctuation">,</span> <span class="token string">'teacher'</span><span class="token punctuation">,</span> <span class="token string">'waitress'</span><span class="token punctuation">,</span> <span class="token string">'prostitute'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When asked to fill in the missing word in these two sentences, the model gives only one gender-free answer (waiter/waitress). The others are work occupations usually associated with one specific gender — and yes, prostitute ended up in the top 5 possibilities the model associates with “woman” and “work.” This happens even though BERT is one of the rare Transformer models not built by scraping data from all over the internet, but rather using apparently neutral data (it’s trained on the <a href="https://huggingface.co/datasets/wikipedia">English Wikipedia</a> and <a href="https://huggingface.co/datasets/bookcorpus">BookCorpus</a> datasets).</p><p>可以通过例子发现,当需要填写这两句话中被屏蔽的单词时,模型只给出了一个不分性别的答案并按照‘man’和‘work’相关联，‘woman’和‘work’相关联可能性最大的前5种可能性中。</p><p>When you use these tools, you therefore need to keep in the back of your mind that the original model you are using could very easily generate sexist, racist, or homophobic content. Fine-tuning the model on your data won’t make this intrinsic bias disappear.</p><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>In this chapter, you saw how to approach different NLP tasks using the high-level <code>pipeline()</code> function from 🤗 Transformers. You also saw how to search for and use models in the Hub, as well as how to use the Inference API to test the models directly in your browser.</p><p>We discussed how Transformer models work at a high level, and talked about the importance of transfer learning and fine-tuning. A key aspect is that you can use the full architecture or only the encoder or decoder, depending on what kind of task you aim to solve. The following table summarizes this:</p><p>关键点在于，可以使用完整的transformer架构也可以使用编码器和解码器，具体却决于你要解决的task特点，下表进行简单总结：</p><table><thead><tr><th>Model</th><th>Examples</th><th>Tasks</th></tr></thead><tbody><tr><td>Encoder</td><td>ALBERT, BERT, DistilBERT, ELECTRA, RoBERTa</td><td>Sentence classification, named entity recognition, extractive question answering</td></tr><tr><td>Decoder</td><td>CTRL, GPT, GPT-2, Transformer XL</td><td>Text generation</td></tr><tr><td>Encoder-decoder</td><td>BART, T5, Marian, mBART</td><td>Summarization, translation, generative question answering</td></tr></tbody></table><h4 id="Using-Transformers"><a href="#Using-Transformers" class="headerlink" title="Using Transformers"></a>Using Transformers</h4><ul><li><p><strong>Ease of use</strong>: Downloading, loading, and using a state-of-the-art NLP model for inference can be done in just two lines of code.</p><p>下载，加载和使用SOTA的NLP模型进行推理很简单的API调用即可</p></li><li><p><strong>Flexibility</strong>: At their core, all models are simple PyTorch <code>nn.Module</code> or TensorFlow <code>tf.keras.Model</code> classes and can be handled like any other models in their respective machine learning (ML) frameworks.</p><p>其实所有模型都是Pytorch <strong>nn.module</strong>和Tensorflow <strong>tf.keras.model</strong>类，并且可以像各自机器学习框架的任何其他模型一样进行处理。</p></li><li><p><strong>Simplicity</strong>: Hardly any abstractions are made across the library. The “All in one file” is a core concept: a model’s forward pass is entirely defined in a single file, so that the code itself is understandable and hackable.</p></li></ul><p>This last feature makes 🤗 Transformers quite different from other ML libraries. The models are not built on modules that are shared across files; instead, each model has its own layers. In addition to making the models more approachable and understandable, this allows you to easily experiment on one model without affecting others.</p><p>这些模型不是建立在跨文件共享的模块上.</p><p>This chapter will begin with an end-to-end example where we use a model and a tokenizer together to replicate the <code>pipeline()</code> function introduced in <a href="https://huggingface.co/course/chapter1">Chapter 1</a>. Next, we’ll discuss the model API: we’ll dive into the model and configuration classes, and show you how to load a model and how it processes numerical inputs to output predictions.</p><p>接下来从一个端到端的例子开始，使用一个模型和分词器来深入理解pipeline函数；稍后，深入讨论模型API：深入研究模型和配置类，并展开如可加载模型以及如何处理数值输入以便输出预测。</p><p>Thene’ll look at the tokenizer API, which is the other main component of the <code>pipeline()</code> function. Tokenizers take care of the first and last processing steps, handling the conversion from text to numerical inputs for the neural network, and the conversion back to text when it is needed. Finally, we’ll show you how to handle sending multiple sentences through a model in a prepared batch, then wrap it all up with a closer look at the high-level <code>tokenizer()</code> function.    </p><h5 id="Behind-the-pipeline"><a href="#Behind-the-pipeline" class="headerlink" title="Behind the pipeline"></a>Behind the pipeline</h5><p>take a look at the example:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipelineclassifier <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">"sentiment-analysis"</span><span class="token punctuation">)</span>classifier<span class="token punctuation">(</span>    <span class="token punctuation">[</span>        <span class="token string">"I've been waiting for a HuggingFace course my whole life."</span><span class="token punctuation">,</span>        <span class="token string">"I hate this so much!"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>and obtained:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'label'</span><span class="token punctuation">:</span> <span class="token string">'POSITIVE'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">0.9598047137260437</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'label'</span><span class="token punctuation">:</span> <span class="token string">'NEGATIVE'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">0.9994558095932007</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>As we can see,this pipeline groups together three steps: preprocessing, passing the inputs through the model, and postprocessing:</p><p><img src="https://s6.jpg.cm/2021/12/23/Lbo6gW.png" alt="Lbo6gW.png"></p><h6 id="Preprocessing-with-a-tokenizer"><a href="#Preprocessing-with-a-tokenizer" class="headerlink" title="Preprocessing with a tokenizer"></a>Preprocessing with a tokenizer</h6><p>Like other neural networks, Transformer models can’t process raw text directly, so the first step of our pipeline is to convert the text inputs into numbers that the model can make sense of. To do this we use a <em>tokenizer</em>, which will be responsible for:</p><ul><li>Splitting the input into words, subwords, or symbols (like punctuation) that are called <em>tokens</em></li><li>Mapping each token to an integer</li><li>Adding additional inputs that may be useful to the model</li></ul><p>All this preprocessing needs to be done in exactly the same way as when the model was pretrained, so we first need to download that information from the <a href="https://huggingface.co/models">Model Hub</a>. To do this, we use the <code>AutoTokenizer</code> class and its <code>from_pretrained()</code> method. Using the checkpoint name of our model, it will automatically fetch the data associated with the model’s tokenizer and cache it (so it’s only downloaded the first time you run the code below).</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> dialogue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> transformer </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dialogue_system</title>
      <link href="/year/11/21/Dialogue-system/"/>
      <url>/year/11/21/Dialogue-system/</url>
      
        <content type="html"><![CDATA[<p>NLP领域比较传统和核心的task有很多</p><p>下面先介绍Chinese NLP的基本任务:</p><h4 id="Co-reference-Resolution"><a href="#Co-reference-Resolution" class="headerlink" title="Co-reference Resolution"></a>Co-reference Resolution</h4><p>Background</p><hr><p>​    Co-reference identifies pieces of text and links them with other pieces of text that refer to the same thing. Sometimes pieces of text have zero-length, where an overt pronoun or noun is omitted.</p><p>Example</p><hr><p>input:</p><pre><code>我的姐姐给我她的狗。很喜欢.</code></pre><p>output</p><pre><code>[我]0的[姐姐]1给[我]0[她]1的[狗]2。[]0很喜欢[]2.</code></pre><h6 id="Standard-Metrics"><a href="#Standard-Metrics" class="headerlink" title="Standard Metrics"></a>Standard Metrics</h6><p>Average of F1-scores returned by these three precison/recall metrics:</p><ul><li>MUC</li><li>B-cubed</li><li>Entity-based CEAF</li><li>BLANC</li><li>Link-Based Entity-Aware metric(LEA)</li></ul><h4 id="Sentiment-Analysis"><a href="#Sentiment-Analysis" class="headerlink" title="Sentiment Analysis"></a>Sentiment Analysis</h4><p>Background</p><hr><p>Sentiment Analysis detects identifies and extracts subjective information from text.<br>情感分析检测识别并从文本中提取主观信息.</p><hr><p>Example</p><hr><p>inputs:</p><pre><code>总的感觉这台机器还不错，实用的有：阴阳历显示，时间与日期快速转换, 记事本等。</code></pre><p>Output:</p><pre><code>Positive</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Faster-RCNN</title>
      <link href="/year/11/06/Faster%20R-CNN/"/>
      <url>/year/11/06/Faster%20R-CNN/</url>
      
        <content type="html"><![CDATA[<h5 id="Perface"><a href="#Perface" class="headerlink" title="Perface:"></a>Perface:</h5><p>在🦌同学的感染下，笔者最近也学习了目标检测方向的相关内容，看的第一篇论文是<a href="https://arxiv.org/abs/1504.08083#">Faster R-CNN：Towards Rel-Time Objection Dection with Region Proposal Networks</a>，里面涉及到很多前置模型需要了解结构，在这里分享一点笔记</p><h5 id="目标检测背景"><a href="#目标检测背景" class="headerlink" title="目标检测背景"></a>目标检测背景</h5><p>目标检测是很多计算机视觉人物的基础，目前主流的目标检测的算法主要基于深度学习模型可以分为两大类</p><ol><li>one-stage检测算法,这种算法直接产生物体的类别概率和坐标位置,不需要直接产生候选区域.比如说YOLO和SSD</li><li>two-stage检测算法,这是将检测问题划分为两个阶段,首先是产生候选区域,然后对候选区域分类;典型算法是R-CNN系列,faster rcnn就是基于<strong>region proposal</strong>(候选区域)</li></ol><h5 id="backbone-network"><a href="#backbone-network" class="headerlink" title="backbone network"></a>backbone network</h5><p><strong>Faster R-CNN</strong>使用的主干网络是VGG-16,在论文中称主干网络时<strong>backbone network</strong>,主干网络就是用来<strong>feature extraction</strong>,当然这个不是一成不变的,可以替换,比如现在也同样流行使用<strong>Resnet</strong>,再如<strong>CornerNet</strong>算法中使用的backbone network是Hourglass Network.<br>关于VGG-16可以参考<a href="http://zh.gluon.ai/chapter_convolutional-neural-networks/vgg.html">VGG介绍</a>,16的含义是含有参数有16层,分别是13个卷积层+3个全连接层</p><p>图来自网络</p><h5 id="Faster-R-CNN算法步骤"><a href="#Faster-R-CNN算法步骤" class="headerlink" title="Faster R-CNN算法步骤"></a>Faster R-CNN算法步骤</h5><p>这部分是为了理解Faster R-CNN,总体描述下算法的整个过程以便后期做细节分析</p><p><img src="https://s6.jpg.cm/2021/12/23/LbJi0t.png" alt="LbJi0t.png"></p><p>大致流程是:将整张图片输入CNN层,得到feature map,卷积特征输入到**RPN(Region Proposal Network)**得到候选框的特征信息,对候选框中提取的特征使用分类器判别是否属于一个特定类别,对于属于某一特征的候选框用回归器进一步调整其位置.</p><p>Faster R-CNN可以看作RPN和Fast R-CNN模型的结合,即Faster R-CNN = RPN + Fast R-CNN.下面介绍每一步骤的输入输出的细节.</p><ul><li>首先通过预训练模型训练得到Conv layers(这个conv layer实际上就是VGG-16)能够接收整张图片并提取特征图feature maps,这个feature map是在conv层之后获得的特征.</li><li>feature map被共享之后用于后续的RPN和Rol池化层<ul><li>BPN层:BPN网络用于生成region proposals.该层通过softmax判断anchors属于前景(foreground)还是背景(background),再利用边框回归修正anchors,获得精确的proposals </li><li>RoI Pooling层:该层收集输入的feature map和proposals综合这些信息提取proposal feature map,进入到后面可利用全连接操作层进行目标识别和定位</li></ul></li><li>最后的classifier会将Roi Pooling层形成固定大小的feature map进行全连接操作,利用softmax进行具体类别的分类,同时利用L1 loss完成bounding box regression回归操作获得物体的准确位置</li></ul><h5 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h5><h6 id="1-RPN"><a href="#1-RPN" class="headerlink" title="1.RPN"></a>1.RPN</h6><p>之前的R-CNN和Fast R-CNN都是采用可选择性搜索(SS)来产生候选框的,但是这种方法特别耗时;Faster R-CNN最大的亮点是抛弃SS,采用RPN生成候选框.<br><a href="https://imagelol.com/image/LbJCxk"><img src="https://s6.jpg.cm/2021/12/23/LbJCxk.png" alt="LbJCxk.png"></a></p><p>说明:</p><ol><li>Conv feature map:VGG-16网络最后一个卷积层输出的feature map</li><li>Sliding window:滑动窗口实际上就是3*3的卷积核,滑窗只要选取所有可能的区域并没有额外的作用</li><li>K anchor boxes:在每个sliding window的点上初始化的参考区域(论文中k=9)就是9个矩形框</li><li>Intermediate layer:中间层，256-d是中间层的维度(论文中谁用ZF网络就是256维,VGG就是512维)</li><li>Cls layer:分类层,预测proposal的anchor对应的proposal的(x,y,w,h)</li><li>2k scores:2k个分数(18个)</li><li>Reg layer:回归层,判断该proposal是前景还是背景</li><li>4k coordinates:4k坐标(36个)</li></ol><ul><li>RPN的输入是卷积特征图,输出是图片生成的proposals,RPN通过一个滑动窗口连接在最后一个卷积层的feature map上,生成一个长度256的全连接特征</li><li>这个全连接层特征分别送入两个全连接层一个是分类层,用于分类检测;一个是回归层,用于回归;对于每个滑动窗口位置一般设置k(论文中k=9)个不同大小或者比例的anchors这意味着每个滑窗覆盖的位置就会预测9哥候选区域<br><strong>分类层</strong>:每个anchor输出两个预测值:anchor是背景(background,非object)的score和anchor是前景(foreground,object)的score<br><strong>回归层</strong>:输出4k(4*9=36)个坐标值表示每个候选区域的位置(x,y,w,h)</li></ul><p>也就是说我么是通过这些特征图应用滑动窗口加anchor机制进行目标区域判定和分类的,这里的滑窗加anchor机制功能类似于fast rcnn的selective search生成proposals的作用,而我们是通过RPN生成proposals.RPN就是一个卷积层 + relu +左右两个层(cls layer和reg layer)的小型网络</p><h6 id="2-anchor"><a href="#2-anchor" class="headerlink" title="2.anchor"></a>2.anchor</h6><p>论文内容:The k proposals are parameterized relative to k reference boxes, which we call anchors;可以理解为锚点位于之前说的3 * 3的滑窗中心处,就是因为有多个anchor.这9个anchor是作者设置的,论文中scale=[128,256,512],长宽比[1:1,1:2,2:1]有9种；自己可以根据目标的特点做出不同的设计;对于一幅 w * h的feature map一共有w * h * k个锚点.</p><p><img src="https://s6.jpg.cm/2021/12/23/LbJjEy.png" alt="LbJjEy.png"></p><h6 id="3-VGG提取特征"><a href="#3-VGG提取特征" class="headerlink" title="3.VGG提取特征"></a>3.VGG提取特征</h6><p>VGG的网络流程图:</p><p><a href="https://imagelol.com/image/LbJh6e"><img src="https://s6.jpg.cm/2021/12/23/LbJh6e.png" alt="LbJh6e.png"></a></p><p>每个卷积层利用前面网络信息生成抽象描述:<br>第一层学习边缘edges信息；<br>第二层:学习边缘edges中图案patterns以学习更加复杂的形状信息；最终得到卷积特征图其空间维度(分辨率)比原图小了很多但更深；<br>特征图的width和height由于卷积层间的池化层而降低,而depth由于卷积层学习的filters数量而增加.</p><h6 id="4-ROI-pooling"><a href="#4-ROI-pooling" class="headerlink" title="4.ROI pooling"></a>4.ROI pooling</h6><p>ROI就是region of interest指的是感兴趣区域;如果是原图，roi就是目标，如果是featuremap，roi就是特征图像目标的特征了，roi在这里就是经过RPN网络得到的，总之就是一个框。pooling就是池化。所以ROI Pooling就是Pooling的一种，只是是针对于Rois的pooling操作而已。RPN 处理后，可以得到一堆没有 class score 的 object proposals.待处理问题为：如何利用这些proposals分类.Roi pooling层的过程就是为了将不同输入尺寸的feature map（ROI）抠出来，然后resize到统一的大小.</p><p>ROI pooling层的输入:</p><ol><li>特征图features map(这个特征图就是cnn卷积出来以后用于共享的那个特征图)</li><li>roi信息:(就是RPN网络的输出,一个表示所有ROI的N*5矩阵,N表示ROI的数目;第一列表示图像index,其余四列表示其余的左上角和右下角坐标,坐标信息是对应原图中的绝对坐标)</li></ol><p>ROI pooling层的过程:</p><p>首先将RPN中得到的原图中roi信息映射到feature map上按原图与featuremap的比例缩小roi坐标就行了），然后经过最大池化，池化到固定大小w×h。但这个pooling不是一般的Pooling，而是将区域等分，然后取每一小块的最大值，最后才能得到固定尺寸的roi。</p><p>也就是：</p><p>根据输入的image，将Roi映射到feature map对应的位置；<br>将映射后的区域划分为相同大小的sections（sections数量和输出的维度相同）；<br>对每个section进行max pooling操作；<br>ROI pooling层的输出：</p><p>结果是，由一组大小各异的矩形，我们快速获取到具有固定大小的相应特征图。值得注意的是，RoI pooling 输出的维度实际上并不取决于输入特征图的大小，也不取决于区域提案的大小。这完全取决于我们将区域分成几部分。也就是，batch个roi矩阵，每一个roi矩阵为：通道数xWxH,也就是从selective search得到batch个roi，然后映射为固定大小。</p><h6 id="5-NMS"><a href="#5-NMS" class="headerlink" title="5.NMS"></a>5.NMS</h6><p>NMS（Non Maximum Suppression，非极大值抑制）用于后期的物体冗余边界框去除，因为目标检测最终一个目标只需要一个框，所以要把多余的框干掉，留下最准确的那个。</p><p>NMS的输入：</p><p>检测到的Boxes(同一个物体可能被检测到很多Boxes，每个box均有分类score)</p><p>NMS的输出：</p><p>最优的Box.</p><h6 id="6-FC-layer"><a href="#6-FC-layer" class="headerlink" title="6.FC layer"></a>6.FC layer</h6><p>经过roi pooling层之后，batch_size=300, proposal feature map的大小是7×7,512-d,对特征图进行全连接，参照下图，最后同样利用Softmax Loss和L1 Loss完成分类和定位。</p><p><img src="https://s6.jpg.cm/2021/12/23/LbJ3wi.png" alt="LbJ3wi.png"></p><p>通过全连接层与softmax计算每个region proposal具体属于哪个类别（如人，马，车等），输出cls_prob概率向量；同时再次利用bounding box regression获得每个region proposal的位置偏移量bbox_pred，用于回归获得更加精确的目标检测框</p><p>即从PoI Pooling获取到7x7大小的proposal feature maps后，通过全连接主要做了：</p><p>通过全连接和softmax对region proposals进行具体类别的分类；</p><p>再次对region proposals进行bounding box regression，获取更高精度的rectangle box。</p><h5 id="主要部分"><a href="#主要部分" class="headerlink" title="主要部分"></a>主要部分</h5><p><strong>Faster</strong> <strong>RCNN</strong>其实可以分为四部分主要内容</p><h6 id="1-Conv-Layer"><a href="#1-Conv-Layer" class="headerlink" title="1.Conv Layer"></a>1.Conv Layer</h6><p>作为一种CNN目标检测方法,Faster RCNN首先使用一组基础的cnn+relu+pooling层提取image的feature map,这个feature map被共享用用于后续RPN层和全连接层</p><h6 id="2-Region-Proposal-NetWorks"><a href="#2-Region-Proposal-NetWorks" class="headerlink" title="2.Region Proposal NetWorks"></a>2.Region Proposal NetWorks</h6><p>RPN网络用于生成region proposals,该层通过softmax判断anchors属于positive还是negative,再利用bounding</p><p>box regression修正anchors获得精确的proposals</p><h6 id="3-Roi-Pooling"><a href="#3-Roi-Pooling" class="headerlink" title="3.Roi Pooling"></a>3.Roi Pooling</h6><p>该层手机输入的feature map和proposals,综合这些信息之后提取proposals,综合这些信息提取proposals feature maps送入后续全连接层判定目标类别</p><h6 id="4-Classfication"><a href="#4-Classfication" class="headerlink" title="4.Classfication"></a>4.Classfication</h6><p>利用proposals feature map计算proposals的类别同时再次bounding box regression获得检测框最终的精确位置</p><p><img src="https://s6.jpg.cm/2021/12/23/LbJyjr.png" alt="LbJyjr.png"></p><p>上图展示了python版本中的VGG16模型中的faster rcnn的网络结构可以清晰的看到该网络对于一幅任意大小的P*Q的图像:</p><ul><li>首先固定至大小M×N然后将M×N图像送入网络;</li><li>而Conv layer</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cv </tag>
            
            <tag> RCNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dian2021夏令营</title>
      <link href="/year/11/06/002/"/>
      <url>/year/11/06/002/</url>
      
        <content type="html"><![CDATA[<p>报名参加夏令营起初是想花时间研究AI机器学习领域的经典算法，然后做了dian的一个<strong>lab</strong></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dian </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> CNN简易框架搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SeqToSeq_Translation(Attention)</title>
      <link href="/year/09/27/code%20of%20seq2seq_translation/"/>
      <url>/year/09/27/code%20of%20seq2seq_translation/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>NLP From Scratch: Translation with a Sequence to Sequence Network and Attention</p><hr><p><strong>Author</strong>: <code>Sean Robertson &lt;https://github.com/spro/practical-pytorch&gt;</code>_</p><p>This is the third and final tutorial on doing “NLP From Scratch”, where we<br>write our own classes and functions to preprocess the data to do our NLP<br>modeling tasks. We hope after you complete this tutorial that you’ll proceed to<br>learn how <code>torchtext</code> can handle much of this preprocessing for you in the<br>three tutorials immediately following this one.</p><p>In this project we will be teaching a neural network to translate from<br>French to English.</p><p>::</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">[</span><span class="token key atrule">KEY</span><span class="token punctuation">:</span> <span class="token punctuation">></span> input<span class="token punctuation">,</span> = target<span class="token punctuation">,</span> &lt; output<span class="token punctuation">]</span><span class="token punctuation">></span> il est en train de peindre un tableau .= he is painting a picture .&lt; he is painting a picture .<span class="token punctuation">></span> pourquoi ne pas essayer ce vin delicieux <span class="token punctuation">?</span>= why not try that delicious wine <span class="token punctuation">?</span>&lt; why not try that delicious wine <span class="token punctuation">?</span><span class="token punctuation">></span> elle n est pas poete mais romanciere .= she is not a poet but a novelist .&lt; she not not a poet but a novelist .<span class="token punctuation">></span> vous etes trop maigre .= you re too skinny .&lt; you re all alone .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>… to varying degrees of success.</p><p>This is made possible by the simple but powerful idea of the <code>sequence to sequence network &lt;https://arxiv.org/abs/1409.3215&gt;</code>__, in which two<br>recurrent neural networks work together to transform one sequence to<br>another. An encoder network condenses an input sequence into a vector,<br>and a decoder network unfolds that vector into a new sequence.</p><p>.. figure:: /_static/img/seq-seq-images/seq2seq.png<br>   :alt:</p><p>To improve upon this model we’ll use an <code>attention mechanism &lt;https://arxiv.org/abs/1409.0473&gt;</code>__, which lets the decoder<br>learn to focus over a specific range of the input sequence.</p><p><strong>Recommended Reading:</strong></p><p>I assume you have at least installed PyTorch, know Python, and<br>understand Tensors:</p><ul><li> <a href="https://pytorch.org/">https://pytorch.org/</a> For installation instructions</li><li> :doc:<code>/beginner/deep_learning_60min_blitz</code> to get started with PyTorch in general</li><li> :doc:<code>/beginner/pytorch_with_examples</code> for a wide and deep overview</li><li> :doc:<code>/beginner/former_torchies_tutorial</code> if you are former Lua Torch user</li></ul><p>It would also be useful to know about Sequence to Sequence networks and<br>how they work:</p><ul><li><code>Learning Phrase Representations using RNN Encoder-Decoder for  Statistical Machine Translation &lt;https://arxiv.org/abs/1406.1078&gt;</code>__</li><li><code>Sequence to Sequence Learning with Neural  Networks &lt;https://arxiv.org/abs/1409.3215&gt;</code>__</li><li><code>Neural Machine Translation by Jointly Learning to Align and  Translate &lt;https://arxiv.org/abs/1409.0473&gt;</code>__</li><li> <code>A Neural Conversational Model &lt;https://arxiv.org/abs/1506.05869&gt;</code>__</li></ul><p>You will also find the previous tutorials on<br>:doc:<code>/intermediate/char_rnn_classification_tutorial</code><br>and :doc:<code>/intermediate/char_rnn_generation_tutorial</code><br>helpful as those concepts are very similar to the Encoder and Decoder<br>models, respectively.</p><p><strong>Requirements</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> unicode_literals<span class="token punctuation">,</span> print_function<span class="token punctuation">,</span> division<span class="token keyword">from</span> io <span class="token keyword">import</span> open<span class="token keyword">import</span> unicodedata<span class="token keyword">import</span> string<span class="token keyword">import</span> re<span class="token keyword">import</span> random<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> Fdevice <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Loading-data-files"><a href="#Loading-data-files" class="headerlink" title="Loading data files"></a>Loading data files</h1><p>The data for this project is a set of many thousands of English to<br>French translation pairs.</p><p><code>This question on Open Data Stack Exchange &lt;https://opendata.stackexchange.com/questions/3888/dataset-of-sentences-translated-into-many-languages&gt;</code>__<br>pointed me to the open translation site <a href="https://tatoeba.org/">https://tatoeba.org/</a> which has<br>downloads available at <a href="https://tatoeba.org/eng/downloads">https://tatoeba.org/eng/downloads</a> - and better<br>yet, someone did the extra work of splitting language pairs into<br>individual text files here: <a href="https://www.manythings.org/anki/">https://www.manythings.org/anki/</a></p><p>The English to French pairs are too big to include in the repo, so<br>download to <code>data/eng-fra.txt</code> before continuing. The file is a tab<br>separated list of translation pairs:</p><p>::</p><pre><code>I am cold.    J'ai froid.</code></pre><p>.. Note::<br>   Download the data from<br>   <code>here &lt;https://download.pytorch.org/tutorial/data.zip&gt;</code>_<br>   and extract it to the current directory.</p><p>Similar to the character encoding used in the character-level RNN<br>tutorials, we will be representing each word in a language as a one-hot<br>vector, or giant vector of zeros except for a single one (at the index<br>of the word). Compared to the dozens of characters that might exist in a<br>language, there are many many more words, so the encoding vector is much<br>larger. We will however cheat a bit and trim the data to only use a few<br>thousand words per language.</p><p>.. figure:: /_static/img/seq-seq-images/word-encoding.png<br>   :alt:</p><p>We’ll need a unique index per word to use as the inputs and targets of<br>the networks later. To keep track of all this we will use a helper class<br>called <code>Lang</code> which has word → index (<code>word2index</code>) and index → word<br>(<code>index2word</code>) dictionaries, as well as a count of each word<br><code>word2count</code> which will be used to replace rare words later.</p><pre class="line-numbers language-python"><code class="language-python">SOS_token <span class="token operator">=</span> <span class="token number">0</span>EOS_token <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">Lang</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>word2index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>word2count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>index2word <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"SOS"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"EOS"</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>n_words <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># Count SOS and EOS</span>    <span class="token keyword">def</span> <span class="token function">addSentence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>addWord<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">addWord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> word <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>word2index<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>word2index<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>n_words            self<span class="token punctuation">.</span>word2count<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            self<span class="token punctuation">.</span>index2word<span class="token punctuation">[</span>self<span class="token punctuation">.</span>n_words<span class="token punctuation">]</span> <span class="token operator">=</span> word            self<span class="token punctuation">.</span>n_words <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>word2count<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The files are all in Unicode, to simplify we will turn Unicode<br>characters to ASCII, make everything lowercase, and trim most<br>punctuation.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Turn a Unicode string to plain ASCII, thanks to</span><span class="token comment" spellcheck="true"># https://stackoverflow.com/a/518232/2809427</span><span class="token keyword">def</span> <span class="token function">unicodeToAscii</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>        c <span class="token keyword">for</span> c <span class="token keyword">in</span> unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFD'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token keyword">if</span> unicodedata<span class="token punctuation">.</span>category<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'Mn'</span>    <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Lowercase, trim, and remove non-letter characters</span><span class="token keyword">def</span> <span class="token function">normalizeString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> unicodeToAscii<span class="token punctuation">(</span>s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"([.!?])"</span><span class="token punctuation">,</span> r<span class="token string">" \1"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    s <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"[^a-zA-Z.!?]+"</span><span class="token punctuation">,</span> r<span class="token string">" "</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To read the data file we will split the file into lines, and then split<br>lines into pairs. The files are all English → Other Language, so if we<br>want to translate from Other Language → English I added the <code>reverse</code><br>flag to reverse the pairs.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">readLangs</span><span class="token punctuation">(</span>lang1<span class="token punctuation">,</span> lang2<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Reading lines..."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Read the file and split into lines</span>    lines <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'data/%s-%s.txt'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>lang1<span class="token punctuation">,</span> lang2<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\   <span class="token operator">//</span> 相应数据集下载以后注意相对路径的设置        read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Split every line into pairs and normalize</span>    pairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>normalizeString<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> l<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> l <span class="token keyword">in</span> lines<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Reverse pairs, make Lang instances</span>    <span class="token keyword">if</span> reverse<span class="token punctuation">:</span>        pairs <span class="token operator">=</span> <span class="token punctuation">[</span>list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> pairs<span class="token punctuation">]</span>        input_lang <span class="token operator">=</span> Lang<span class="token punctuation">(</span>lang2<span class="token punctuation">)</span>        output_lang <span class="token operator">=</span> Lang<span class="token punctuation">(</span>lang1<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        input_lang <span class="token operator">=</span> Lang<span class="token punctuation">(</span>lang1<span class="token punctuation">)</span>        output_lang <span class="token operator">=</span> Lang<span class="token punctuation">(</span>lang2<span class="token punctuation">)</span>    <span class="token keyword">return</span> input_lang<span class="token punctuation">,</span> output_lang<span class="token punctuation">,</span> pairs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Since there are a <em>lot</em> of example sentences and we want to train<br>something quickly, we’ll trim the data set to only relatively short and<br>simple sentences. Here the maximum length is 10 words (that includes<br>ending punctuation) and we’re filtering to sentences that translate to<br>the form “I am” or “He is” etc. (accounting for apostrophes replaced<br>earlier).</p><pre class="line-numbers language-python"><code class="language-python">MAX_LENGTH <span class="token operator">=</span> <span class="token number">10</span>eng_prefixes <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">"i am "</span><span class="token punctuation">,</span> <span class="token string">"i m "</span><span class="token punctuation">,</span>    <span class="token string">"he is"</span><span class="token punctuation">,</span> <span class="token string">"he s "</span><span class="token punctuation">,</span>    <span class="token string">"she is"</span><span class="token punctuation">,</span> <span class="token string">"she s "</span><span class="token punctuation">,</span>    <span class="token string">"you are"</span><span class="token punctuation">,</span> <span class="token string">"you re "</span><span class="token punctuation">,</span>    <span class="token string">"we are"</span><span class="token punctuation">,</span> <span class="token string">"we re "</span><span class="token punctuation">,</span>    <span class="token string">"they are"</span><span class="token punctuation">,</span> <span class="token string">"they re "</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">filterPair</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> len<span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAX_LENGTH <span class="token operator">and</span> \        len<span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAX_LENGTH <span class="token operator">and</span> \        p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>eng_prefixes<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">filterPairs</span><span class="token punctuation">(</span>pairs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>pair <span class="token keyword">for</span> pair <span class="token keyword">in</span> pairs <span class="token keyword">if</span> filterPair<span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The full process for preparing the data is:</p><ul><li> Read text file and split into lines, split lines into pairs</li><li> Normalize text, filter by length and content</li><li> Make word lists from sentences in pairs</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">prepareData</span><span class="token punctuation">(</span>lang1<span class="token punctuation">,</span> lang2<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    input_lang<span class="token punctuation">,</span> output_lang<span class="token punctuation">,</span> pairs <span class="token operator">=</span> readLangs<span class="token punctuation">(</span>lang1<span class="token punctuation">,</span> lang2<span class="token punctuation">,</span> reverse<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Read %s sentence pairs"</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span><span class="token punctuation">)</span>    pairs <span class="token operator">=</span> filterPairs<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Trimmed to %s sentence pairs"</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Counting words..."</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> pair <span class="token keyword">in</span> pairs<span class="token punctuation">:</span>        input_lang<span class="token punctuation">.</span>addSentence<span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        output_lang<span class="token punctuation">.</span>addSentence<span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Counted words:"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>input_lang<span class="token punctuation">.</span>name<span class="token punctuation">,</span> input_lang<span class="token punctuation">.</span>n_words<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>output_lang<span class="token punctuation">.</span>name<span class="token punctuation">,</span> output_lang<span class="token punctuation">.</span>n_words<span class="token punctuation">)</span>    <span class="token keyword">return</span> input_lang<span class="token punctuation">,</span> output_lang<span class="token punctuation">,</span> pairsinput_lang<span class="token punctuation">,</span> output_lang<span class="token punctuation">,</span> pairs <span class="token operator">=</span> prepareData<span class="token punctuation">(</span><span class="token string">'eng'</span><span class="token punctuation">,</span> <span class="token string">'fra'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Reading lines...Read 135842 sentence pairsTrimmed to 10599 sentence pairsCounting words...Counted words:fra 4345eng 2803['je suis lessive et fatigue .', 'i m broke and tired .']</code></pre><h1 id="The-Seq2Seq-Model"><a href="#The-Seq2Seq-Model" class="headerlink" title="The Seq2Seq Model"></a>The Seq2Seq Model</h1><p>A Recurrent Neural Network, or RNN, is a network that operates on a<br>sequence and uses its own output as input for subsequent steps.</p><p>A <code>Sequence to Sequence network &lt;https://arxiv.org/abs/1409.3215&gt;</code><strong>, or<br>seq2seq network, or <code>Encoder Decoder network &lt;https://arxiv.org/pdf/1406.1078v3.pdf&gt;</code></strong>, is a model<br>consisting of two RNNs called the encoder and decoder. The encoder reads<br>an input sequence and outputs a single vector, and the decoder reads<br>that vector to produce an output sequence.</p><p>.. figure:: /_static/img/seq-seq-images/seq2seq.png<br>   :alt:</p><p>Unlike sequence prediction with a single RNN, where every input<br>corresponds to an output, the seq2seq model frees us from sequence<br>length and order, which makes it ideal for translation between two<br>languages.</p><p>Consider the sentence “Je ne suis pas le chat noir” → “I am not the<br>black cat”. Most of the words in the input sentence have a direct<br>translation in the output sentence, but are in slightly different<br>orders, e.g. “chat noir” and “black cat”. Because of the “ne/pas”<br>construction there is also one more word in the input sentence. It would<br>be difficult to produce a correct translation directly from the sequence<br>of input words.</p><p>With a seq2seq model the encoder creates a single vector which, in the<br>ideal case, encodes the “meaning” of the input sequence into a single<br>vector — a single point in some N dimensional space of sentences.</p><h2 id="The-Encoder"><a href="#The-Encoder" class="headerlink" title="The Encoder"></a>The Encoder</h2><p>The encoder of a seq2seq network is a RNN that outputs some value for<br>every word from the input sentence. For every input word the encoder<br>outputs a vector and a hidden state, and uses the hidden state for the<br>next input word.</p><p>.. figure:: /_static/img/seq-seq-images/encoder-network.png<br>   :alt:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">EncoderRNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>EncoderRNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden_size <span class="token operator">=</span> hidden_size        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gru <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span><span class="token punctuation">:</span>        embedded <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> embedded        output<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>gru<span class="token punctuation">(</span>output<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span>        <span class="token keyword">return</span> output<span class="token punctuation">,</span> hidden    <span class="token keyword">def</span> <span class="token function">initHidden</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="The-Decoder"><a href="#The-Decoder" class="headerlink" title="The Decoder"></a>The Decoder</h2><p>The decoder is another RNN that takes the encoder output vector(s) and<br>outputs a sequence of words to create the translation.</p><p>Simple Decoder<br>^^^^^^^^^^^^^^</p><p>In the simplest seq2seq decoder we use only last output of the encoder.<br>This last output is sometimes called the <em>context vector</em> as it encodes<br>context from the entire sequence. This context vector is used as the<br>initial hidden state of the decoder.</p><p>At every step of decoding, the decoder is given an input token and<br>hidden state. The initial input token is the start-of-string <code>&lt;SOS&gt;</code><br>token, and the first hidden state is the context vector (the encoder’s<br>last hidden state).</p><p>.. figure:: /_static/img/seq-seq-images/decoder-network.png<br>   :alt:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DecoderRNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>DecoderRNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden_size <span class="token operator">=</span> hidden_size        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>output_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gru <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>softmax <span class="token operator">=</span> nn<span class="token punctuation">.</span>LogSoftmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>output<span class="token punctuation">)</span>        output<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>gru<span class="token punctuation">(</span>output<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> output<span class="token punctuation">,</span> hidden    <span class="token keyword">def</span> <span class="token function">initHidden</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>I encourage you to train and observe the results of this model, but to<br>save space we’ll be going straight for the gold and introducing the<br>Attention Mechanism.</p><p>Attention Decoder<br>^^^^^^^^^^^^^^^^^</p><p>If only the context vector is passed between the encoder and decoder,<br>that single vector carries the burden of encoding the entire sentence.</p><p>Attention allows the decoder network to “focus” on a different part of<br>the encoder’s outputs for every step of the decoder’s own outputs. First<br>we calculate a set of <em>attention weights</em>. These will be multiplied by<br>the encoder output vectors to create a weighted combination. The result<br>(called <code>attn_applied</code> in the code) should contain information about<br>that specific part of the input sequence, and thus help the decoder<br>choose the right output words.</p><p>.. figure:: <a href="https://i.imgur.com/1152PYf.png">https://i.imgur.com/1152PYf.png</a><br>   :alt:</p><p>Calculating the attention weights is done with another feed-forward<br>layer <code>attn</code>, using the decoder’s input and hidden state as inputs.<br>Because there are sentences of all sizes in the training data, to<br>actually create and train this layer we have to choose a maximum<br>sentence length (input length, for encoder outputs) that it can apply<br>to. Sentences of the maximum length will use all the attention weights,<br>while shorter sentences will only use the first few.</p><p>.. figure:: /_static/img/seq-seq-images/attention-decoder-network.png<br>   :alt:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AttnDecoderRNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">,</span> dropout_p<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span>MAX_LENGTH<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>AttnDecoderRNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hidden_size <span class="token operator">=</span> hidden_size        self<span class="token punctuation">.</span>output_size <span class="token operator">=</span> output_size        self<span class="token punctuation">.</span>dropout_p <span class="token operator">=</span> dropout_p        self<span class="token punctuation">.</span>max_length <span class="token operator">=</span> max_length        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>self<span class="token punctuation">.</span>output_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>attn <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden_size <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>max_length<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>attn_combine <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden_size <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dropout_p<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gru <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>output_size<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input<span class="token punctuation">,</span> hidden<span class="token punctuation">,</span> encoder_outputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        embedded <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        embedded <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>embedded<span class="token punctuation">)</span>        attn_weights <span class="token operator">=</span> F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>attn<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>embedded<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> hidden<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        attn_applied <span class="token operator">=</span> torch<span class="token punctuation">.</span>bmm<span class="token punctuation">(</span>attn_weights<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 encoder_outputs<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>embedded<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> attn_applied<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>attn_combine<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>output<span class="token punctuation">)</span>        output<span class="token punctuation">,</span> hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>gru<span class="token punctuation">(</span>output<span class="token punctuation">,</span> hidden<span class="token punctuation">)</span>        output <span class="token operator">=</span> F<span class="token punctuation">.</span>log_softmax<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out<span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> output<span class="token punctuation">,</span> hidden<span class="token punctuation">,</span> attn_weights    <span class="token keyword">def</span> <span class="token function">initHidden</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="alert alert-info"><h4>Note</h4><p>There are other forms of attention that work around the length  limitation by using a relative position approach. Read about "local  attention" in `Effective Approaches to Attention-based Neural Machine  Translation <https: arxiv.org="" abs="" 1508.04025="">`__.</https:></p></div><h1 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h1><h2 id="Preparing-Training-Data"><a href="#Preparing-Training-Data" class="headerlink" title="Preparing Training Data"></a>Preparing Training Data</h2><p>To train, for each pair we will need an input tensor (indexes of the<br>words in the input sentence) and target tensor (indexes of the words in<br>the target sentence). While creating these vectors we will append the<br>EOS token to both sequences.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">indexesFromSentence</span><span class="token punctuation">(</span>lang<span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>lang<span class="token punctuation">.</span>word2index<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">tensorFromSentence</span><span class="token punctuation">(</span>lang<span class="token punctuation">,</span> sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    indexes <span class="token operator">=</span> indexesFromSentence<span class="token punctuation">(</span>lang<span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    indexes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>EOS_token<span class="token punctuation">)</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>indexes<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>long<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tensorsFromPair</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">:</span>    input_tensor <span class="token operator">=</span> tensorFromSentence<span class="token punctuation">(</span>input_lang<span class="token punctuation">,</span> pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    target_tensor <span class="token operator">=</span> tensorFromSentence<span class="token punctuation">(</span>output_lang<span class="token punctuation">,</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> target_tensor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Training-the-Model"><a href="#Training-the-Model" class="headerlink" title="Training the Model"></a>Training the Model</h2><p>To train we run the input sentence through the encoder, and keep track<br>of every output and the latest hidden state. Then the decoder is given<br>the <code>&lt;SOS&gt;</code> token as its first input, and the last hidden state of the<br>encoder as its first hidden state.</p><p>“Teacher forcing” is the concept of using the real target outputs as<br>each next input, instead of using the decoder’s guess as the next input.<br>Using teacher forcing causes it to converge faster but <code>when the trained network is exploited, it may exhibit instability &lt;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.378.4095&amp;rep=rep1&amp;type=pdf&gt;</code>__.</p><p>You can observe outputs of teacher-forced networks that read with<br>coherent grammar but wander far from the correct translation -<br>intuitively it has learned to represent the output grammar and can “pick<br>up” the meaning once the teacher tells it the first few words, but it<br>has not properly learned how to create the sentence from the translation<br>in the first place.</p><p>Because of the freedom PyTorch’s autograd gives us, we can randomly<br>choose to use teacher forcing or not with a simple if statement. Turn<br><code>teacher_forcing_ratio</code> up to use more of it.</p><pre class="line-numbers language-python"><code class="language-python">teacher_forcing_ratio <span class="token operator">=</span> <span class="token number">0.5</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> target_tensor<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> encoder_optimizer<span class="token punctuation">,</span> decoder_optimizer<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> max_length<span class="token operator">=</span>MAX_LENGTH<span class="token punctuation">)</span><span class="token punctuation">:</span>    encoder_hidden <span class="token operator">=</span> encoder<span class="token punctuation">.</span>initHidden<span class="token punctuation">(</span><span class="token punctuation">)</span>    encoder_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    decoder_optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    input_length <span class="token operator">=</span> input_tensor<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    target_length <span class="token operator">=</span> target_tensor<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    encoder_outputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>max_length<span class="token punctuation">,</span> encoder<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>    loss <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> ei <span class="token keyword">in</span> range<span class="token punctuation">(</span>input_length<span class="token punctuation">)</span><span class="token punctuation">:</span>        encoder_output<span class="token punctuation">,</span> encoder_hidden <span class="token operator">=</span> encoder<span class="token punctuation">(</span>            input_tensor<span class="token punctuation">[</span>ei<span class="token punctuation">]</span><span class="token punctuation">,</span> encoder_hidden<span class="token punctuation">)</span>        encoder_outputs<span class="token punctuation">[</span>ei<span class="token punctuation">]</span> <span class="token operator">=</span> encoder_output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    decoder_input <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>SOS_token<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>    decoder_hidden <span class="token operator">=</span> encoder_hidden    use_teacher_forcing <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">if</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> teacher_forcing_ratio <span class="token keyword">else</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> use_teacher_forcing<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Teacher forcing: Feed the target as the next input</span>        <span class="token keyword">for</span> di <span class="token keyword">in</span> range<span class="token punctuation">(</span>target_length<span class="token punctuation">)</span><span class="token punctuation">:</span>            decoder_output<span class="token punctuation">,</span> decoder_hidden<span class="token punctuation">,</span> decoder_attention <span class="token operator">=</span> decoder<span class="token punctuation">(</span>                decoder_input<span class="token punctuation">,</span> decoder_hidden<span class="token punctuation">,</span> encoder_outputs<span class="token punctuation">)</span>            loss <span class="token operator">+=</span> criterion<span class="token punctuation">(</span>decoder_output<span class="token punctuation">,</span> target_tensor<span class="token punctuation">[</span>di<span class="token punctuation">]</span><span class="token punctuation">)</span>            decoder_input <span class="token operator">=</span> target_tensor<span class="token punctuation">[</span>di<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># Teacher forcing</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Without teacher forcing: use its own predictions as the next input</span>        <span class="token keyword">for</span> di <span class="token keyword">in</span> range<span class="token punctuation">(</span>target_length<span class="token punctuation">)</span><span class="token punctuation">:</span>            decoder_output<span class="token punctuation">,</span> decoder_hidden<span class="token punctuation">,</span> decoder_attention <span class="token operator">=</span> decoder<span class="token punctuation">(</span>                decoder_input<span class="token punctuation">,</span> decoder_hidden<span class="token punctuation">,</span> encoder_outputs<span class="token punctuation">)</span>            topv<span class="token punctuation">,</span> topi <span class="token operator">=</span> decoder_output<span class="token punctuation">.</span>topk<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            decoder_input <span class="token operator">=</span> topi<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># detach from history as input</span>            loss <span class="token operator">+=</span> criterion<span class="token punctuation">(</span>decoder_output<span class="token punctuation">,</span> target_tensor<span class="token punctuation">[</span>di<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> decoder_input<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> EOS_token<span class="token punctuation">:</span>                <span class="token keyword">break</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    encoder_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    decoder_optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> target_length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is a helper function to print time elapsed and estimated time<br>remaining given the current time and progress %.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> math<span class="token keyword">def</span> <span class="token function">asMinutes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>s <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span>    s <span class="token operator">-=</span> m <span class="token operator">*</span> <span class="token number">60</span>    <span class="token keyword">return</span> <span class="token string">'%dm %ds'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">timeSince</span><span class="token punctuation">(</span>since<span class="token punctuation">,</span> percent<span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> now <span class="token operator">-</span> since    es <span class="token operator">=</span> s <span class="token operator">/</span> <span class="token punctuation">(</span>percent<span class="token punctuation">)</span>    rs <span class="token operator">=</span> es <span class="token operator">-</span> s    <span class="token keyword">return</span> <span class="token string">'%s (- %s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>asMinutes<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> asMinutes<span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The whole training process looks like this:</p><ul><li> Start a timer</li><li> Initialize optimizers and criterion</li><li> Create set of training pairs</li><li> Start empty losses array for plotting</li></ul><p>Then we call <code>train</code> many times and occasionally print the progress (%<br>of examples, time so far, estimated time) and average loss.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">trainIters</span><span class="token punctuation">(</span>encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> n_iters<span class="token punctuation">,</span> print_every<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> plot_every<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    plot_losses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    print_loss_total <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># Reset every print_every</span>    plot_loss_total <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># Reset every plot_every</span>    encoder_optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>encoder<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span>    decoder_optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>decoder<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span>    training_pairs <span class="token operator">=</span> <span class="token punctuation">[</span>tensorsFromPair<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span><span class="token punctuation">)</span>                      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_iters<span class="token punctuation">)</span><span class="token punctuation">]</span>    criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>NLLLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> iter <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n_iters <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        training_pair <span class="token operator">=</span> training_pairs<span class="token punctuation">[</span>iter <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        input_tensor <span class="token operator">=</span> training_pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        target_tensor <span class="token operator">=</span> training_pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        loss <span class="token operator">=</span> train<span class="token punctuation">(</span>input_tensor<span class="token punctuation">,</span> target_tensor<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span>                     decoder<span class="token punctuation">,</span> encoder_optimizer<span class="token punctuation">,</span> decoder_optimizer<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>        print_loss_total <span class="token operator">+=</span> loss        plot_loss_total <span class="token operator">+=</span> loss        <span class="token keyword">if</span> iter <span class="token operator">%</span> print_every <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            print_loss_avg <span class="token operator">=</span> print_loss_total <span class="token operator">/</span> print_every            print_loss_total <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s (%d %d%%) %.4f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>timeSince<span class="token punctuation">(</span>start<span class="token punctuation">,</span> iter <span class="token operator">/</span> n_iters<span class="token punctuation">)</span><span class="token punctuation">,</span>                                         iter<span class="token punctuation">,</span> iter <span class="token operator">/</span> n_iters <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> print_loss_avg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> iter <span class="token operator">%</span> plot_every <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            plot_loss_avg <span class="token operator">=</span> plot_loss_total <span class="token operator">/</span> plot_every            plot_losses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>plot_loss_avg<span class="token punctuation">)</span>            plot_loss_total <span class="token operator">=</span> <span class="token number">0</span>    showPlot<span class="token punctuation">(</span>plot_losses<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Plotting-results"><a href="#Plotting-results" class="headerlink" title="Plotting results"></a>Plotting results</h2><p>Plotting is done with matplotlib, using the array of loss values<br><code>plot_losses</code> saved while training.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>switch_backend<span class="token punctuation">(</span><span class="token string">'agg'</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>ticker <span class="token keyword">as</span> ticker<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">showPlot</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># this locator puts ticks at regular intervals</span>    loc <span class="token operator">=</span> ticker<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span>base<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>loc<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h1><p>Evaluation is mostly the same as training, but there are no targets so<br>we simply feed the decoder’s predictions back to itself for each step.<br>Every time it predicts a word we add it to the output string, and if it<br>predicts the EOS token we stop there. We also store the decoder’s<br>attention outputs for display later.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> sentence<span class="token punctuation">,</span> max_length<span class="token operator">=</span>MAX_LENGTH<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        input_tensor <span class="token operator">=</span> tensorFromSentence<span class="token punctuation">(</span>input_lang<span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>        input_length <span class="token operator">=</span> input_tensor<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        encoder_hidden <span class="token operator">=</span> encoder<span class="token punctuation">.</span>initHidden<span class="token punctuation">(</span><span class="token punctuation">)</span>        encoder_outputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>max_length<span class="token punctuation">,</span> encoder<span class="token punctuation">.</span>hidden_size<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>        <span class="token keyword">for</span> ei <span class="token keyword">in</span> range<span class="token punctuation">(</span>input_length<span class="token punctuation">)</span><span class="token punctuation">:</span>            encoder_output<span class="token punctuation">,</span> encoder_hidden <span class="token operator">=</span> encoder<span class="token punctuation">(</span>input_tensor<span class="token punctuation">[</span>ei<span class="token punctuation">]</span><span class="token punctuation">,</span>                                                     encoder_hidden<span class="token punctuation">)</span>            encoder_outputs<span class="token punctuation">[</span>ei<span class="token punctuation">]</span> <span class="token operator">+=</span> encoder_output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        decoder_input <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>SOS_token<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># SOS</span>        decoder_hidden <span class="token operator">=</span> encoder_hidden        decoded_words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        decoder_attentions <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>max_length<span class="token punctuation">,</span> max_length<span class="token punctuation">)</span>        <span class="token keyword">for</span> di <span class="token keyword">in</span> range<span class="token punctuation">(</span>max_length<span class="token punctuation">)</span><span class="token punctuation">:</span>            decoder_output<span class="token punctuation">,</span> decoder_hidden<span class="token punctuation">,</span> decoder_attention <span class="token operator">=</span> decoder<span class="token punctuation">(</span>                decoder_input<span class="token punctuation">,</span> decoder_hidden<span class="token punctuation">,</span> encoder_outputs<span class="token punctuation">)</span>            decoder_attentions<span class="token punctuation">[</span>di<span class="token punctuation">]</span> <span class="token operator">=</span> decoder_attention<span class="token punctuation">.</span>data            topv<span class="token punctuation">,</span> topi <span class="token operator">=</span> decoder_output<span class="token punctuation">.</span>data<span class="token punctuation">.</span>topk<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> topi<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> EOS_token<span class="token punctuation">:</span>                decoded_words<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&lt;EOS>'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                decoded_words<span class="token punctuation">.</span>append<span class="token punctuation">(</span>output_lang<span class="token punctuation">.</span>index2word<span class="token punctuation">[</span>topi<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            decoder_input <span class="token operator">=</span> topi<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> decoded_words<span class="token punctuation">,</span> decoder_attentions<span class="token punctuation">[</span><span class="token punctuation">:</span>di <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We can evaluate random sentences from the training set and print out the<br>input, target, and output to make some subjective quality judgements:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">evaluateRandomly</span><span class="token punctuation">(</span>encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        pair <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>pairs<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        output_words<span class="token punctuation">,</span> attentions <span class="token operator">=</span> evaluate<span class="token punctuation">(</span>encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        output_sentence <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>output_words<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> output_sentence<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Training-and-Evaluating"><a href="#Training-and-Evaluating" class="headerlink" title="Training and Evaluating"></a>Training and Evaluating</h1><p>With all these helper functions in place (it looks like extra work, but<br>it makes it easier to run multiple experiments) we can actually<br>initialize a network and start training.</p><p>Remember that the input sentences were heavily filtered. For this small<br>dataset we can use relatively small networks of 256 hidden nodes and a<br>single GRU layer. After about 40 minutes on a MacBook CPU we’ll get some<br>reasonable results.</p><p>.. Note::<br>   If you run this notebook you can train, interrupt the kernel,<br>   evaluate, and continue training later. Comment out the lines where the<br>   encoder and decoder are initialized and run <code>trainIters</code> again.</p><pre class="line-numbers language-python"><code class="language-python">hidden_size <span class="token operator">=</span> <span class="token number">20</span>encoder1 <span class="token operator">=</span> EncoderRNN<span class="token punctuation">(</span>input_lang<span class="token punctuation">.</span>n_words<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>attn_decoder1 <span class="token operator">=</span> AttnDecoderRNN<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> output_lang<span class="token punctuation">.</span>n_words<span class="token punctuation">,</span> dropout_p<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>trainIters<span class="token punctuation">(</span>encoder1<span class="token punctuation">,</span> attn_decoder1<span class="token punctuation">,</span> <span class="token number">75000</span><span class="token punctuation">,</span> print_every<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2m 24s (- 33m 37s) (5000 6%) 3.37745m 0s (- 32m 31s) (10000 13%) 2.86507m 36s (- 30m 26s) (15000 20%) 2.736810m 9s (- 27m 56s) (20000 26%) 2.655212m 38s (- 25m 17s) (25000 33%) 2.582015m 17s (- 22m 55s) (30000 40%) 2.538217m 50s (- 20m 23s) (35000 46%) 2.521520m 30s (- 17m 57s) (40000 53%) 2.459122m 51s (- 15m 14s) (45000 60%) 2.425925m 22s (- 12m 41s) (50000 66%) 2.362327m 50s (- 10m 7s) (55000 73%) 2.340230m 22s (- 7m 35s) (60000 80%) 2.308033m 3s (- 5m 5s) (65000 86%) 2.272235m 38s (- 2m 32s) (70000 93%) 2.276438m 20s (- 0m 0s) (75000 100%) 2.2802</code></pre><pre class="line-numbers language-python"><code class="language-python">evaluateRandomly<span class="token punctuation">(</span>encoder1<span class="token punctuation">,</span> attn_decoder1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>&gt; il s en met plein les poches .= he s raking it in .&lt; he s always to the . . &lt;EOS&gt;&gt; je suis en train de griller du poisson .= i am grilling fish .&lt; i m a . . &lt;EOS&gt;&gt; c est un mannequin .= she s a model .&lt; he s a nice . &lt;EOS&gt;&gt; il n est pas un saint .= he s no saint .&lt; he s not a . . &lt;EOS&gt;&gt; je n abandonne pas .= i m not giving up .&lt; i m not alone . &lt;EOS&gt;&gt; vous etes jeunes .= you re young .&lt; you re a . &lt;EOS&gt;&gt; il fait un super boulot .= he is doing a super job .&lt; he s a to of . . &lt;EOS&gt;&gt; tu es trop maigre .= you re too skinny .&lt; you re very busy . &lt;EOS&gt;&gt; je ne suis pas intimide .= i m not intimidated .&lt; i m not alone . &lt;EOS&gt;&gt; il est plus fort que moi .= he s stronger than me .&lt; he s not as . &lt;EOS&gt;</code></pre><p>​    </p><h2 id="Visualizing-Attention"><a href="#Visualizing-Attention" class="headerlink" title="Visualizing Attention"></a>Visualizing Attention</h2><p>A useful property of the attention mechanism is its highly interpretable<br>outputs. Because it is used to weight specific encoder outputs of the<br>input sequence, we can imagine looking where the network is focused most<br>at each time step.</p><p>You could simply run <code>plt.matshow(attentions)</code> to see attention output<br>displayed as a matrix, with the columns being input steps and rows being<br>output steps:</p><pre class="line-numbers language-python"><code class="language-python">output_words<span class="token punctuation">,</span> attentions <span class="token operator">=</span> evaluate<span class="token punctuation">(</span>    encoder1<span class="token punctuation">,</span> attn_decoder1<span class="token punctuation">,</span> <span class="token string">"je suis trop froid ."</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>matshow<span class="token punctuation">(</span>attentions<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>&lt;matplotlib.image.AxesImage at 0x7f68d8ef77b8&gt;</code></pre><p>For a better viewing experience we will do the extra work of adding axes<br>and labels:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">showAttention</span><span class="token punctuation">(</span>input_sentence<span class="token punctuation">,</span> output_words<span class="token punctuation">,</span> attentions<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Set up figure with colorbar</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>    cax <span class="token operator">=</span> ax<span class="token punctuation">.</span>matshow<span class="token punctuation">(</span>attentions<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'bone'</span><span class="token punctuation">)</span>    fig<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>cax<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Set up axes</span>    ax<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span> <span class="token operator">+</span> input_sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">+</span>                       <span class="token punctuation">[</span><span class="token string">'&lt;EOS>'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_yticklabels<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span> <span class="token operator">+</span> output_words<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Show label at every tick</span>    ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>ticker<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>ticker<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">evaluateAndShowAttention</span><span class="token punctuation">(</span>input_sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    output_words<span class="token punctuation">,</span> attentions <span class="token operator">=</span> evaluate<span class="token punctuation">(</span>        encoder1<span class="token punctuation">,</span> attn_decoder1<span class="token punctuation">,</span> input_sentence<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'input ='</span><span class="token punctuation">,</span> input_sentence<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output ='</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>output_words<span class="token punctuation">)</span><span class="token punctuation">)</span>    showAttention<span class="token punctuation">(</span>input_sentence<span class="token punctuation">,</span> output_words<span class="token punctuation">,</span> attentions<span class="token punctuation">)</span>evaluateAndShowAttention<span class="token punctuation">(</span><span class="token string">"elle a cinq ans de moins que moi ."</span><span class="token punctuation">)</span>evaluateAndShowAttention<span class="token punctuation">(</span><span class="token string">"elle est trop petit ."</span><span class="token punctuation">)</span>evaluateAndShowAttention<span class="token punctuation">(</span><span class="token string">"je ne crains pas de mourir ."</span><span class="token punctuation">)</span>evaluateAndShowAttention<span class="token punctuation">(</span><span class="token string">"c est un jeune directeur plein de talent ."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>input = elle a cinq ans de moins que moi .output = she is always to of as me . &lt;EOS&gt;input = elle est trop petit .output = she is very nice . &lt;EOS&gt;input = je ne crains pas de mourir .output = i m not going to . . &lt;EOS&gt;input = c est un jeune directeur plein de talent .output = he s a a man . &lt;EOS&gt;</code></pre><h1 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h1><ul><li><p>Try with a different dataset</p><ul><li> Another language pair</li><li> Human → Machine (e.g. IOT commands)</li><li> Chat → Response</li><li> Question → Answer</li></ul></li><li><p>Replace the embeddings with pre-trained word embeddings such as word2vec or<br> GloVe</p></li><li><p>Try with more layers, more hidden units, and more sentences. Compare<br> the training time and results.</p></li><li><p>If you use a translation file where pairs have two of the same phrase<br> (<code>I am test \t I am test</code>), you can use this as an autoencoder. Try<br> this:</p><ul><li> Train as an autoencoder</li><li> Save only the Encoder network</li><li> Train a new Decoder for translation from there</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 论文复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh远程连接服务器</title>
      <link href="/year/09/21/004/"/>
      <url>/year/09/21/004/</url>
      
        <content type="html"><![CDATA[<p>​    本文简单介绍ssh远程连接实验室服务器的步骤，踩坑许多，很多原理依旧不懂，但最后实现:</p><ul><li>连接实验室网络后内网连接远程服务器功能</li><li>配置本地密钥和远程服务器用户密钥使其免密钥功能</li><li>2021/09/25更新：实现外网连接实验室服务器的功能</li></ul><h5 id="1-实现远程连接服务器"><a href="#1-实现远程连接服务器" class="headerlink" title="1.实现远程连接服务器"></a>1.实现远程连接服务器</h5><h6 id="1-本地服务准备"><a href="#1-本地服务准备" class="headerlink" title="1.本地服务准备"></a>1.本地服务准备</h6><p>本地主机上打开windows terminal窗口(现在的windows一般会自动安装openSSH客户端和服务端),执行命令：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令后会在<code>.ssh</code>文件下生成两个密钥，<code>id_rsa</code>和<code>id_rsa.pub</code>一个私钥一个公钥;实现远程连接服务器关键是把<strong>公钥</strong>存放到远程服务器端</p><h6 id="2-配置本地config文件"><a href="#2-配置本地config文件" class="headerlink" title="2.配置本地config文件"></a>2.配置本地config文件</h6><h6 id="3-将本地公钥上传至服务器"><a href="#3-将本地公钥上传至服务器" class="headerlink" title="3.将本地公钥上传至服务器"></a>3.将本地公钥上传至服务器</h6><p>在windows terminal下执行命令</p><pre class="line-numbers language-none"><code class="language-none">scp C:\Users\VrShadow\.ssh\id_rsa.pub XXX@192.168.0.75:\home\xxx\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本地公钥拷贝至远程服务器[注意xxx更改为自己在远程服务器端分配的用户名！！！],此时传过来的公钥存在<code>./home/xxx</code>下</p><h6 id="4-公钥写入授权文件"><a href="#4-公钥写入授权文件" class="headerlink" title="4.公钥写入授权文件"></a>4.公钥写入授权文件</h6><p>在远程服务器上执行命令</p><pre class="line-numbers language-none"><code class="language-none">touch ./.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>远程服务器端这边用的是linux系统，所以先要创建文件<code>authorized_keys</code></p><p>将本地传过来的密钥<strong>写入authorizd_keys</strong>中</p><pre class="line-numbers language-none"><code class="language-none">cat ./home/xxx/id_rsa.pub >> ./.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-vscode免密登录"><a href="#2-vscode免密登录" class="headerlink" title="2.vscode免密登录"></a>2.vscode免密登录</h5><h6 id="1-准备插件SSH"><a href="#1-准备插件SSH" class="headerlink" title="1.准备插件SSH"></a>1.准备插件SSH</h6><p>在插件里搜索安装即可</p><h6 id="2-修改本地config配置文件"><a href="#2-修改本地config配置文件" class="headerlink" title="2.修改本地config配置文件"></a>2.修改本地config配置文件</h6><p>本地config文件里面加入<strong>”IdentifyFile” ”C:\Users\VrShadow.ssh\id_rsa”</strong></p><p>完成之后侧边导航栏会出现远程资源管理器图标，点击之后选择远程服务器时对应的端口下的分支用户，点击就会开启新的窗口(第一次会让你选择远程服务器的操作系统)，之后就会进入对应用户下的目录进行工作。</p><h5 id="3-外网远程连接"><a href="#3-外网远程连接" class="headerlink" title="3.外网远程连接"></a>3.外网远程连接</h5><p>自己的本地用户<code>.ssh</code>文件里面已经配置了<strong>config</strong>文件，已经配置了jump内网权限<br>命令行执行：</p><pre class="line-numbers language-none"><code class="language-none">ssh jumpnone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后需要远程服务器的密码：********</p><p>输入密码后进行远程连接操作</p><pre class="line-numbers language-none"><code class="language-none">ssh username@host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果本地用户名和远程用户名一致,登录时可以省略用户名</p><pre class="line-numbers language-none"><code class="language-none">ssh host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SSH的默认端口是22,也就是说你的登录请求会送进远程主机的22端口.使用<code>-p</code>参数可以修改端口</p><pre><code>ssh -p 2222 user@host  # 此条命令表示ssh直接连接远程主机的2222端口</code></pre><p>我写的比较粗糙,(偷个懒)可以参考我朋友的blog：</p><blockquote><p><a href="https://lry89757.github.io/2021/09/24/linux-bi-ji/">朋友的博客</a></p></blockquote><p>、最后的实验就是如下的效果:</p><ul><li><p>连接外网的情况下</p><h5 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h5><pre><code># 两种方法：(在已经配置好confi和公钥文件下并且打开jump跳板和开启“Identiyfile"下)ssh 43004   # 必须要打开跳板权限,而且回车后每次都要输入服务器所在公网地址的密码            # 当然分配给user@hosts的密码要看你是否注释了公钥ssh gyf@192.168.0.75 # 这样访问在内网下使用，当然内网下也可以使用ssh 43004连接服务器</code></pre><ul><li><h5 id="外网访问"><a href="#外网访问" class="headerlink" title="外网访问"></a>外网访问</h5><ul><li><strong>ssh 43004</strong>:需要输入服务器所在公网地址密码和分配给用户的密码</li><li><strong>ssh user@host</strong>:不能连接服务器</li></ul></li><li><h5 id="内网访问"><a href="#内网访问" class="headerlink" title="内网访问"></a>内网访问</h5><ul><li><strong>ssh 43004</strong>:仍然需要输入服务器所在公网地址密码但是不用输入分配给用户的密码了</li><li><strong>ssh user@host</strong>:这样公网密码和分配给用户的密码都不用输入了直接连接</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 搭建环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows terminal </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读一:Attention Mechanism</title>
      <link href="/year/09/19/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(%E4%B8%80)/"/>
      <url>/year/09/19/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h4 id="Abstract-amp-amp-Introduction"><a href="#Abstract-amp-amp-Introduction" class="headerlink" title="Abstract &amp;&amp; Introduction"></a>Abstract &amp;&amp; Introduction</h4><p>​    这几天阅读了一篇较早提出Attention machanism的论文<a href="https://arxiv.org/abs/1409.0473">Neural Machine Translation by Jointly Learning to Align and Translate</a>,这篇论文将注意力机制应用在神经网络翻译中，论文的思路从传统NMT(Neural Machine Translation)系统的缺陷说起，针对其进行改进，最后进行了定量和定性分析.</p><p>​    首先我们要了解经典的Sea2Seq模型是如何进行翻译的：整体模型采用Encoder-Decoder进行分析，将输入的序列经过Encoder处理，压缩成一个Fixed-length Vector；在Decoder阶段，将这个向量的信息还原成一个序列完成翻译任务。基于RNN的Seq2Seq模型主要由两篇文章介绍，只是采用了不同的RNN模型。Ilya Sutskever等人2014年在论文《Sequence to Sequence Learning with Neural Networks》中使用LSTM来搭建Seq2Seq模型。随后，2015年，Kyunghyun Cho等人在论文《Learning Phrase Representations using RNN Encoder–Decoder for Statistical Machine Translation》提出了基于GRU的Seq2Seq模型。想要解决的主要问题就是如何把机器翻译中，变长的输入X映射到一个变长输出Y。而这篇论文提出一种新的方法，这个方法也是基于<code>encoder-decoder</code>的，与之前的<code>encoder-decoder</code>模型不同的是，每次在翻译一个单词的时候，模型会自动搜寻该单词与源句子哪些单词有关联，并将这种关联的强度进行数字化表示(在模型中就是权重)，并且训练得出这种方法可以解决句子翻译不准的问题。</p><h4 id="传统RNN"><a href="#传统RNN" class="headerlink" title="传统RNN"></a>传统RNN</h4><p>​    大部分的神经机器翻译都是基于<code>encoder-decoder</code>框架的并且都会将源语言句子序列压缩成一个固定的向量，然后传递给decoder。传统的RNN Encoder-Decoder模型在训练阶段时候，会使模型去最大化源语言翻译成目标语言的条件概率。当模型训练好之后，当代翻译的源语言句子放入到模型中后，模型会自动计算最大目标句子的概率并且将这个句子当作是翻译后的句子。简单介绍以下传统的RNN:</p><p><img src="https://s2.loli.net/2021/12/23/qwz1MDimjBKYVfI.png"></p><p>上图中<code>C</code>的左侧是<code>Encoder</code>,右侧是<code>Decoder</code>,”C”是待翻译语句的语义信息；输入一个句子的时候会经过Encoder，Encoder讲这句话进行编码，Encoder用到的模型是RNN，编码结束以后将最后一个时刻RNN的隐层的输出当作输入的这句话的”语义压缩”。然后解码器每产生一个翻译后的英文单词的时候，都会利用<strong>C</strong>并且还会接受输入t时刻的上一个隐藏向量<strong>s</strong>。这个时刻的输出端就会产生第一个单词(这里使用了softmax函数，输出层是一个词典大小维度的向量)，哪个维度的值最大就取哪个维度所对应的单词。大家可以明白的是训练阶段，Encoder和Decoder不可能立马产生目标单词，而是产生一个预测结果，训练的目的就是不断优化参数。</p><h4 id="Attention机制加入"><a href="#Attention机制加入" class="headerlink" title="Attention机制加入"></a>Attention机制加入</h4><p>本paper提出的模型叫做<strong>RNNsearch</strong>：</p><p><img src="https://s6.jpg.cm/2021/12/23/LbozvD.png"></p><p>​    图中的右半部分是encoder，这一部分和RNNenc模型一样，重点在decoder部分和传统的会有巨大的差别；在t=0时刻，decoder的BiLSTM接受三个输入，第一个是初始状态s0(这个是随机初始化的，无论是训练阶段还是预测阶段都是随机)；第二个输入来源于emdedding后的向量；第三个输入比较复杂，也是新模型的核心创新点</p><p>​    首先，随机初 算(计算方式有很多种可以自己定义)，各自得到一个e1 ~ e6的值，对这个6个值进行一次softmax得到α1 ~ α6，和是1；将α1，α2，α3，α4，α5，α6看作是s0和h1 ~ h6的相似度。然后α和h向量做一次元素乘积，得到的6个向量做一次元素的相加得到最终的向量。将这个向量当作0时刻BiLSTM的第三个输入。时刻0，BiLSTM就会有一个输出，时刻变为1，接下来的过程继续向后进行。</p><p><a href="https://pytorch.org/tutorials/intermediate/seq2seq_translation_tutorial.html">NLP From Scratch: Translation with a Sequence to Sequence Network and Attention</a>实现Seq2Seq(Attention)后的模型，基本实现了此篇论文的创新点。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注意力机制 </tag>
            
            <tag> nlp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法而已</title>
      <link href="/year/09/17/basic_alogorithm/"/>
      <url>/year/09/17/basic_alogorithm/</url>
      
        <content type="html"><![CDATA[<p>算法入门：啊哈算法 算法图解 大话数据结构</p><p>算法进阶：cf 白书 紫书 蓝书</p><h2 id="第一章-基础算法"><a href="#第一章-基础算法" class="headerlink" title="第一章 基础算法"></a>第一章 基础算法</h2><h3 id="基础算法-一"><a href="#基础算法-一" class="headerlink" title="基础算法(一)"></a>基础算法(一)</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><ul><li>含义:排序是指将一个无序序列按照某个规则进行有序排列(以下排序均实现的是从小到大排序)</li></ul><h5 id="简单排序"><a href="#简单排序" class="headerlink" title="简单排序"></a>简单排序</h5><ul><li><p>冒泡排序的本质在于==交换== ，即每次通过交换的方式把当前剩余元素的最大值移动到一端</p><pre class="line-numbers language-c++"><code class="language-c++"># 冒泡排序(以下实现从小到大排序)int a[n]={......};for(int i=1;i<n;i++){  //进行n-1躺//第i躺，从a[0]-a[n-i-1]每一个数都要与下一个数进行比较，遇到后面比自己较大的数就交换，实现每一趟剩余的数a[0]-a[n-    i]的冒泡排序，使当前a[0]~a[n-i]中的最大的元素移动到最后面的,a[n-i+1]-a[i]已经排好序    for(int j=0;j< n-i;j++){        if(a[j] > a[j+1]){  //如果左边的数更大，则a[j]与a[j+1]交换            int temp = a[j];            a[j] = a[j+1];            a[j+1] = temp;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>(简单)选择排序：</p><pre class="line-numbers language-c++"><code class="language-c++"># 选择排序(以下实现从小到大排序)# 简单选择排序是指对一个序列a[n]中的元素a[1]~a[n]，令i从1~n进行枚举，进行n趟操作，每趟从待排序部分[i,n]其中选择最小的元素，令其与待排部分的第一个元素a[i]进行交换，这样元素a[i]就会与当前区间[1,i-1]形成新的有序区间[1,i],n趟操作以后，就形成有序区间int a[n]={......};void select_sort(){    for(int i=1;i<=n;i++){  //进行n趟操作        int k = i;        for(int j=i;j<=n;j++){  //选出[i,n]中最小元素的下标，并且将下标记为k            if(a[j]<a[k]){                k = j;            }        }        int temp = a[i];  //交换a[k]与当前待排序序列[i,n]的第一个元素a[i]        a[i] = a[k];        a[j] = temp;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>(直接)插入排序：</p><pre class="line-numbers language-c++"><code class="language-c++"># 直接插入排序# 直接插入排序是指对序列a[n]中的元素a[i]~a[n]，i从2~n进行枚举，进行n-1趟操作。假设某一趟，序列a[1]~a[i-1]已经有序，那么这一次就是从范围[1,i-1]中寻找某个位置j,使得a[i]插入到这个位置j后，此时a[j]~a[i-1]会自动向后移动一位到a[j+1]~a[i],范围a[1,i]有序int a[n]={......};  //n为元素个数，数组下标为1~nvoid insert_sort(){    for(int i=2;i<=n;i++){  //进行n-1趟排序        int temp = a[i],j = i; //temp临时存放a[i]        while(j>1 && temp<a[j-1]){            a[j] = a[j-1];            j--;        }        a[j] = temp;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h5><ul><li><p>快排的主要思想是分治</p><pre class="line-numbers language-c++"><code class="language-c++">//快排的时间复杂度是nlogn(这里所指的是平均复杂度)#include <iostream>acwing 785快速排序using namespace std;const int N = 1e6+10;int n;int q[N];void quick_sort(int q[], int l, int r){    if (l >= r) return;    int i = l - 1, j = r + 1, x = q[l + r >> 1];  //x的取值可以取区间里面任意一个    while (i < j)    {        do i ++ ; while (q[i] < x);        do j -- ; while (q[j] > x);        if (i < j) swap(q[i], q[j]);    }    quick_sort(q, l, j); //对左边的进行快排    quick_sort(q, j + 1, r); //对右边进行快排}int main(){    scanf("%d",&n);    for(int i=0;i<n;i++){        scanf("%d",&q[i]);    }    quick_sort(q,0,n-1);        for(int i=0;i<n;i++){        printf("%d ",q[i]);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h5><ul><li><p>归并的主要思想也是分治</p><pre class="line-numbers language-c++"><code class="language-c++">acwing787 归并排序#include <iostream>using namespace std;const int N = 1e6+10;int n;int q[N];int tmp[N];void merge_sort(int q[],int l,int r){    if(l>=r) return ;        int mid = l+r >> 1;  //1：确定分界点        merge_sort(q,l,mid);   //对左右两边分别进行归并排序    merge_sort(q,mid+1,r);        // 将左右两边进行归并排序，把两个有序的序列拼接在一起，拼接的方法就是归并    int k=0,i=l,j=mid+1;     while(i<=mid && j<= r){        if(q[i]<=q[j]) tmp[k++] = q[i++];        else tmp[k++] = q[j++];    }    while(i<=mid) tmp[k++]=q[i++];  //对于q[l]~[mid]和q[mid+1~r]两个序列，如果存在序列没有循环结束的话就直接                                到tmp序列后面即可    while(j<=r) tmp[k++]=q[j++];        for(i=l,j=0;i <= r;i++,j++) q[i] = tmp[j];}int main(){    scanf("%d",&n);    for(int i=0;i<n;i++) scanf("%d",&q[i]);        merge_sort(q,0,n-1);        for(int i=0;i<n;i++) printf("%d ",q[i]);        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h4><h5 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h5><ul><li><p>整数二分的本质:有单调性的话一定可以二分；但是能二分的不一定具有单调性<br>二分的本质是对于一个整数区间，我们先定义一个性质，要找到一个中间点，是的在这个点的右半边满足这个性质，左半边不满足这个性质，这样就可以把一个区间一分为二，找到这个边界</p><pre class="line-numbers language-c++"><code class="language-c++">#1.找到一个中间值mid# if(check(mid)) true:mid满足这个性质  false:mid不满足这个性质# 二分的时候一定要保证要寻找的值一定在不断缩小的那个区间里面，当区间的长度为1的时候就代表找到答案#acwing789:数的范围#include <iostream>#include <algorithm>#include <cstring>using namespace std;const int N=100010;int a,b;int q[N];int main(){    scanf("%d %d",&a,&b);    for(int i=0;i<a;i++) scanf("%d",&q[i]);        while(b--){        int x;        scanf("%d",&x);                int l=0,r=a-1;        while(l<r){            int mid= l+r >> 1;            if(q[mid]>=x) r=mid;            else l=mid+1;        }                if(q[l]!=x) cout<<"-1 -1"<<endl;  // 这个表示要寻找的那个值不在区间里面，此时q[l]的值是第一个满足大于x的数        else{            cout<<l<<' ';                        int l=0,r=a-1;            while(l<r){                int mid= l+r+1 >> 1;                if(q[mid]<=x) l=mid;                else r=mid-1;            }            cout<<l        }    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h5><ul><li><p>浮点数二分:本质上也是寻找边界，满足左半边满足性质，右半边不满足性质，知道</p></li><li><pre class="line-numbers language-c++"><code class="language-c++"># 例子:算平方根#include <iostream>using namespace std;int mian(){    double x;    cin>>x;        double l=0,r=x;    double mid = (l+r)/2;    while(r-l > 1e-8){        if(mid*mid>=x)  r=mid;        else l=mid;    }        printf("%lf",&l);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> acwing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇，表达点看法吧</title>
      <link href="/year/09/15/001/"/>
      <url>/year/09/15/001/</url>
      
        <content type="html"><![CDATA[<p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>值得记录一下</p><p>这是我的第一篇博文，花了很长时间来进行操作，在网上搜索的教程参差不齐，也同样会出现各种各样的问题，比如nodejs版本过高与hexo不兼容问题，我觉得还是有问题还是要多和其他人沟通，另外对主题的设置可以按照自己的风格来，但是这就需要对web知识有一定的了解，对排版有自己的理解才可以。<br>在我看来，博客更加注重的应该是内容，以及养成记录日记的习惯，对自己每个阶段的学习有一个适当的总结，可以让自己计划更加明确。<br>所以我就简单介绍hexo+github.io搭建博客过程中重要的点吧(我是用的主题是matery)</p><h4 id="本地配置文件"><a href="#本地配置文件" class="headerlink" title="本地配置文件"></a>本地配置文件</h4><p><img src="https://s2.loli.net/2021/12/23/AehfvZbFOsL2ycW.png" alt="image-20210916214915453.png"></p><ul><li><p><strong>_config.yml</strong>：</p><p>网站<strong>站点配置文件</strong>，又叫根目录站点配置文件，在这个文件里面可以配置大部分的参数</p></li><li><p><strong>scaffolds</strong>:</p><p>此文件夹会放一些默认的文件，用来当作创建博文的模板md文件，hexo会根据scaffold来建立文件。模板是指新建的md文件会默认放入模板文件的初始内容</p></li><li><p><strong>public</strong>：</p><p>这个文件的内容最终都会push到github仓库中</p></li><li><p><strong>source</strong>:</p><p>这个文件夹是存放用户资源的地方，除了<code>_posts</code>文件夹之外，开头命名为_(下划线的文件/文件夹以及隐藏的文件都会被忽略)。markdown和html文件都会被解析并放到<strong>public</strong>文件夹里面，而其他文件会被拷贝到public文件夹。</p></li><li><p>**为github仓库添加readme</p><p>既然<code>source</code>文件夹中的内容会被全部推送到public文件夹，public文件夹中的内容最终又会被push到github仓库，所以如果想要为github仓库添加readme.md，只要在source文件夹中创建就好了。最后<strong>部署</strong>到github就有readme了。但是会发现，README.md文件部署的时候会被解析成html文件，显示的是html代码，不是我们想要的文档内容。</p><p><strong>解决办法</strong>：将在source文件夹新建的README.md重命名为REMADE.MDWN，在重新部署到github。(source文件夹中，.md会被解析为html。并放到public文件夹被push到github，但.MDWN不会被解析)</p></li></ul><h4 id="一些常用的Hexo命令"><a href="#一些常用的Hexo命令" class="headerlink" title="一些常用的Hexo命令"></a>一些常用的Hexo命令</h4><ul><li><p>常用命令</p><pre><code>hexo new "postName" #新建博文hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’crtl+c'关闭server）hexo deploy #部署到githubhexo help #查看帮助hexo version #查看版本</code></pre></li><li><p>缩写</p><pre><code>hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre></li><li><p>组合命令</p><pre><code>hexo s -g #生成并本地预览hexo d -g #生成并部署到云端</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试，测试的子分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博文 </tag>
            
            <tag> 测试 </tag>
            
            <tag> whatever </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>README.md</title>
      <link href="/year/09/14/README/"/>
      <url>/year/09/14/README/</url>
      
        <content type="html"><![CDATA[<h3 id="2021-9-17-第一次更新"><a href="#2021-9-17-第一次更新" class="headerlink" title="2021.9.17 第一次更新"></a>2021.9.17 第一次更新</h3><ul><li>对文章Front-matter介绍的一些应用尝试增加<ul><li>比如title,date,top，summary等，剩下的待更新尝试<span class="github-emoji"><span>👊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>💤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li></ul></li></ul><h3 id="2021-9-14-水第一篇，啥功能没有"><a href="#2021-9-14-水第一篇，啥功能没有" class="headerlink" title="2021.9.14 水第一篇，啥功能没有"></a>2021.9.14 水第一篇，啥功能没有</h3><ul><li>能正常部署文章和渲染正常</li><li>能够访问blog</li></ul><h3 id="2021-11-05"><a href="#2021-11-05" class="headerlink" title="2021.11.05"></a>2021.11.05</h3><ul><li>建站功能</li><li>不蒜子初始化计数</li></ul><h3 id="2021-11-07"><a href="#2021-11-07" class="headerlink" title="2021.11.07"></a>2021.11.07</h3><ul><li>全局搜索</li><li>代码高亮</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
